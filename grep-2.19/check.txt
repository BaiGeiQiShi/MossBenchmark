711,723d710
<   char *t_ptr;
<   char **p;
<   intmax_t tmp;
<   strtol_error err;
<   int *tmp___1;
<   char *tmp___2;
<   int *tmp___3;
<   int *tmp___4;
<   int base;
<   int suffixes;
<   strtol_error overflow;
<   char *tmp___5;
<   char *tmp___6;
725,729d711
<   {
<                           
<     if (0 <= strtol_base) {
<       if (!(strtol_base <= 36)) {
<         {
732,735d713
<         }
<       }
<     } else {
<       {
738,740d715
<       }
<     }
<     if (ptr) {
742,751d716
<     } else {
<                  
<     }
<     {
<                                    
<                    
<                                                                                       
<                                    
<     }
<     if ((unsigned long)*p == (unsigned long)s) {
768,773d732
<     } else {
<       {
<                                      
<       }
<       if (*tmp___4 != 0) {
<         {
775d733
<         }
780,782d737
<       }
<     }
<     if (!valid_suffixes) {
785,787d739
<     }
<     if ((int)*(*p) != 0) {
<       {
791d742
<       }
796d746
<       {
798d747
<       }
870d818
<     case_98 : {;
872d819
<     }
874d820
<     case_66___0 : {;
876d821
<     }
878d822
<     case_99:;
881d824
<     case_69 : {;
883d825
<     }
885d826
<     case_71 : {;
887d827
<     }
889d828
<     case_107 : {;
891d829
<     }
893d830
<     case_77 : {;
895d831
<     }
897d832
<     case_80 : {;
899d833
<     }
901d834
<     case_84 : {;
903d835
<     }
905d836
<     case_119 : {;
907d837
<     }
909d838
<     case_89 : {;
911d839
<     }
913d840
<     case_90 : {;
915d841
<     }
917d842
<     switch_default:;
920d844
<     switch_break___0:;
926,929c850,929
<     }
<                
<                  
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
937,938d936
<   int tmp;
<   void *tmp___0;
940,955c938,955
<   {
<     if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
<                
<     } else {
< 
<     }
<     if ((size_t)tmp / s < n) {
<       {
< 
<       }
<     }
<     {
<                                
<     }
<                      
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
960,961d959
<   int tmp;
<   void *tmp___0;
963,978c961,978
<   {
<     if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
<                
<     } else {
< 
<     }
<     if ((size_t)tmp / s < n) {
<       {
< 
<       }
<     }
<     {
<                                    
<     }
<                      
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
981,982d980
<   size_t n;
<   void *tmp;
984,1004c982,1004
<   {
<             
<     if (!p) {
<       if (!n) {
<                       
<                           
<       }
<     } else {
<       if (0xaaaaaaaaaaaaaaaaUL / s <= n) {
<         {
< 
<         }
<       }
<                          
<     }
<     {
<               
<                                
<     }
<                  
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1047,1048d1046
<   void *p;
<   void *tmp;
1050,1055d1047
<   {
<     {
<                       
<               
<     }
<     if (!p) {
1061,1063c1053,1063
<     }
<                
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1068,1069d1067
<   {
<     if (!n) {
1076,1080d1073
<     }
<     {
<                         
<     }
<     if (!p) {
1086,1088c1079,1088
<     }
<                
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1102,1103d1101
<   void *tmp;
<   void *tmp___0;
1105,1111c1103,1111
<   {
<     {
<                        
<                                   
<     }
<                      
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
1115d1114
<   void *p;
1117,1127c1116,1127
<   {
<     {
<                        
<     }
<     if (!p) {
<       {
< 
<       }
<     }
<                
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1131,1132d1130
<   void *tmp;
<   void *tmp___0;
1134,1141c1132,1141
<   {
<     {
<                        
<                                                                                         
<                           
<     }
<                      
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1145,1146d1144
<   size_t tmp;
<   char *tmp___0;
1148,1154c1146,1154
<   {
<     {
<                            
<                                                                  
<     }
<                      
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
1765,1790d1764
<   ssize_t result;
<   ssize_t tmp;
<   int *tmp___0;
<   int *tmp___1;
< 
<   {
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
<         {
<                                      
<                        
<         }
<         if (0L <= result) {
<                                   
<         } else {
<           {
<                                          
<           }
<           if (*tmp___1 == 4) {
< 
<           } else {
<             {
<                                            
<             }
<             if (*tmp___0 == 22) {
1796,1804d1769
<             } else {
<                                       
<             }
<           }
<         }
<       __Cont:;;
<       }
<     while_break: ;/* CIL Label */;
<     }
1807c1772,1807
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3642,3645d3641
<   char const *slash;
<   char const *base;
<   int tmp;
<   int tmp___0;
3647,3649d3642
<   {
<     if ((unsigned long)argv0 == (unsigned long)((void *)0)) {
<       {
3653,3660d3645
<       }
<     }
<     {
<                                                 
<     }
<     if ((unsigned long)slash != (unsigned long)((void *)0)) {
<                        
<     } else {
3662,3668d3646
<     }
<     if (base - argv0 >= 7L) {
<       {
<                                                           
<       }
<       if (tmp___0 == 0) {
<         {
3671d3648
<         }
3676,3681c3653,3681
<       }
<     }
<                          
<                                             
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3692,3700d3691
<   mode_t mode___0;
<   va_list ap;
<   int tmp;
<   int tmp___0;
< 
<   {
<                          
<     if (flags & 64) {
<       {
3704,3711c3695,3711
<       }
<     }
<     {
<                                               
<                               
<     }
<                      
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
5297d5296
<   int i;
5299,5319c5298,5319
<   {
<                             
<                       
<                      
<           
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i < 4)) {
<                            
<         }
<                                      
<             
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;
<                                      
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
5324,5326c5324,5326
<   {
<                                  
<   }
---
> 
> 
> 
5329,5330d5328
<   unsigned int dest_idx;
<   int old_val;
5332,5342c5330,5342
<   {
<                                                                    
<                                     
<                                 
<                             
<     if (dest_idx == ir->ir_back) {
<                                                                        
<     }
<                             
<                      
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
5345,5346d5344
<   int top_val;
<   _Bool tmp;
5348,5365c5346,5365
<   {
<     {
<                                              
<     }
<     if (tmp) {
<       {
< 
<       }
<     }
<                                         
<                                                    
<     if (ir->ir_front == ir->ir_back) {
<                               
<     } else {
<                                                      
<     }
<                      
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
5389,5390d5388
<   size_t n;
<   size_t tmp;
5392,5403c5390,5403
<   {
<     {
<                                                               
<               
<     }
<     if (!(n < (size_t)table->n_buckets)) {
<       {
< 
<       }
<     }
<                                                       
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
5406,5441d5405
<   struct hash_entry const *bucket;
<   struct hash_entry const *tmp;
<   struct hash_entry const *cursor;
<   _Bool tmp___0;
< 
<   {
<     {
<                                                                  
<                    
<     }
<     if ((unsigned long)bucket->data == (unsigned long)((void *)0)) {
<                          
<     }
<                     
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!cursor) {
< 
<         }
<         if ((unsigned long)entry == (unsigned long)cursor->data) {
< 
<         } else {
<           {
<                                                                                 
<           }
<           if (tmp___0) {
<                                           
<           }
<         }
< 
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
5443c5407,5443
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
5447,5448d5446
<   size_t value;
<   unsigned char ch;
5450,5466c5448,5466
<   {
<                       
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
<                                     
<         if (!ch) {
<                            
<         }
<                                                         
<                  
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<                    
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
5471,5502c5471,5502
<   size_t divisor;
<   size_t square;
<   int tmp;
< 
<   {
<                         
<                                
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (square < candidate) {
<           if (!(candidate % divisor)) {
<                              
<           }
<         } else {
<                            
<         }
<                   
<                                 
<                   
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<     if (candidate % divisor) {
<               
<     } else {
<               
<     }
<                         
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
5507d5506
<   _Bool tmp;
5509,5534c5508,5534
<   {
<     if (candidate < 10UL) {
<                              
<     }
<                      
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (0xffffffffffffffffUL != candidate) {
<           {
<                                       
<           }
<           if (tmp) {
<                              
<           }
<         } else {
< 
<         }
<                          
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<                        
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
5555,5556d5554
<   Hash_tuning const *tuning;
<   float epsilon;
5558,5562d5555
<   {
<                            
<     if ((unsigned long)tuning == (unsigned long)(&default_tuning)) {
<                         
<     }
5581c5574,5581
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
5584,5585d5583
<   float new_candidate;
<   int tmp;
5587,5607c5585,5607
<   {
<     if (!tuning->is_n_buckets) {
<                                                                                  
<       if ((float)0xffffffffffffffffUL <= new_candidate) {
< 
<       }
<                                         
<     }
<     {
<                                         
<     }
<     if (sizeof(ptrdiff_t) <= sizeof(size_t)) {
<                
<     } else {
< 
<     }
<     if ((size_t)tmp / sizeof(struct hash_entry *) < candidate) {
< 
<     }
<                                                          
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
5616,5617d5615
<   Hash_table *table;
<   _Bool tmp;
5619,5620d5616
<   {
<     if ((unsigned long)hasher == (unsigned long)((void *)0)) {
5622,5623d5617
<     }
<     if ((unsigned long)comparator == (unsigned long)((void *)0)) {
5625,5662d5618
<     }
<     {
<                                                    
<     }
<     if ((unsigned long)table == (unsigned long)((void *)0)) {
< 
<     }
<     if (!tuning) {
<                                
<     }
<     {
<                              
<                                 
<     }
<     if (!tmp) {
< 
<     }
<     {
<                                                                         
<     }
<     if (!table->n_buckets) {
< 
<     }
<     {
<                                                                                               
<     }
<     if ((unsigned long)table->bucket == (unsigned long)((void *)0)) {
< 
<     }
<                                                                                         
<                                       
<                                  
<                            
<                                    
<                                    
<                                                               
<                    
<   fail : {;
5664d5619
<   }
5666c5621,5666
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
5669,5671d5668
<   struct hash_entry *bucket;
<   struct hash_entry *cursor;
<   struct hash_entry *next;
5673,5675d5669
<   {
<     if (table->data_freer) {
<       if (table->n_entries) {
5677d5670
<         {
5704,5712d5696
<         while_break___4: ;/* CIL Label */;
<         }
<       while_break:;;
<       }
<     }
<                            
<     {
<       while (1) {
<       while_continue___1: ;/* CIL Label */;
5714,5720d5697
<         if (!((unsigned long)bucket < (unsigned long)table->bucket_limit)) {
<                                
<         }
<                               
<         {
<           while (1) {
<           while_continue___2: ;/* CIL Label */;
5722,5725d5698
<             if (!cursor) {
<                                    
<             }
<             {
5729,5742d5701
<             }
<           }
<         while_break___7: ;/* CIL Label */;
<         }
<       while_break___2:;
<                  
<       }
<     while_break___6: ;/* CIL Label */;
<     }
<   while_break___1:;
<                                     
<     {
<       while (1) {
<       while_continue___3: ;/* CIL Label */;
5744,5760c5703,5760
<         if (!cursor) {
<                                
<         }
<         {
<                               
<                                
<                         
<         }
<       }
<     while_break___8: ;/* CIL Label */;
<     }
<   while_break___3 : {;
<                                 
<                         
<   }
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
5763d5762
<   struct hash_entry *new;
5765,5775c5764,5775
<   {
<     if (table->free_entry_list) {
<                                    
<                                          
<     } else {
<       {
<                                                         
<       }
<     }
<                  
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
5779,5784c5779,5784
<   {
<                             
<                                          
<                                    
<            
<   }
---
> 
> 
> 
> 
> 
> 
5788,5863c5788,5863
<   struct hash_entry *bucket;
<   struct hash_entry *tmp;
<   struct hash_entry *cursor;
<   void *data;
<   struct hash_entry *next;
<   _Bool tmp___0;
<   void *data___0;
<   struct hash_entry *next___0;
<   _Bool tmp___1;
< 
<   {
<     {
<                                                           
<                    
<                             
<     }
<     if ((unsigned long)bucket->data == (unsigned long)((void *)0)) {
<                          
<     }
<     if ((unsigned long)entry == (unsigned long)bucket->data) {
< 
<     } else {
<       {
<                                                                             
<       }
<       if (tmp___0) {
<       _L:;
<                             
<         if (delete___0) {
<           if (bucket->next) {
<             {
< 
< 
< 
<             }
<           } else {
<                                      
<           }
<         }
<                       
<       }
<     }
<                     
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!cursor->next) {
<                            
<         }
<         if ((unsigned long)entry == (unsigned long)(cursor->next)->data) {
< 
<         } else {
<           {
<                                                                                         
<           }
<           if (tmp___1) {
<           _L___0:;
<                                             
<             if (delete___0) {
<               {
<                                         
<                                               
<                                             
<               }
<             }
<                               
<           }
<         }
< 
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<                        
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6022,6030d6021
<   void *data;
<   struct hash_entry *bucket;
<   Hash_tuning const *tuning;
<   float candidate;
<   float tmp;
<   _Bool tmp___0;
<   void *tmp___1;
<   struct hash_entry *new_entry;
<   struct hash_entry *tmp___2;
6032,6034d6022
<   {
<     if (!entry) {
<       {
6036,6041d6023
<       }
<     }
<     {
<                                                               
<     }
<     if ((unsigned long)data != (unsigned long)((void *)0)) {
6046,6048d6027
<     }
<     if ((float const)table->n_buckets_used > (table->tuning)->growth_threshold * (float const)table->n_buckets) {
<       {
6050,6051d6028
<       }
<       if ((float const)table->n_buckets_used > (table->tuning)->growth_threshold * (float const)table->n_buckets) {
6062d6038
<         {
6064d6039
<         }
6068d6042
<         {
6070d6043
<         }
6076,6083d6048
<       }
<     }
<     if (bucket->data) {
<       {
<                                         
<                             
<       }
<       if ((unsigned long)new_entry == (unsigned long)((void *)0)) {
6085,6096c6050,6096
<       }
<                                       
<                                      
<                                
<                            
<                  
<     }
<                                  
<                          
<                               
<                
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6099,6121c6099,6121
<   void const *matched_ent;
<   int err;
<   int tmp;
<   void const *tmp___0;
<   void *tmp___1;
< 
<   {
<     {
<                                                               
<                 
<     }
<     if (err == -1) {
< 
<     } else {
<       if (err == 0) {
< 
<       } else {
<                         
<       }
<                                 
<     }
<                      
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6124,6131d6123
<   void *data;
<   struct hash_entry *bucket;
<   Hash_tuning const *tuning;
<   size_t candidate;
<   float tmp;
<   struct hash_entry *cursor;
<   struct hash_entry *next;
<   _Bool tmp___0;
6133,6137d6124
<   {
<     {
<                                                               
<     }
<     if (!data) {
6139,6144d6125
<     }
<                          
<     if (!bucket->data) {
<                                 
<       if ((float const)table->n_buckets_used < (table->tuning)->shrink_threshold * (float const)table->n_buckets) {
<         {
6146d6126
<         }
6179,6182c6159,6182
<       }
<     }
<                   
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6218,6235c6218,6235
<   struct Active_dir const *ax;
<   struct Active_dir const *ay;
<   int tmp;
< 
<   {
<                                       
<                                       
<     if (ax->ino == ay->ino) {
<       if (ax->dev == ay->dev) {
<                 
<       } else {
< 
<       }
<     } else {
<               
<     }
<                         
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6238d6237
<   struct Active_dir const *ax;
6240,6243c6239,6243
<   {
<                                       
<                                              
<   }
---
> 
> 
> 
> 
> 
6247,6253d6246
<   {
<     if (fts->fts_options & 258) {
<       {
<                                                                                          
<                                                                           
<       }
<       if (!fts->fts_cycle.ht) {
6255,6257d6247
<       }
<     } else {
<       {
6259d6248
<       }
6263d6251
<       {
6265,6268c6253,6268
<       }
<     }
<                       
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6271,6275d6270
<   struct stat const *st;
<   struct Active_dir *ad;
<   struct Active_dir *tmp;
<   struct Active_dir *ad_from_table;
<   _Bool tmp___0;
6277,6284d6271
<   {
<     if (fts->fts_options & 258) {
<       {
<                                                    
<                                                        
<                  
<       }
<       if (!ad) {
6286,6294d6272
<       }
<       {
<                                     
<                                     
<                           
<                                                                                               
<       }
<       if ((unsigned long)ad_from_table != (unsigned long)ad) {
<         {
6296d6273
<         }
6302,6304d6278
<       }
<     } else {
<       {
6306d6279
<       }
6311,6313c6284,6313
<     }
<                       
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6316,6319d6315
<   struct stat const *st;
<   struct Active_dir obj;
<   void *found;
<   FTSENT *parent;
6321,6330d6316
<   {
<                                                
<     if (fts->fts_options & 258) {
<       {
<                                     
<                                     
<                                                                      
<       }
<       if (!found) {
<         {
6332,6337d6317
<         }
<       }
<       {
<                     
<       }
<     } else {
6363,6365c6343,6365
<     }
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6369,6382c6369,6382
<   {
<     if (sp->fts_options & 258) {
<       if (sp->fts_cycle.ht) {
<         {
<                                       
<         }
<       }
<     } else {
<       {
< 
<       }
<     }
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6385,6413c6385,6413
<   int fd;
<   int tmp;
<   _Bool tmp___0;
< 
<   {
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
<         {
<                                                           
<         }
<         if (tmp___0) {
<                            
<         }
<         {
<                                     
<                    
<         }
<         if (0 <= fd) {
<           {
<                       
<           }
<         }
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6417,6438c6417,6438
<   {
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!((int)p->fts_info == 11)) {
<           {
< 
<           }
<         }
<                          
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<     if (required) {
<                                            
<     } else {
<                                            
<     }
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6441,6463d6440
<   int new_fd;
<   int tmp;
<   DIR *dirp;
<   int saved_errno;
<   int *tmp___0;
<   int *tmp___1;
< 
<   {
<     {
<                                                        
<                    
<     }
<     if (new_fd < 0) {
< 
<     }
<     {
<                                          
<                                
<     }
<     if (dirp) {
<                         
<     } else {
<       {
6469,6472c6446,6472
<       }
<     }
<                   
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6475,6518c6475,6518
<   int old;
<   int prev_fd_in_slot;
<   int tmp;
< 
<   {
<                          
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(old != fd)) {
<           if (!(old == -100)) {
<             {
< 
<             }
<           }
<         }
<                          
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<     if (chdir_down_one) {
<       {
<                                                  
<                               
<       }
<       if (0 <= prev_fd_in_slot) {
<         {
< 
<         }
<       }
<     } else {
<       if (!(sp->fts_options & 4)) {
<         if (0 <= old) {
<           {
<                        
<           }
<         }
<       }
<     }
<                         
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6521,6540d6520
<   int fail;
<   int tmp;
<   int tmp___0;
<   int tmp___1;
<   int tmp___2;
<   int tmp___3;
< 
<   {
<     if (!(sp->fts_options & 4)) {
<       if (sp->fts_options & 512) {
<         if (sp->fts_options & 512) {
<                      
<         } else {
< 
<         }
<         {
<                                             
<                       
<         }
<       } else {
6546,6564c6526,6564
<         {
< 
< 
<         }
<       }
<       if (tmp___2) {
< 
<       } else {
<                     
<       }
<     } else {
<                   
<     }
<     {
<                      
<                                       
<     }
<                   
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6614,6650d6613
<   register FTS *sp;
<   register FTSENT *p;
<   register FTSENT *root;
<   register size_t nitems;
<   FTSENT *parent;
<   FTSENT *tmp;
<   _Bool defer_stat;
<   int *tmp___0;
<   int *tmp___1;
<   int *tmp___2;
<   size_t maxarglen;
<   size_t tmp___5;
<   size_t tmp___6;
<   _Bool tmp___7;
<   int tmp___8;
<   size_t len;
<   size_t tmp___9;
<   char const *v;
<   struct _ftsent *tmp___10;
<   _Bool tmp___11;
<   int tmp___12;
<   void *__cil_tmp31;
<   char *__cil_tmp32;
<   char *__cil_tmp33;
<   char *__cil_tmp34;
< 
<   {
<                                    
<                                 
<     if (options & -8192) {
<       {
< 
< 
<       }
< 
<     }
<     if (options & 4) {
6658,6708d6620
<     }
<     if (!(options & 18)) {
<       {
< 
< 
<       }
< 
<     }
<     {
<                                       
<     }
<     if ((unsigned long)sp == (unsigned long)((void *)0)) {
< 
<     }
<     {
<                                          
<                               
<                                 
<     }
<     if (sp->fts_options & 2) {
<                            
<                               
<     }
<     {
<                             
<                                             
<                           
<     }
<     if (maxarglen > 4096UL) {
< 
<     } else {
<                              
<     }
<     {
<                                         
<     }
<     if (!tmp___7) {
< 
<     }
<     if ((unsigned long)*argv != (unsigned long)((void *)0)) {
<       {
<                                               
<       }
<       if ((unsigned long)parent == (unsigned long)((void *)0)) {
< 
<       }
<                                         
<     }
<     if ((unsigned long)compar == (unsigned long)((void *)0)) {
<                   
<     } else {
6714,6796d6625
<     }
<                                 
<                                  
<                        
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!((unsigned long)*argv != (unsigned long)((void *)0))) {
<                            
<         }
<         {
<                                                 
<                         
<         }
<         if (!(options & 4096)) {
<                                   
<           if (2UL < len) {
<             if ((int const) * (v + (len - 1UL)) == 47) {
<               {
<                 while (1) {
<                 while_continue___0: ;/* CIL Label */;
< 
<                   if (1UL < len) {
<                     if (!((int const) * (v + (len - 2UL)) == 47)) {
<                                            
<                     }
<                   } else {
< 
<                   }
< 
<                 }
<               while_break___2: ;/* CIL Label */;
<               }
<             while_break___0:;;
<             }
<           }
<         }
<         {
<                                                       
<         }
<         if ((unsigned long)p == (unsigned long)((void *)0)) {
< 
<         }
<                                     
<                                
<                                      
<         if (defer_stat) {
<           if ((unsigned long)root != (unsigned long)((void *)0)) {
<             {
< 
< 
<             }
<           } else {
<             {
<                                                       
<             }
<           }
<         } else {
<           {
< 
<           }
<         }
<         if (compar) {
< 
< 
<         } else {
<                                                       
<           if ((unsigned long)root == (unsigned long)((void *)0)) {
<                      
<                        
<           } else {
< 
< 
<           }
<         }
<                
<                  
<       }
<     while_break___1: ;/* CIL Label */;
<     }
<   while_break:;;
<     if (compar) {
6802,6837d6630
<     }
<     {
<                                               
<                              
<     }
<     if ((unsigned long)tmp___10 == (unsigned long)((void *)0)) {
< 
<     }
<     {
<                                      
<                                                   
<                                
<     }
<     if (!tmp___11) {
< 
<     }
<     if (!(sp->fts_options & 4)) {
<       if (!(sp->fts_options & 512)) {
<         {
< 
< 
<         }
< 
< 
< 
<       }
<     }
<     {
<                                         
<     }
<                 
<   mem3 : {;
< 
< 
<   }
<   mem2 : {;
6839,6840d6631
<   }
<   mem1 : {;
6842d6632
<   }
6844c6634,6844
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6847,6868d6846
<   register size_t len;
<   register char *cp;
<   size_t tmp;
<   char *tmp___0;
< 
<   {
<     {
<                            
<                            
<                 
<                                                                             
<                                                      
<     }
<     if (cp) {
<       if ((unsigned long)cp != (unsigned long)(p->fts_name)) {
<         {
<                
<                                          
<                                                                       
<                                
<         }
<       } else {
6877,6883c6855,6883
<       }
<     }
<                            
<                           
<                              
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
6887,6896d6886
<   register FTSENT *freep;
<   register FTSENT *p;
<   int saved_errno;
<   int *tmp;
<   int tmp___0;
<   int *tmp___1;
<   int tmp___2;
<   int *tmp___3;
<   int tmp___4;
<   int *tmp___5;
6898,6900d6887
<   {
<                     
<     if (sp->fts_cur) {
6902d6888
<       {
6919,6921d6904
<       while_break___0: ;/* CIL Label */;
<       }
<     while_break : {;
6923,6926d6905
<     }
<     }
<     if (sp->fts_child) {
<       {
6928,6936d6906
<       }
<     }
<     {
<                                   
<                                  
<     }
<     if (sp->fts_options & 512) {
<       if (0 <= sp->fts_cwd_fd) {
<         {
6938d6907
<         }
6945,6948d6913
<       }
<     } else {
<       if (!(sp->fts_options & 4)) {
<         {
6950d6914
<         }
6957d6920
<         {
6959d6921
<         }
6968,6974d6929
<       }
<     }
<     {
<                                       
<     }
<     if (sp->fts_leaf_optimization_works_ht) {
<       {
6976,6983d6930
<       }
<     }
<     {
<                    
<                        
<     }
<     if (saved_errno) {
<       {
6986d6932
<       }
6988,6990c6934,6990
<     }
<                
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
7135,7168d7134
<   register FTSENT *p;
<   register FTSENT *tmp;
<   register unsigned short instr;
<   register char *t;
<   int *tmp___0;
<   int tmp___1;
<   int *tmp___2;
<   int tmp___3;
<   struct _ftsent *tmp___4;
<   int tmp___5;
<   int *tmp___6;
<   int tmp___7;
<   size_t tmp___8;
<   char *tmp___9;
<   FTSENT *parent;
<   _Bool tmp___10;
<   int *tmp___11;
<   _Bool tmp___12;
<   int *tmp___13;
<   struct _ftsent *tmp___14;
<   int *tmp___15;
<   int tmp___16;
<   int saved_errno;
<   int *tmp___17;
<   int *tmp___18;
<   int *tmp___19;
<   int tmp___20;
<   int tmp___21;
<   int *tmp___22;
<   int tmp___23;
<   FTSENT *tmp___24;
<   char *__cil_tmp36;
<   char *__cil_tmp37;
<   char *__cil_tmp38;
7170,7171d7135
<   {
<     if ((unsigned long)sp->fts_cur == (unsigned long)((void *)0)) {
7173,7174d7136
<     } else {
<       if (sp->fts_options & 16384) {
7176,7182d7137
<       }
<     }
<                     
<                          
<                                      
<     if ((int)instr == 1) {
<       {
7184d7138
<       }
7186,7188d7139
<     }
<     if ((int)instr == 2) {
<       if ((int)p->fts_info == 12) {
7190,7192d7140
<       } else {
<         if ((int)p->fts_info == 13) {
<         _L : {;
7194d7141
<         }
7213,7224d7159
<         }
<       }
<     }
<     if ((int)p->fts_info == 1) {
<       if ((int)instr == 4) {
<                     
<       } else {
<         if (sp->fts_options & 64) {
<           if (p->fts_statp[0].st_dev != sp->fts_dev) {
<           _L___0:;
<             if ((int)p->fts_flags & 2) {
<               {
7226,7229d7160
<               }
<             }
<             if (sp->fts_child) {
<               {
7232,7250d7162
<               }
<             }
<                                             
<             {
<               while (1) {
<               while_continue: ;/* CIL Label */;
<                 {
<                                    
<                 }
<                                  
<               }
<             while_break___5: ;/* CIL Label */;
<             }
<           while_break:;;
<                        
<           }
<         }
<       }
<       if ((unsigned long)sp->fts_child != (unsigned long)((void *)0)) {
7258,7260d7169
<       }
<       if ((unsigned long)sp->fts_child != (unsigned long)((void *)0)) {
<         {
7262d7170
<         }
7284,7290d7191
<       } else {
<         {
<                                      
<                                   
<         }
<         if ((unsigned long)tmp___4 == (unsigned long)((void *)0)) {
<           if (sp->fts_options & 16384) {
7292,7293d7192
<           }
<           if (p->fts_errno) {
7297,7320d7195
<           }
<           {
<             while (1) {
<             while_continue___1: ;/* CIL Label */;
<               {
<                                  
<               }
<                                    
<             }
<           while_break___7: ;/* CIL Label */;
<           }
<         while_break___1:;;
<                      
<         }
<       }
<                         
<                                                     
<                 
<     }
<   next:;
<             
<     if ((unsigned long)p->fts_link == (unsigned long)((void *)0)) {
<       if ((p->fts_parent)->fts_dirp) {
<         {
7325d7199
<         }
7332d7205
<         {
7334d7206
<         }
7336,7348d7207
<       }
<     }
<                     
<     if ((unsigned long)p != (unsigned long)((void *)0)) {
<       {
<                         
<                           
<       }
<       if (p->fts_level == 0L) {
<         {
<                                             
<         }
<         if (tmp___5) {
7351,7359d7209
<         }
<         {
<                        
<                           
<                         
<         }
<                            
<       }
<       if ((int)p->fts_instr == 4) {
7361,7363d7210
<       }
<       if ((int)p->fts_instr == 2) {
<         {
7365d7211
<         }
7384,7407d7229
<       }
<     name:;
<       if ((int)*((p->fts_parent)->fts_path + ((p->fts_parent)->fts_pathlen - 1UL)) == 47) {
<                                                      
<       } else {
<                                                
<       }
<       {
<                                    
<                     
<             
<                              
<                                                                               
<       }
<     check_for_dir:;
<                       
<       if ((int)p->fts_info == 11) {
<         if (p->fts_statp[0].st_size == 2L) {
<                                  
<           if (0L < p->fts_level) {
<             if (parent->fts_n_dirs_remaining == 0UL) {
<               if (sp->fts_options & 8) {
<                 if (sp->fts_options & 16) {
<                   {
7409d7230
<                   }
7413,7416d7233
<                 } else {
<                               
<                 }
<               } else {
7418,7437d7234
<               }
<             } else {
<                           
<             }
<           } else {
<           _L___4 : {;
<                                                     
<           }
<             if ((p->fts_statp[0].st_mode & 61440U) == 16384U) {
<               if (p->fts_level != 0L) {
<                 if (parent->fts_n_dirs_remaining) {
<                                                    
<                 }
<               }
<             }
<           }
<         } else {
<           {
<             while (1) {
<             while_continue___2: ;/* CIL Label */;
7439,7440d7235
<               if (!(p->fts_statp[0].st_size == 1L)) {
<                 {
7442,7459d7236
<                 }
<               }
<                                    
<             }
<           while_break___8: ;/* CIL Label */;
<           }
<         while_break___2:;;
<         }
<       }
<       if ((int)p->fts_info == 1) {
<         if (p->fts_level == 0L) {
<                                                
<         }
<         {
<                                       
<         }
<         if (!tmp___12) {
<           {
7462d7238
<           }
7464,7485d7239
<         }
<       }
<                  
<     }
<   cd_dot_dot : {;
<                         
<                     
<                       
<   }
<     if (p->fts_level == -1L) {
<       {
<                         
<                                       
<                       
<                                                  
<                                
<       }
<                         
<     }
<     {
<       while (1) {
<       while_continue___3: ;/* CIL Label */;
7487,7488d7240
<         if (!((int)p->fts_info != 11)) {
<           {
7490,7503d7241
<           }
<         }
<                              
<       }
<     while_break___9: ;/* CIL Label */;
<     }
<   while_break___3:;
<                                                     
<     if (p->fts_level == 0L) {
<       {
<                                            
<       }
<       if (tmp___16) {
<         {
7507,7510d7244
<         }
<       }
<     } else {
<       if ((int)p->fts_flags & 2) {
7536d7269
<         {
7538,7545d7270
<         }
<       } else {
<         if (!((int)p->fts_flags & 1)) {
<           {
<                                                                        
<           }
<           if (tmp___23) {
<             {
7549,7554d7273
<             }
<           }
<         }
<       }
<     }
<     if (p->fts_errno) {
7556,7572d7274
<     } else {
<                                       
<     }
<     if (p->fts_errno == 0) {
<       {
<         while (1) {
<         while_continue___4: ;/* CIL Label */;
<           {
<                              
<           }
<                                
<         }
<       while_break___10: ;/* CIL Label */;
<       }
<     while_break___4:;;
<     }
<     if (sp->fts_options & 16384) {
7574,7578c7276,7578
<     } else {
<                    
<     }
<                       
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
7583d7582
<   int *tmp;
7585,7603c7584,7603
<   {
<     if (instr != 0) {
<       if (instr != 1) {
<         if (instr != 2) {
<           if (instr != 3) {
<             if (instr != 4) {
<               {
< 
< 
<               }
< 
<             }
<           }
<         }
<       }
<     }
<                                          
<                
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
7624d7623
<   mode_t type;
7626,7627d7624
<   {
<     if (dtype == 6U) {
7629,7630d7625
<     }
<     if (dtype == 2U) {
7632,7636d7626
<     }
<     if (dtype == 4U) {
<                   
<     }
<     if (dtype == 1U) {
7638,7644d7627
<     }
<     if (dtype == 10U) {
<                    
<     }
<     if (dtype == 8U) {
<                   
<     }
7649d7631
<   case_6:;
7652d7633
<   case_2:;
7655,7658d7635
<   case_4:;
<                          
<                       
<   case_1:;
7661,7667d7637
<   case_10:;
<                          
<                       
<   case_8:;
<                          
<                       
<   case_12:;
7670d7639
<   switch_default:;
7672,7675c7641,7675
<   switch_break:;
<                        
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
7678,7727d7677
<   register FTSENT *p;
<   register FTSENT *head;
<   register size_t nitems;
<   FTSENT *tail;
<   void *oldaddr;
<   int saved_errno;
<   _Bool descend;
<   _Bool doadjust;
<   ptrdiff_t level;
<   nlink_t nlinks;
<   _Bool nostat;
<   size_t len;
<   size_t maxlen;
<   size_t new_len;
<   char *cp;
<   int dir_fd;
<   FTSENT *cur;
<   _Bool continue_readdir;
<   DIR *dp;
<   int *tmp;
<   int *tmp___0;
<   DIR *tmp___1;
<   int tmp___2;
<   int tmp___3;
<   int tmp___4;
<   int *tmp___5;
<   _Bool tmp___6;
<   size_t max_entries;
<   unsigned long tmp___7;
<   int tmp___8;
<   int *tmp___9;
<   int tmp___10;
<   char *tmp___11;
<   _Bool is_dir;
<   size_t d_namelen;
<   struct dirent *dp___0;
<   struct dirent *tmp___12;
<   int *tmp___13;
<   int *tmp___14;
<   _Bool tmp___15;
<   int *tmp___16;
<   _Bool skip_stat;
<   int tmp___17;
<   int tmp___18;
<   int tmp___19;
<   int tmp___20;
<   int tmp___21;
<   int tmp___22;
<   _Bool tmp___23;
<   char *__cil_tmp53;
7729,7733d7678
<   {
<                       
<                                                   
<     if (continue_readdir) {
<       {
7736,7738d7680
<       }
<       if (dir_fd < 0) {
<         {
7747,7749d7688
<         while_break___6: ;/* CIL Label */;
<         }
<       while_break:;;
7758,7767d7696
<       }
<     } else {
<       if (sp->fts_options & 16) {
<         if (sp->fts_options & 1) {
<           if (cur->fts_level == 0L) {
<                         
<           } else {
<                              
<           }
<         } else {
7769,7773d7697
<         }
<       } else {
<                     
<       }
<       if (sp->fts_options & 2048) {
7775,7781d7698
<       } else {
<                     
<       }
<       if (!(sp->fts_options & 4)) {
<         if (sp->fts_options & 512) {
<                                    
<         } else {
7783,7792d7699
<         }
<       } else {
<                        
<       }
<       {
<                                                                                        
<                                      
<                                 
<       }
<       if ((unsigned long)tmp___1 == (unsigned long)((void *)0)) {
7801,7803d7707
<       }
<       if ((int)cur->fts_info == 11) {
<         {
7805,7823d7708
<         }
<       } else {
<         if (sp->fts_options & 256) {
<           {
<             while (1) {
<             while_continue___3: ;/* CIL Label */;
<               {
<                                    
<               }
<                                    
<             }
<           while_break___7: ;/* CIL Label */;
<           }
<         while_break___0 : {;
<                                       
<                                        
<         }
<           if (!tmp___6) {
<             {
7826d7710
<             }
7828,7834d7711
<           }
<         }
<       }
<     }
<     if ((unsigned long)sp->fts_compar == (unsigned long)((void *)0)) {
<                          
<     } else {
7836,7838d7712
<     }
<                           
<     if (type == 2) {
7841,7844d7714
<     } else {
<       if (sp->fts_options & 8) {
<         if (sp->fts_options & 16) {
<           if (sp->fts_options & 32) {
7846,7855d7715
<           } else {
<                         
<           }
<                                                                    
<                             
<         } else {
<                                
<                             
<         }
<       } else {
7858,7860d7717
<       }
<     }
<     if (continue_readdir) {
7862,7878d7718
<     } else {
<       if (nlinks) {
<                     
<       } else {
<         if (type == 3) {
<         _L___0:;
<           if (sp->fts_options & 512) {
<             {
<                                          
<             }
<             if (0 <= dir_fd) {
<               {
<                                                    
<               }
<             }
<           }
<           if (dir_fd < 0) {
7880,7885d7719
<           } else {
<             {
<                                                                                         
<             }
<             if (tmp___10) {
<             _L:;
7896d7729
<               {
7905,7907d7737
<               while_break___8: ;/* CIL Label */;
<               }
<             while_break___1:;;
7916,7920d7745
<             } else {
<                                  
<             }
<           }
<         } else {
7922,7949d7746
<         }
<       }
<     }
<     if ((int)*(cur->fts_path + (cur->fts_pathlen - 1UL)) == 47) {
<                                    
<     } else {
<                              
<     }
<     if (sp->fts_options & 4) {
<                               
<                     
<            
<                             
<     } else {
<                                
<     }
<           
<                                    
<                                 
<                         
<                                  
<                                  
<                        
<     {
<       while (1) {
<       while_continue___5: ;/* CIL Label */;
<       while_continue___2:;;
<         if (!cur->fts_dirp) {
7951,7976d7747
<         }
<         {
<                                             
<                             
<         }
<         if ((unsigned long)dp___0 == (unsigned long)((void *)0)) {
<                                
<         }
<         if (!(sp->fts_options & 32)) {
<           if ((int)dp___0->d_name[0] == 46) {
<             if (!dp___0->d_name[1]) {
<                                       
<             } else {
<               if ((int)dp___0->d_name[1] == 46) {
<                 if (!dp___0->d_name[2]) {
<                                           
<                 }
<               }
<             }
<           }
<         }
<         {
<                                                              
<                                                                        
<         }
<         if (!p) {
7978,7980d7748
<         }
<         if (d_namelen >= maxlen) {
<           {
7983d7750
<           }
8017,8020d7783
<         }
<                                   
<         if (new_len < len) {
<           {
8023,8024d7785
<           }
<           {
8033,8035d7793
<           while_break___11: ;/* CIL Label */;
<           }
<         while_break___4 : {;
8040d7797
<         }
8042,8068d7798
<         }
<                              
<                                     
<                                  
<                                                
<         if (sp->fts_options & 4) {
<           {
<                                          
<                                                                                    
<           }
<         } else {
<                                        
<         }
<         if ((unsigned long)sp->fts_compar == (unsigned long)((void *)0)) {
<                       
<         } else {
<           if (sp->fts_options & 1024) {
<           _L___1:;
<             if (sp->fts_options & 16) {
<               if (sp->fts_options & 8) {
<                 if ((int)dp___0->d_type != 0) {
<                   if (!((int)dp___0->d_type == 4)) {
<                                  
<                   } else {
<                                  
<                   }
<                 } else {
8070,8071d7799
<                 }
<               } else {
8073,8094d7800
<               }
<             } else {
<                            
<             }
<             {
<                                           
<                                                
<                                                                         
<                                                             
<             }
<             if (sp->fts_options & 16) {
<               if ((int)dp___0->d_type == 4) {
<                              
<               } else {
<                              
<               }
<             } else {
<                            
<             }
<                                      
<           } else {
<             {
8096d7801
<             }
8111,8127d7815
<           }
<         }
<         if (nlinks > 0UL) {
<           if (is_dir) {
<                                       
<           }
<         }
<                                                     
<         if ((unsigned long)head == (unsigned long)((void *)0)) {
<                    
<                       
<         } else {
<                              
<                    
<         }
<                  
<         if (max_entries <= nitems) {
8129,8150d7816
<         }
<       }
<     while_break___9: ;/* CIL Label */;
<     }
<   while_break___2:;;
<     if (cur->fts_dirp) {
<       {
<         while (1) {
<         while_continue___8: ;/* CIL Label */;
<           {
<                                     
<                                                
<           }
<                                
<         }
<       while_break___12: ;/* CIL Label */;
<       }
<     while_break___5:;;
<     }
<   break_without_closedir:;
<     if (doadjust) {
<       {
8152,8155d7817
<       }
<     }
<     if (sp->fts_options & 4) {
<       if (len == sp->fts_pathlen) {
8157,8166d7818
<       } else {
<         if (nitems == 0UL) {
<                
<         }
<       }
<                          
<     }
<     if (!continue_readdir) {
<       if (descend) {
<         if (type == 1) {
8168,8172d7819
<         } else {
<           if (!nitems) {
<           _L___2:;
<             if (cur->fts_level == 0L) {
<               {
8175,8183d7821
<               }
<             } else {
<               {
<                                                                              
<                                     
<               }
<             }
<             if (tmp___22) {
<               {
8187d7824
<               }
8189,8203d7825
<             }
<           }
<         }
<       }
<     }
<     if (!nitems) {
<       if (type == 3) {
<                                           
<       }
<       {
<                         
<       }
<                                      
<     }
<     if (nitems > 10000UL) {
8218,8219d7839
<     }
<     if (sp->fts_compar) {
8225,8227c7845,8227
<     }
<                   
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
8230,8240d8229
<   struct stat *sbp;
<   int saved_errno;
<   int *tmp;
<   int *tmp___0;
<   int *tmp___1;
<   int tmp___2;
<   int tmp___3;
<   int *tmp___4;
<   int tmp___5;
<   int tmp___6;
<   int tmp___7;
8242,8258d8230
<   {
<                        
<     if (p->fts_level == 0L) {
<       if (sp->fts_options & 1) {
<                           
<       }
<     }
<     if (sp->fts_options & 2) {
<               
<     } else {
<       if (follow) {
<       _L : {;
<                                                                                       
<                                                               
<       }
<         if (tmp___3) {
<           {
8262d8233
<           }
8278,8285d8248
<         }
<       } else {
<         {
<                                                                                                            
<                                                                         
<         }
<         if (tmp___5) {
<           {
8288,8289d8250
<           }
<         err : {;
8291d8251
<         }
8293,8297d8252
<         }
<       }
<     }
<     if ((sbp->st_mode & 61440U) == 16384U) {
<       if (sp->fts_options & 32) {
8299,8312d8253
<       } else {
<                     
<       }
<                                                                    
<       if ((int)p->fts_name[0] == 46) {
<         if (!p->fts_name[1]) {
<                       
<         } else {
<           if ((int)p->fts_name[1] == 46) {
<             if (!p->fts_name[2]) {
<             _L___0:;
<               if (p->fts_level == 0L) {
<                             
<               } else {
8314,8322d8254
<               }
<                                                
<             }
<           }
<         }
<       }
<                                  
<     }
<     if ((sbp->st_mode & 61440U) == 40960U) {
8324,8327d8255
<     }
<     if ((sbp->st_mode & 61440U) == 32768U) {
<                                  
<     }
8329c8257,8329
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
8428,8429d8427
<   register FTSENT *p;
<   size_t len;
8431,8454c8429,8454
<   {
<     {
<                                      
<                                 
<     }
<     if ((unsigned long)p == (unsigned long)((void *)0)) {
< 
<     }
<     {
<                                                                                                                      
<                       
<                                           
<                                
<                       
<                                  
<                        
<                                        
<                                        
<                                        
<                          
<                                  
<     }
<                
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
8457d8456
<   register FTSENT *p;
8459,8466d8457
<   {
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
<                  
<         if (!p) {
<                            
<         }
8473d8463
<         {
8475,8481c8465,8481
<         }
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
8484,8486d8483
<   char *p;
<   size_t new_len;
<   int *tmp;
8488,8491d8484
<   {
<                                                
<     if (new_len < sp->fts_pathlen) {
<       {
8496d8488
<       }
8498,8504d8489
<     }
<     {
<                                 
<                                                                  
<     }
<     if ((unsigned long)p == (unsigned long)((void *)0)) {
<       {
8507d8491
<       }
8509,8512c8493,8512
<     }
<                      
<                       
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
8580,8581d8579
<   size_t len;
<   size_t max;
8583,8604c8581,8604
<   {
<                     
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!*argv) {
<                            
<         }
<         {
<                                             
<         }
<         if (len > max) {
<                     
<         }
<                
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<                                                            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
8607,8621d8606
<   int ret;
<   _Bool is_dotdot;
<   int tmp;
<   int tmp___0;
<   int newfd;
<   int parent_fd;
<   _Bool tmp___1;
<   struct stat sb;
<   int tmp___2;
<   int *tmp___3;
<   int tmp___4;
<   int oerrno;
<   int *tmp___5;
<   int *tmp___6;
<   void *__cil_tmp20;
8623,8630d8607
<   {
<     if (dir) {
<       {
<                                 
<       }
<       if (tmp == 0) {
<                     
<       } else {
8632,8638d8608
<       }
<     } else {
<                   
<     }
<                                
<     if (sp->fts_options & 4) {
<       if (sp->fts_options & 512) {
8644,8668d8613
<       }
<                  
<     }
<     if (fd < 0) {
<       if (is_dotdot) {
<         if (sp->fts_options & 512) {
<           {
<                                                                        
<           }
<           if (!tmp___1) {
<             {
<                                                        
<                                    
<             }
<             if (0 <= parent_fd) {
<                              
<                                               
<             }
<           }
<         }
<       }
<     }
<                
<     if (fd < 0) {
<       {
8670d8614
<       }
8674,8675d8617
<     }
<     if (sp->fts_options & 2) {
8677,8679d8618
<     } else {
<       if (dir) {
<         {
8681,8683d8619
<         }
<         if (tmp___4 == 0) {
<         _L : {;
8685d8620
<         }
8690,8691d8624
<           if (p->fts_statp[0].st_dev != sb.st_dev) {
<             {
8695d8627
<             }
8697d8628
<           } else {
8706,8716d8636
<           }
<         }
<       }
<     }
<     if (sp->fts_options & 512) {
<       {
<                                                        
<       }
<                  
<     }
<     {
8718,8719d8637
<     }
<   bail:;
8730c8648,8730
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
8736,8740d8735
<   int f;
<   int tmp;
<   int e;
<   int *tmp___0;
<   int *tmp___1;
8742,8745d8736
<   {
<     if (0 <= fd) {
<       if (fd <= 2) {
<         {
8754,8758c8745,8758
<         }
<       }
<     }
<                 
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
8764,8776d8763
<   va_list arg;
<   int result;
<   int target;
<   int tmp;
<   int *tmp___0;
<   int flags;
<   int tmp___1;
<   int saved_errno;
<   int *tmp___2;
<   int *tmp___3;
<   int tmp___4;
<   void *p;
<   void *tmp___5;
8778,8783d8764
<   {
<     {
<                   
<                                       
<     }
<     if (action == 1030) {
8785,8787d8765
<     }
<                         
<   case_1030 : {;
8790d8767
<   }
8844,8854c8821,8854
<   switch_default : {;
<                                             
<                 
<                                   
<   }
<                       
<   switch_break : {;
<                           
<   }
<                     
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
8893,8894d8892
<   char const *tmp;
<   int tmp___0;
8896,8906d8893
<   {
<     {
<       while (1) {
<       while_continue___0: ;/* CIL Label */;
<       while_continue:;
<                   
<               
<         if ((int const) * tmp == 46) {
<                        
<         }
<         if ((int const) * tmp == 123) {
8908,8909d8894
<         }
<         if ((int const) * tmp == 125) {
8911,8912d8895
<         }
<         if ((int const) * tmp == 40) {
8914,8915d8896
<         }
<         if ((int const) * tmp == 41) {
8917,8918d8897
<         }
<         if ((int const) * tmp == 92) {
8920,8921d8898
<         }
<         if ((int const) * tmp == 43) {
8923,8924d8899
<         }
<         if ((int const) * tmp == 64) {
8926,8927d8900
<         }
<         if ((int const) * tmp == 33) {
8929,8930d8901
<         }
<         if ((int const) * tmp == 63) {
8932,8936d8902
<         }
<         if ((int const) * tmp == 42) {
<                        
<         }
<         if ((int const) * tmp == 91) {
8938,8944d8903
<         }
<         if ((int const) * tmp == 0) {
<                       
<         }
<                           
<       case_46:;
<         if (options & (1 << 27)) {
8946,8948d8904
<         }
<                           
<       case_92:;
8964d8919
<       case_43:;
8971,8978d8925
<       case_63:;
<                           
<       case_0:;
<                           
<       switch_break:;;
<       }
<     while_break: ;/* CIL Label */;
<     }
8981c8928,8981
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
8984,8996d8983
<   char const *q;
<   int tmp;
<   char *tmp___0;
<   char tmp___1;
<   char const *tmp___2;
< 
<   {
<                           
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if ((int const) * q == 92) {
9002,9020c8989,9020
<         } else {
<                   
<         }
<                  
<                       
<               
<                     
<             
<                                  
<                            
<         if (!tmp___1) {
<                            
<         }
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
9023,9024d9022
<   struct exclude *tmp;
<   struct exclude *tmp___0;
9026,9031c9024,9031
<   {
<     {
<                                                         
<     }
<                      
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
9034,9035d9033
<   char const *p;
<   size_t tmp;
9037,9043c9035,9043
<   {
<     {
<                              
<                                       
<     }
<                  
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
9102,9113c9102,9113
<   char const *p1;
<   char const *p2;
<   int tmp;
< 
<   {
<     {
<                                
<                                
<                            
<     }
<                                
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
9139,9180c9139,9180
<   struct exclude_segment *sp;
<   struct exclude_segment *tmp;
<   _Bool (*tmp___0)(void const *data1, void const *data2);
<   size_t (*tmp___1)(void const *data, size_t n_buckets);
< 
<   {
<     {
<                                                                               
<                
<                       
<                             
<     }
<     if ((unsigned int)type == 1U) {
<                   
<     }
<     if ((unsigned int)type == 0U) {
<                   
<     }
< 
<   case_1:;
<                       
<   case_0:;
<     if (options & (1 << 4)) {
< 
<     } else {
<                                 
<     }
<     if (options & (1 << 4)) {
< 
<     } else {
<                                
<     }
<     {
<                                                                                          
<                                                            
<     }
<                       
<   switch_break:;
<                         
<                   
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
9265,9296d9264
<   int (*matcher___0)(char const *, char const *, int);
<   int (*tmp)(char const *__pattern, char const *__name, int __flags);
<   _Bool matched;
<   int tmp___0;
<   char const *p;
<   int tmp___1;
< 
<   {
<     if (options & (1 << 28)) {
<                      
<     } else {
< 
<     }
<     {
<                         
<                                                     
<                                       
<     }
<     if (!(options & (1 << 30))) {
<             
<       {
<         while (1) {
<         while_continue: ;/* CIL Label */;
< 
<           if (*p) {
<             if (!(!matched)) {
<                                
<             }
<           } else {
<                              
<           }
<           if ((int const) * p == 47) {
9303,9311c9271,9311
<           }
<               
<         }
<       while_break___0: ;/* CIL Label */;
<       }
<     while_break:;;
<     }
<                      
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
9314,9322d9313
<   int options;
<   int tmp;
<   _Bool tmp___0;
<   int tmp___1;
< 
<   {
<                                  
<     if (options & (1 << 27)) {
<       {
9327,9335c9318,9335
<       }
<     } else {
<       {
<                                                                              
<                                
<       }
<     }
<                             
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
9338,9366c9338,9366
<   size_t exclude_count;
<   struct patopts const *exclude;
<   size_t i;
<   _Bool tmp;
< 
<   {
<                                                      
<                                                          
<                   
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i < exclude_count)) {
<                            
<         }
<         {
<                                                 
<         }
<         if (tmp) {
<                             
<         }
<             
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<                       
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
9370,9398d9369
<   int options;
<   Hash_table *table;
<   void *tmp;
<   char *p;
<   char *tmp___0;
< 
<   {
<                                 
<                                        
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
<         {
<                                                                                           
<         }
<         {
<           while (1) {
<           while_continue___1: ;/* CIL Label */;
<           while_continue___0 : {;
<                                                                                    
<           }
<             if (tmp) {
<                                 
<             }
<             if (options & (1 << 3)) {
<               {
< 
< 
<               }
9403,9427c9374,9427
<             }
<                                  
<           }
<         while_break___2: ;/* CIL Label */;
<         }
<       while_break___0:;;
<         if (!(options & (1 << 30))) {
<           {
<                                              
<           }
<           if (f) {
< 
<           }
<         } else {
< 
<         }
<         if (!f) {
<                            
<         }
<       }
<     while_break___1: ;/* CIL Label */;
<     }
<   while_break:;;
<                       
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
9430,9481c9430,9481
<   struct exclude_segment *seg;
<   _Bool invert;
<   char *filename___0;
<   size_t tmp;
<   _Bool tmp___0;
<   _Bool tmp___1;
< 
<   {
<                       
<                                        
<     if (!ex->head) {
< 
<     }
<                                              
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if ((unsigned int)seg->type == 0U) {
<           if (!filename___0) {
<             {
<                               
<                                                         
<             }
<           }
<           {
<                                                                                               
<           }
<           if (tmp___0) {
<                              
<           }
<         } else {
<           {
<                                                                                    
<           }
<           if (tmp___1) {
<                              
<           }
<         }
<         if (!seg->next) {
<                             
<                            
<         }
< 
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break : {;
<                                
<   }
<                                                                 
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
9484,9498d9483
<   struct exclude_segment *seg;
<   struct exclude_pattern *pat;
<   struct patopts *patopts;
<   size_t tmp;
<   int rc;
<   int cflags;
<   int tmp___0;
<   char *tmp___1;
<   size_t len;
<   size_t tmp___2;
<   char *str;
<   char *p;
<   int exclude_hash_flags;
<   _Bool tmp___3;
<   char *__cil_tmp23;
9500,9506d9484
<   {
<     if (options & ((1 << 27) | (1 << 28))) {
<       {
<                                                                   
<       }
<       if (tmp___3) {
<         if (ex->head) {
9518,9535d9495
<         } else {
<           {
<                                                                    
<           }
<         }
<                        
<                           
<         if (pat->exclude_count == pat->exclude_alloc) {
<           {
<                                                                                                   
<                                                                                  
<           }
<         }
<                                  
<                                
<                                      
<                                    
<         if (options & (1 << 27)) {
9586,9588d9545
<         } else {
<           if (options & (1 << 26)) {
<             {
9591,9601d9547
<             }
<           }
<                                        
<         }
<       } else {
<                 
<       }
<     } else {
<     _L:;
<                                                                            
<       if (ex->head) {
9613,9631d9558
<       } else {
<         {
<                                                                  
<         }
<       }
<       {
<                        
<                                
<       }
<       if ((options & ((1 << 28) | (1 << 1))) == 1 << 28) {
<         {
<                                 
<         }
<       }
<       {
<                                                                  
<       }
<       if ((unsigned long)p != (unsigned long)str) {
<         {
9633,9637c9560,9637
<         }
<       }
<     }
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
9826d9825
<   int tmp;
9828,9833c9827,9833
<   {
<     {
<                                 
<     }
<                  
<   }
---
> 
> 
> 
> 
> 
> 
> 
9913,9915c9913,9915
<   {
<            
<   }
---
> 
> 
> 
9919,9924c9919,9924
<   {
<     {
<                                                                      
<     }
<            
<   }
---
> 
> 
> 
> 
> 
> 
9928,9933c9928,9933
<   {
<     {
<                                                                                             
<     }
<            
<   }
---
> 
> 
> 
> 
> 
> 
9941,9949d9940
<   char const *write_error;
<   char const *tmp;
<   char *tmp___0;
<   int *tmp___1;
<   int *tmp___2;
<   int tmp___3;
<   int *tmp___4;
<   int tmp___5;
<   char *__cil_tmp11;
9951,9957d9941
<   {
<     {
<                                      
<     }
<     if (tmp___3 != 0) {
<       if (ignore_EPIPE) {
<         {
9959d9942
<         }
9963,9964d9945
<       } else {
<       _L : {;
9967d9947
<       }
9980d9959
<         {
9982,9989d9960
<         }
<       }
<     }
<     {
<                                      
<     }
<     if (tmp___5 != 0) {
<       {
9991,9994c9962,9994
<       }
<     }
<            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
9998,10005d9997
<   _Bool some_pending;
<   size_t tmp;
<   _Bool prev_fail;
<   int tmp___0;
<   _Bool fclose_fail;
<   int tmp___1;
<   int *tmp___2;
<   int *tmp___3;
10007,10016d9998
<   {
<     {
<                                
<                                          
<                                         
<                                         
<                                
<                                           
<     }
<     if (prev_fail) {
10018,10020d9999
<     } else {
<       if (fclose_fail) {
<         if (some_pending) {
10022,10023d10000
<         } else {
<           {
10025,10027d10001
<           }
<           if (*tmp___3 != 9) {
<           _L___0:;
10035,10040c10009,10040
<           }
<         }
<       }
<     }
<                
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
10043,10071d10042
<   int flags;
<   int tmp;
<   int newflags;
<   int tmp___0;
<   int tmp___1;
< 
<   {
<     {
<                                   
<                   
<     }
<     if (0 <= flags) {
<       if (value) {
<                             
<       } else {
< 
<       }
<                          
<       if (flags == newflags) {
< 
<       } else {
<         {
<                                                  
<         }
<         if (tmp___1 != -1) {
<                      
<         }
<       }
<     }
10073c10044,10073
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
10167,10169c10167,10169
<   {
<                
<   }
---
> 
> 
> 
11073,11075c11073,11075
<   {
<                                
<   }
---
> 
> 
> 
11080,11081d11079
<   unsigned char tmp;
<   int tmp___0;
11083,11085d11080
<   {
<     if (trans___0) {
<       {
11088,11093c11083,11093
<       }
<     } else {
<                        
<     }
<                            
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
11096,11192d11095
<   struct kwset *kwset___1;
<   struct kwset *tmp;
<   struct obstack *__h;
<   struct obstack *__o;
<   int __len;
<   struct obstack *__o1;
<   void *__value;
<   char *tmp___0;
<   char *tmp___1;
< 
<   {
<     {
<                                                         
<                       
<                                                                                     
<                                       
<                                 
<                 
<                                               
<     }
<     if (__o->chunk_limit - __o->next_free < (long)__len) {
<       {
< 
<       }
<     }
<                             
<                
<                                         
<     if ((unsigned long)__o1->next_free == (unsigned long)__value) {
< 
<     }
<     if (sizeof(long) < sizeof(void *)) {
< 
<     } else {
<                           
<     }
<     if (sizeof(long) < sizeof(void *)) {
< 
<     } else {
<                           
<     }
<                                                                                                                              
<     if (__o1->next_free - (char *)__o1->chunk > __o1->chunk_limit - (char *)__o1->chunk) {
< 
<     }
<                                         
<                                              
<                                              
<                                                           
<                                                            
<                                                          
<                                                          
<                                  
<                                  
<                                  
<                          
<                                             
<                                  
<                        
<   }
< }
< void kwsincr(kwset_t kwset___1, char const *text, size_t len) {
<   struct trie *trie;
<   char const *trans___0;
<   unsigned char uc;
<   unsigned char label___0;
<   int tmp;
<   struct tree *kwset_link;
<   struct tree *links[12];
<   enum __anonenum_dirs_58 dirs[12];
<   int depth___0;
<   int tmp___0;
<   int tmp___1;
<   struct obstack *__h;
<   struct obstack *__o;
<   int __len;
<   struct obstack *__o1;
<   void *__value;
<   char *tmp___2;
<   char *tmp___3;
<   struct obstack *__h___0;
<   struct obstack *__o___0;
<   int __len___0;
<   struct obstack *__o1___0;
<   void *__value___0;
<   char *tmp___4;
<   char *tmp___5;
<   struct tree *t;
<   struct tree *r;
<   struct tree *l;
<   struct tree *rl;
<   struct tree *lr;
<   char tmp___6;
<   char tmp___7;
<   size_t tmp___8;
<   void *__cil_tmp39;
<   void *__cil_tmp40;
11194,11208d11096
<   {
<                            
<                                  
<                 
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
<                       
<               
<         if (!tmp___8) {
<                            
<         }
<                
<                                   
<         if (trans___0) {
11210,11220d11097
<         } else {
<                         
<         }
<                                        
<                                  
<                                                  
<                                              
<                       
<         {
<           while (1) {
<           while_continue___0: ;/* CIL Label */;
11222d11098
<             if (kwset_link) {
11226,11228d11101
<             } else {
<                                    
<             }
11241,11250d11113
<           }
<         while_break___3: ;/* CIL Label */;
<         }
<       while_break___0:;;
<         if (!kwset_link) {
<                                     
<                     
<                                            
<           if (__o->chunk_limit - __o->next_free < (long)__len) {
<             {
11252,11257d11114
<             }
<           }
<                                   
<                      
<                                               
<           if ((unsigned long)__o1->next_free == (unsigned long)__value) {
11259,11260d11115
<           }
<           if (sizeof(long) < sizeof(void *)) {
11262,11265d11116
<           } else {
<                                 
<           }
<           if (sizeof(long) < sizeof(void *)) {
11267,11271d11117
<           } else {
<                                 
<           }
<                                                                                                                                    
<           if (__o1->next_free - (char *)__o1->chunk > __o1->chunk_limit - (char *)__o1->chunk) {
11273,11282d11118
<           }
<                                               
<                                               
<                                                          
<                                                          
<                                         
<                             
<                                                        
<           if (__o___0->chunk_limit - __o___0->next_free < (long)__len___0) {
<             {
11284,11289d11119
<             }
<           }
<                                           
<                              
<                                                       
<           if ((unsigned long)__o1___0->next_free == (unsigned long)__value___0) {
11291,11292d11120
<           }
<           if (sizeof(long) < sizeof(void *)) {
11294,11297d11121
<           } else {
<                                 
<           }
<           if (sizeof(long) < sizeof(void *)) {
11299,11303d11122
<           } else {
<                                 
<           }
<                                                                                                                                                    
<           if (__o1___0->next_free - (char *)__o1___0->chunk > __o1___0->chunk_limit - (char *)__o1___0->chunk) {
11305,11320d11123
<           }
<                                                       
<                                                         
<                                                     
<                                                                  
<                                             
<                                                                 
<                                                                 
<                                                       
<                                         
<                                         
<                                         
<                       
<           if ((unsigned int)dirs[depth___0] == 0U) {
<                                                    
<           } else {
11322,11325d11124
<           }
<           {
<             while (1) {
<             while_continue___1: ;/* CIL Label */;
11327d11125
<               if (depth___0) {
11331,11333d11128
<               } else {
<                                      
<               }
11340,11344d11134
<             }
<           while_break___4: ;/* CIL Label */;
<           }
<         while_break___1:;;
<           if (depth___0) {
11365a11156,11157
> }
> void kwsincr(kwset_t kwset___1, char const *text, size_t len) {
11467,11488d11258
<           }
<         }
<                                 
<       }
<     while_break___2: ;/* CIL Label */;
<     }
<   while_break:;;
<     if (!trie->accepting) {
<                                                              
<     }
<                          
<     if (trie->depth < kwset___1->mind) {
<                                     
<     }
<     if (trie->depth > kwset___1->maxd) {
<                                     
<     }
<            
<   }
< }
< static void enqueue(struct tree *tree, struct trie **last) {
<   struct trie *tmp;
11490,11505d11259
<   {
<     if (!tree) {
<              
<     }
<     {
<                                  
<                                  
<                        
<                           
<                   
<     }
<            
<   }
< }
< static void treefails(struct tree const *tree, struct trie const *fail, struct trie *recourse) {
<   struct tree *kwset_link;
11507,11556d11260
<   {
<     if (!tree) {
<              
<     }
<     {
<                                                                   
<                                                                   
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!fail) {
<                            
<         }
<                                                 
<         {
<           while (1) {
<           while_continue___0: ;/* CIL Label */;
< 
<             if (kwset_link) {
<               if (!((int const)tree->label != (int const)kwset_link->label)) {
<                                      
<               }
<             } else {
<                                    
<             }
<             if ((int const)tree->label < (int const)kwset_link->label) {
<                                              
<             } else {
<                                              
<             }
<           }
<         while_break___2: ;/* CIL Label */;
<         }
<       while_break___0:;;
<         if (kwset_link) {
<                                                 
<                  
<         }
<                                                
<       }
<     while_break___1: ;/* CIL Label */;
<     }
<   while_break:;
<                                   
<            
<   }
< }
< static void treedelta(struct tree const *tree, unsigned int depth___0, unsigned char *delta) {
11558,11574d11261
<   {
<     if (!tree) {
<              
<     }
<     {
<                                                                     
<                                                                     
<     }
<     if (depth___0 < (unsigned int)*(delta + (int const)tree->label)) {
<                                                                    
<     }
<            
<   }
< }
< static int __attribute__((__pure__)) hasevery(struct tree const *a, struct tree const *b) {
<   int __attribute__((__pure__)) tmp;
<   int __attribute__((__pure__)) tmp___0;
11576,11615d11262
<   {
<     if (!b) {
<                                                 
<     }
<     {
<                                                        
<     }
<     if (!tmp) {
< 
<     }
<     {
<                                                            
<     }
<     if (!tmp___0) {
< 
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (a) {
<           if (!((int const)b->label != (int const)a->label)) {
<                              
<           }
<         } else {
<                            
<         }
<         if ((int const)b->label < (int const)a->label) {
<                                             
<         } else {
<                                             
<         }
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<                                                     
<   }
< }
< static void treenext(struct tree const *tree, struct trie **next) {
11617,11766d11263
<   {
<     if (!tree) {
<              
<     }
<     {
<                                                        
<                                                        
<                                                                    
<     }
<            
<   }
< }
< void kwsprep(kwset_t kwset___1) {
<   char const *trans___0;
<   int i;
<   unsigned char deltabuf[256];
<   unsigned char *delta;
<   unsigned char *tmp;
<   int tmp___0;
<   struct trie *curr;
<   struct trie *last;
<   struct trie *fail;
<   int __attribute__((__pure__)) tmp___1;
<   struct trie *nextbuf[256];
<   struct trie **next;
<   struct trie **tmp___2;
<   unsigned char tmp___3;
<   struct obstack *__h;
<   struct obstack *__o;
<   int __len;
<   struct obstack *__o1;
<   void *__value;
<   char *tmp___4;
<   char *tmp___5;
<   struct obstack *__h___0;
<   struct obstack *__o___0;
<   int __len___0;
<   struct obstack *__o1___0;
<   void *__value___0;
<   char *tmp___6;
<   char *tmp___7;
<   char gc1;
<   char tmp___8;
<   int gc1help;
<   char const *equiv1;
<   char const *tmp___9;
<   char const *equiv2;
<   char const *tmp___10;
<   unsigned char tmp___12;
<   void *tmp___13;
<   unsigned char tmp___14;
<   void *__cil_tmp44;
<   void *__cil_tmp45;
< 
<   {
<                                  
<     if (trans___0) {
< 
<     } else {
<                              
<     }
<                 
<     if (kwset___1->mind < 255) {
<                                 
<     } else {
< 
<     }
<     {
<                                                        
<                              
<                   
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!curr) {
<                            
<         }
<         {
<                                       
<                                         
<                                            
<                                                                                         
<                                                                                       
<                                      
<                             
<         }
<         {
<           while (1) {
<           while_continue___0: ;/* CIL Label */;
< 
<             if (!fail) {
<                                    
<             }
<             {
<                                                                                                      
<             }
<             if (!tmp___1) {
<               if (curr->depth - fail->depth < fail->shift) {
<                                                         
<               }
<             }
<             if (curr->accepting) {
<               if (fail->maxshift > curr->depth - fail->depth) {
<                                                            
<               }
<             }
<                               
<           }
<         while_break___7: ;/* CIL Label */;
<         }
<       while_break___0:;
<                           
<       }
<     while_break___6: ;/* CIL Label */;
<     }
<   while_break:;
<                                    
<     {
<       while (1) {
<       while_continue___1: ;/* CIL Label */;
< 
<         if (!curr) {
<                                
<         }
<         if (curr->maxshift > (curr->parent)->maxshift) {
<                                                     
<         }
<         if (curr->shift > curr->maxshift) {
<                                        
<         }
<                           
<       }
<     while_break___8: ;/* CIL Label */;
<     }
<   while_break___1:;;
<     if (trans___0) {
< 
<     } else {
<                                 
<     }
<     {
<                      
<                                                
<                                                                     
<     }
<     if (trans___0) {
< 
<       {
11779,11889d11275
<       while_break___9: ;/* CIL Label */;
<       }
<     while_break___2:;;
<     }
<     if (kwset___1->words == 1L) {
<                                 
<                 
<                               
<       if (__o->chunk_limit - __o->next_free < (long)__len) {
<         {
< 
<         }
<       }
<                               
<                  
<                                           
<       if ((unsigned long)__o1->next_free == (unsigned long)__value) {
< 
<       }
<       if (sizeof(long) < sizeof(void *)) {
< 
<       } else {
<                             
<       }
<       if (sizeof(long) < sizeof(void *)) {
< 
<       } else {
<                             
<       }
<                                                                                                                                
<       if (__o1->next_free - (char *)__o1->chunk > __o1->chunk_limit - (char *)__o1->chunk) {
< 
<       }
<                                           
<                                           
<                               
<                              
<       {
<         while (1) {
<         while_continue___3: ;/* CIL Label */;
< 
<           if (!(i >= 0)) {
<                                  
<           }
<                                                                 
<                             
<               
<         }
<       while_break___10: ;/* CIL Label */;
<       }
<     while_break___3:;;
<       if (kwset___1->mind > 1) {
<                                       
<                           
<                                                                                               
<         if (__o___0->chunk_limit - __o___0->next_free < (long)__len___0) {
<           {
< 
<           }
<         }
<                                         
<                            
<                                                     
<         if ((unsigned long)__o1___0->next_free == (unsigned long)__value___0) {
< 
<         }
<         if (sizeof(long) < sizeof(void *)) {
< 
<         } else {
<                               
<         }
<         if (sizeof(long) < sizeof(void *)) {
< 
<         } else {
<                               
<         }
<                                                                                                                                                  
<         if (__o1___0->next_free - (char *)__o1___0->chunk > __o1___0->chunk_limit - (char *)__o1___0->chunk) {
< 
<         }
<                                                     
<                                               
<               
<                                        
<         {
<           while (1) {
<           while_continue___4: ;/* CIL Label */;
< 
<             if (!(i < kwset___1->mind - 1)) {
<                                    
<             }
<                                                   
<                               
<                 
<           }
<         while_break___11: ;/* CIL Label */;
<         }
<       while_break___4:;;
<       }
<       {
<                                                                               
<                       
<                      
<       }
<       if (trans___0) {
<         {
< 
< 
< 
< 
<         }
11903,11914d11288
<       }
<                            
<                                    
<       if (kwset___1->mind > 1) {
<         {
<                                                                                        
<         }
<       }
<     }
<     if (trans___0) {
< 
<       {
11927,12041d11300
<       while_break___12: ;/* CIL Label */;
<       }
<     while_break___5:;;
<     }
<            
<   }
< }
< static _Bool bm_delta2_search(char const **tpp, char const *ep, char const *sp,
<                               int len, char const *trans___0, char gc1,
<                               char gc2, unsigned char const *d1, kwset_t kwset___1) {
<   char const *tp;
<   int d;
<   int skip;
<   int i;
<   char tmp;
<   char tmp___0;
<   char tmp___1;
<   char tmp___2;
<   char tmp___3;
<   unsigned char tmp___4;
<   char tmp___5;
< 
<   {
<               
<             
<              
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
<         {
<                 
<                                                     
<         }
<         if ((int)tmp___3 == (int)gc2) {
<           {
<             while (1) {
<             while_continue___0: ;/* CIL Label */;
<                   
<               if (!(i <= d)) {
<                                      
<               }
<               {
<                                                       
<                                                           
<               }
<               if ((int)tmp != (int)tmp___0) {
<                 goto while_break___0;
<               }
<             }
<           while_break___3: ;/* CIL Label */;
<           }
<         while_break___0:;;
<           if (i > d) {
<                                
<             {
<               while (1) {
<               while_continue___1: ;/* CIL Label */;
< 
<                 if (!(i <= len)) {
<                                        
<                 }
<                 {
<                                                             
<                                                             
<                 }
<                 if ((int)tmp___1 != (int)tmp___2) {
<                                        
<                 }
<                     
<               }
<             while_break___4: ;/* CIL Label */;
<             }
<           while_break___1:;;
<             if (i > len) {
<                               
<                                 
<             }
<           }
<         }
<                                           
<                 
<         if ((unsigned long)tp > (unsigned long)ep) {
<                            
<         }
<         {
<                                                     
<         }
<         if ((int)tmp___5 != (int)gc1) {
<           if (d1) {
<             {
<                                                    
<                                                       
<             }
<           }
<                            
<         }
<                      
<       }
<     while_break___2: ;/* CIL Label */;
<     }
<   while_break:;
<               
<                       
<   }
< }
< static char const *memchr_kwset(char const *s, size_t n, kwset_t kwset___1) {
<   char const *tmp;
<   int small_heuristic;
<   int small;
<   size_t ntrans;
<   size_t tmp___0;
<   char const *slim;
<   unsigned char tmp___1;
<   void *tmp___2;
<   void *tmp___3;
12043,12049d11301
<   {
<     if (kwset___1->gc1help < 0) {
<       {
<                                                                             
<       }
<                    
<     }
12063d11314
<     {
12078,12080d11328
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;
12092,12282d11339
<   }
< }
< static size_t __attribute__((__pure__)) bmexec_trans(kwset_t kwset___1,
<                                                      char const *text,
<                                                      size_t size) {
<   unsigned char const *d1;
<   char const *ep;
<   char const *sp;
<   char const *tp;
<   int d;
<   int len;
<   char const *trans___0;
<   long tmp;
<   char gc1;
<   char gc2;
<   char const *tp0;
<   unsigned char tmp___0;
<   unsigned char tmp___1;
<   unsigned char tmp___2;
<   unsigned char tmp___3;
<   unsigned char tmp___4;
<   unsigned char tmp___5;
<   unsigned char tmp___6;
<   unsigned char tmp___7;
<   unsigned char tmp___8;
<   unsigned char tmp___9;
<   int advance_heuristic;
<   _Bool tmp___10;
<   unsigned char tmp___11;
<   unsigned char tmp___12;
<   _Bool tmp___13;
< 
<   {
<                           
<                                  
<     if (len == 0) {
< 
<     }
<     if ((size_t)len > size) {
<                                                       
<     }
<     if (len == 1) {
<       {
<                                                  
<       }
<       if (tp) {
<                         
<       } else {
<                   
<       }
<                                                      
<     }
<                                                    
<                                                  
<                     
<                          
<                          
<     if (size > (size_t)(12 * len)) {
<                                     
<       {
<         while (1) {
<         while_continue: ;/* CIL Label */;
< 
<           if (!((unsigned long)tp <= (unsigned long)ep)) {
<                              
<           }
<           {
<                      
<                                                  
<                                           
<                     
<                                                  
<                                           
<                     
<           }
<           if (d != 0) {
<             {
<                                                    
<                                             
<                       
<                                                    
<                                             
<                       
<                                                    
<                                             
<                       
<             }
<             if (d != 0) {
<               {
<                                                      
<                                               
<                         
<                                                      
<                                               
<                         
<                                                      
<                                               
<                         
<               }
<               if (d != 0) {
<                 {
<                                                        
<                                                 
<                           
<                                                        
<                                                 
<                           
<                                                                  
<                 }
<                 if ((long)advance_heuristic <= tp - tp0) {
<                                    
<                 }
<                 {
<                        
<                                                                                  
<                 }
<                 if (!tp) {
<                                                                   
<                 }
<                      
<               }
<             }
<           }
<           {
<                                                                                               
<           }
<           if (tmp___10) {
<                                                                    
<           }
<         big_advance:;;
<         }
<       while_break___1: ;/* CIL Label */;
<       }
<     while_break:;;
<     }
<     {
<                        
<                                             
<                                      
<     }
<     {
<       while (1) {
<       while_continue___1: ;/* CIL Label */;
<       while_continue___0:;;
<         if (!((long)d <= ep - tp)) {
<                                
<         }
<         {
<                   
<                                                 
<                                          
<         }
<         if (d != 0) {
<                                   
<         }
<         {
<                                                                                                                 
<                                                  
<         }
<         if (tmp___13) {
<                                                                  
<         }
<       }
<     while_break___2: ;/* CIL Label */;
<     }
<   while_break___0:;;
<                                                     
<   }
< }
< static size_t bmexec(kwset_t kwset___1, char const *text, size_t size) {
<   size_t __attribute__((__pure__)) tmp;
<   size_t __attribute__((__pure__)) tmp___0;
<   size_t __attribute__((__pure__)) tmp___1;
< 
<   {
<     if (kwset___1->trans) {
<       {
< 
< 
<       }
<     } else {
<       {
<                                                       
<                           
<       }
<     }
<                              
<   }
< }
< static size_t(__attribute__((__nonnull__(4))) cwexec)(kwset_t kwset___1, char const *text,
<                                                       size_t len, struct kwsmatch *kwsmatch) {
12428a11486,11487
> }
> static void enqueue(struct tree *tree, struct trie **last) {
12443a11503,11504
> }
> static void treefails(struct tree const *tree, struct trie const *fail, struct trie *recourse) {
12493a11555,11556
> }
> static void treedelta(struct tree const *tree, unsigned int depth___0, unsigned char *delta) {
12507a11571,11583
> }
> static int __attribute__((__pure__)) hasevery(struct tree const *a, struct tree const *b) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
12534,12554d11609
< }
< size_t(__attribute__((__nonnull__(4))) kwsexec)(kwset_t kwset___1, char const *text,
<                                                 size_t size, struct kwsmatch *kwsmatch) {
<   size_t ret;
<   size_t tmp;
<   size_t tmp___0;
< 
<   {
<     if (kwset___1->words == 1L) {
<       {
<                                             
<                   
<       }
<       if (ret != 0xffffffffffffffffUL) {
<                                     
<                                   
<                                                     
<       }
<                    
<     } else {
<       {
12556d11610
<       }
12558,12583d11611
<     }
<   }
< }
< extern reg_syntax_t re_set_syntax(reg_syntax_t __syntax);
< extern char const *re_compile_pattern(char const *__pattern, size_t __length,
<                                       struct re_pattern_buffer *__buffer);
< extern regoff_t re_search(struct re_pattern_buffer *__buffer, char const *__string,
<                           __re_idx_t __length, __re_idx_t __start, regoff_t __range,
<                           struct re_registers *__regs);
< extern regoff_t re_match(struct re_pattern_buffer *__buffer, char const *__string,
<                          __re_idx_t __length, __re_idx_t __start, struct re_registers *__regs);
< struct dfa *dfaalloc(void);
< struct dfamust *__attribute__((__pure__)) dfamusts(struct dfa const *d);
< void dfasyntax(reg_syntax_t bits, int fold, unsigned char eol);
< void dfacomp(char const *s, size_t len, struct dfa *d, int searchflag);
< char *dfaexec(struct dfa *d, char const *begin, char *end, int allow_nl, size_t *count,
<               int *backref);
< struct dfa *dfasuperset(struct dfa const *d) __attribute__((__pure__));
< _Bool dfaisfast(struct dfa const *d) __attribute__((__pure__));
< void dfawarn(char const *mesg);
< __attribute__((__noreturn__)) void dfaerror(char const *mesg);
< void GEAcompile(char const *pattern, size_t size, reg_syntax_t syntax_bits___0);
< size_t EGexecute(char const *buf, size_t size, size_t *match_size, char const *start_ptr);
< static _Bool wordchar___0(wint_t wc) {
<   int tmp;
<   int tmp___0;
12585,12586d11612
<   {
<     if (wc == 95U) {
12588,12599d11613
<     } else {
<       {
<                            
<       }
<       if (tmp) {
<                     
<       } else {
<                     
<       }
<     }
<                             
<   }
12601,12609c11615,11620
< static kwset_t kwset___0;
< static struct dfa *dfa;
< static struct patterns patterns0;
< static struct patterns *patterns;
< static size_t pcount;
< static size_t kwset_exact_matches;
< static _Bool begline;
< __attribute__((__noreturn__)) void dfaerror(char const *mesg);
< void dfaerror(char const *mesg) {
---
> static void treenext(struct tree const *tree, struct trie **next) {
> 
> 
> 
> 
> 
12618,12619c11629
< static enum __anonenum_mode_60 mode;
< void dfawarn(char const *mesg) {
---
> void kwsprep(kwset_t kwset___1) {
12641,13316d11650
< }
< static void kwsmusts(void) {
<   struct dfamust const *dm;
<   struct dfamust const *tmp;
<   size_t old_len;
<   size_t tmp___0;
<   size_t new_len;
<   char *must___0;
<   char *tmp___1;
<   char *mp;
<   size_t tmp___2;
< 
<   {
<     {
<                                                                       
<                
<     }
<     if (dm) {
<       {
<                             
<       }
<       {
<         while (1) {
<         while_continue: ;/* CIL Label */;
< 
<           if (!dm) {
<                              
<           }
<           if (!dm->exact) {
<                         
<           }
<           {
<                                   
<                                                      
<                               
<                                                                             
<                                                
<                                
<                           
<                                 
<                                          
<                                                                
<                                                                                                                     
<                             
<           }
<           if (dm->endline) {
<                                             
<           }
<           {
<                                                                 
<                                    
<           }
<         __Cont:;
<                                                 
<         }
<       while_break___1: ;/* CIL Label */;
<       }
<     while_break : {;
<                                                                      
<     }
<       {
<         while (1) {
<         while_continue___0: ;/* CIL Label */;
< 
<           if (!dm) {
<                                  
<           }
<           if (dm->exact) {
<                             
<           }
<           {
<                                                      
<                                                                 
<           }
<         __Cont___0:;
<                                                 
<         }
<       while_break___2: ;/* CIL Label */;
<       }
<     while_break___0 : {;
<                          
<     }
<     }
<            
<   }
< }
< static char const line_beg_no_bk[3] = {(char const)'^', (char const)'(', (char const)'\000'};
< static char const line_end_no_bk[3] = {(char const)')', (char const)'$', (char const)'\000'};
< static char const word_beg_no_bk[19] =
<     {(char const)'(', (char const)'^', (char const)'|', (char const)'[',
<      (char const)'^', (char const)'[', (char const)':', (char const)'a',
<      (char const)'l', (char const)'n', (char const)'u', (char const)'m',
<      (char const)':', (char const)']', (char const)'_', (char const)']',
<      (char const)')', (char const)'(', (char const)'\000'};
< static char const word_end_no_bk[19] =
<     {(char const)')', (char const)'(', (char const)'[', (char const)'^',
<      (char const)'[', (char const)':', (char const)'a', (char const)'l',
<      (char const)'n', (char const)'u', (char const)'m', (char const)':',
<      (char const)']', (char const)'_', (char const)']', (char const)'|',
<      (char const)'$', (char const)')', (char const)'\000'};
< static char const line_beg_bk[4] = {(char const)'^', (char const)'\\', (char const)'(', (char const)'\000'};
< static char const line_end_bk[4] = {(char const)'\\', (char const)')', (char const)'$', (char const)'\000'};
< static char const word_beg_bk[23] =
<     {(char const)'\\', (char const)'(', (char const)'^', (char const)'\\',
<      (char const)'|', (char const)'[', (char const)'^', (char const)'[',
<      (char const)':', (char const)'a', (char const)'l', (char const)'n',
<      (char const)'u', (char const)'m', (char const)':', (char const)']',
<      (char const)'_', (char const)']', (char const)'\\', (char const)')',
<      (char const)'\\', (char const)'(', (char const)'\000'};
< static char const word_end_bk[23] =
<     {(char const)'\\', (char const)')', (char const)'\\', (char const)'(',
<      (char const)'[', (char const)'^', (char const)'[', (char const)':',
<      (char const)'a', (char const)'l', (char const)'n', (char const)'u',
<      (char const)'m', (char const)':', (char const)']', (char const)'_',
<      (char const)']', (char const)'\\', (char const)'|', (char const)'$',
<      (char const)'\\', (char const)')', (char const)'\000'};
< void GEAcompile(char const *pattern, size_t size, reg_syntax_t syntax_bits___0) {
<   size_t total;
<   char *motif;
<   char const *p;
<   size_t len;
<   char const *sep;
<   char const *tmp;
<   char const *err;
<   char const *tmp___0;
<   int bk;
<   char *n;
<   char *tmp___1;
<   char const *tmp___2;
<   char const *tmp___3;
<   char const *tmp___4;
<   char const *tmp___5;
<   char const *tmp___6;
<   char const *tmp___7;
<   size_t tmp___8;
< 
<   {
<                  
<     if (match_icase) {
<                                                                                                                                                                                      
<     }
<     {
<                                      
<                                                        
<                   
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
<         {
<                                                                    
<                     
<         }
<         if (sep) {
<                                   
<                 
<                              
<         } else {
<                       
<                             
<         }
<         {
<                                                                                                      
<                                            
<                                                                                
<                         
<         }
<         if (err) {
<           {
< 
<           }
<         }
<                  
<                 
<         if (!p) {
<                            
<         }
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<     if (match_words) {
<               
<     } else {
<       if (match_lines) {
<       _L : {;
<                                                                                                                                  
<                                                                                               
<                     
<       }
<         if (match_lines) {
<           if (bk) {
<                                   
<           } else {
< 
<           }
<                             
<         } else {
<           if (bk) {
<                                   
<           } else {
<                                      
<           }
<                             
<         }
<         {
<                                                                                        
<                                           
<                                                                                                                           
<                        
<                         
<         }
<         if (match_lines) {
<           if (bk) {
<                                   
<           } else {
< 
<           }
<                             
<         } else {
<           if (bk) {
<                                   
<           } else {
<                                      
<           }
<                             
<         }
<         {
<                                                                                                  
<                                                       
<                            
<                     
<                                         
<                        
<         }
<       } else {
<                                     
<       }
<     }
<     {
<                        
<                                      
<                  
<                           
<     }
<            
<   }
< }
< size_t EGexecute(char const *buf, size_t size, size_t *match_size, char const *start_ptr) {
<   char const *buflim___0;
<   char const *beg;
<   char const *end;
<   char const *ptr;
<   char const *match;
<   char const *best_match;
<   char const *mb_start;
<   char eol;
<   int backref;
<   regoff_t start;
<   size_t len;
<   size_t best_len;
<   struct kwsmatch kwsm;
<   size_t i;
<   struct dfa *superset;
<   struct dfa *tmp;
<   _Bool dfafast;
<   _Bool tmp___0;
<   char const *next_beg;
<   char const *dfa_beg;
<   size_t count;
<   _Bool exact_kwset_match;
<   char const *prev_beg;
<   size_t offset;
<   size_t tmp___1;
<   long tmp___4;
<   char const *tmp___5;
<   long tmp___6;
<   long tmp___7;
<   size_t tmp___8;
<   int tmp___9;
<   ptrdiff_t tmp___10;
<   regoff_t shorter_len;
<   wint_t tmp___11;
<   _Bool tmp___12;
<   wint_t tmp___13;
<   _Bool tmp___14;
<   size_t off;
<   void *__cil_tmp53;
<   void *__cil_tmp54;
< 
<   {
<     {
<                           
<                                                  
<                      
<                                                    
<                         
<                      
<                               
<                 
<                 
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!((unsigned long)end < (unsigned long)buflim___0)) {
<                            
<         }
<                          
<         if (!start_ptr) {
<                         
<                             
<                                        
<           if (kwset___0) {
<             {
<                                                                                                             
<                                        
<                                
<             }
<             if (offset == 0xffffffffffffffffUL) {
<                            
<             }
<             {
<                                    
<                              
<                                                                                               
<             }
<             if (beg) {
<                     
<             } else {
<                         
<             }
<                           
<                                                                           
<             if (exact_kwset_match) {
<                           
<             } else {
<               if (!dfafast) {
<                             
<               } else {
<                 if (16L > match - beg) {
<                                 
<                 } else {
<                                         
<                 }
<                 if (tmp___7<(match - prev_beg)>> 2) {
<                               
<                 } else {
<                   if (16L > match - beg) {
<                                   
<                   } else {
<                                           
<                   }
<                   if (tmp___6<(buflim___0 - prev_beg)>> 2) {
<                     if (16L > match - beg) {
<                                     
<                     } else {
<                                             
<                     }
<                                                       
<                   } else {
<                                          
<                   }
<                                 
<                 }
<               }
<             }
<             {
<                                                                                                   
<             }
<             if (end) {
<                     
<             } else {
<                                
<             }
<             if (exact_kwset_match) {
<               {
<                                                    
<               }
<               if (tmp___8 == 1UL) {
< 
<               } else {
<                 {
<                                          
<                 }
<                 if (tmp___9) {
<                                
<                 }
<               }
< 
< 
< 
<               {
< 
<               }
< 
< 
< 
< 
<             }
<           }
<           if (superset) {
<             if (!exact_kwset_match) {
<               {
<                 while (1) {
<                 while_continue___0: ;/* CIL Label */;
<                   {
<                                                                                        
<                                                                                  
<                   }
<                   if (next_beg) {
<                     if ((unsigned long)next_beg != (unsigned long)end) {
<                       if (!(count != 0UL)) {
<                                              
<                       }
<                     } else {
< 
<                     }
<                   } else {
<                                          
<                   }
<                   {
<                                       
<                                                                                                        
<                           
<                                   
<                   }
<                 }
<               while_break___4: ;/* CIL Label */;
<               }
<             while_break___0:;;
<               if ((unsigned long)next_beg == (unsigned long)((void *)0)) {
<                             
<               } else {
<                 if ((unsigned long)next_beg == (unsigned long)end) {
< 
<                 }
<               }
<               {
<                                                                                                               
<               }
<               if (end) {
<                       
<               } else {
< 
<               }
<             }
<           }
<           {
<                                                                                              
<           }
<           if ((unsigned long)next_beg == (unsigned long)((void *)0)) {
<                         
<           } else {
<             if ((unsigned long)next_beg == (unsigned long)end) {
< 
<             }
<           }
<           if (count != 0UL) {
<             {
<                                                                                                  
<                     
<             }
<           }
<           {
<                                                                                                           
<           }
<           if (end) {
<                   
<           } else {
< 
<           }
<           if (!backref) {
<                          
<           }
<                     
<         } else {
<                           
<         }
<         if ((long)(((1 << (sizeof(regoff_t) * 8UL - 2UL)) - 1) * 2 + 1) < (end - beg) - 1L) {
<           {
< 
<           }
<         }
<                          
<                              
<                       
<         {
<           while (1) {
<           while_continue___1: ;/* CIL Label */;
< 
<             if (!(i < pcount)) {
<                                    
<             }
<             {
<                                                     
<                                                                                                
<                                                                                                               
<                                                              
<             }
<             if (start < -1) {
<               {
< 
<               }
<             } else {
<               if (0 <= start) {
<                                                                         
<                                     
<                 if ((unsigned long)match > (unsigned long)best_match) {
< 
<                 }
<                 if (start_ptr) {
<                   if (!match_words) {
<                                               
<                   }
<                 }
<                 if (!match_lines) {
<                   if (!match_words) {
<                                 
<                                               
<                                               
<                   } else {
<                             
<                   }
<                 } else {
<                 _L:;
<                   if (match_lines) {
< 
< 
< 
< 
< 
<                   }
<                 }
<                 if (match_words) {
<                   {
<                     while (1) {
<                     while_continue___2: ;/* CIL Label */;
< 
<                       if (!((unsigned long)match <= (unsigned long)best_match)) {
< 
<                       }
<                       {
<                                         
<                                                                    
<                                                           
<                       }
<                       if (!tmp___12) {
<                         {
<                                                                       
<                                                             
<                         }
<                         if (!tmp___14) {
<                                                     
<                         }
<                       }
<                       if (len > 0UL) {
<                         {
<                                 
<                                                                 
<                                                                                                                    
<                                                                                                    
<                         }
<                         if (shorter_len < -1) {
<                           {
< 
<                           }
<                         }
<                       }
<                       if (0 < shorter_len) {
< 
<                       } else {
<                         if ((unsigned long)match == (unsigned long)(end - 1)) {
< 
<                         }
<                         {
<                                   
<                                                                 
<                                                                                                            
<                                                                                                       
<                                                                    
<                         }
<                         if (start < 0) {
<                           if (start < -1) {
<                             {
< 
<                             }
<                           }
<                                                
<                         }
<                                                                                 
<                                             
<                       }
<                     }
<                   while_break___6: ;/* CIL Label */;
<                   }
<                 while_break___2:;;
<                 }
<                                 
<               assess_pattern_match:;
<                 if (!start_ptr) {
<                                
<                 }
<                 if ((unsigned long)match < (unsigned long)best_match) {
<                                      
<                                  
<                 } else {
< 
< 
< 
< 
< 
< 
<                 }
<               }
<             }
<           __Cont___0:;
<                 
<           }
<         while_break___5: ;/* CIL Label */;
<         }
<       while_break___1:;;
<         if ((unsigned long)best_match < (unsigned long)end) {
<                            
<                          
<                               
<         }
<       __Cont:;
<                   
<       }
<     while_break___3: ;/* CIL Label */;
<     }
<   while_break:;;
<   failure:;
<                         
<   success:;
<                               
<   success_in_len:;
<                               
<                       
<                  
<   }
< }
< void dfafree(struct dfa *d);
< void dfainit(struct dfa *d);
< void dfaparse(char const *s, size_t len, struct dfa *d);
< void dfaanalyze(struct dfa *d, int searchflag);
< void dfastate(ptrdiff_t s, struct dfa *d, ptrdiff_t *trans___0);
< extern __attribute__((__nothrow__)) int isalnum(int);
< extern __attribute__((__nothrow__)) int isalpha(int);
< extern __attribute__((__nothrow__)) int iscntrl(int);
< extern __attribute__((__nothrow__)) int isdigit(int);
< extern __attribute__((__nothrow__)) int islower(int);
< extern __attribute__((__nothrow__)) int isgraph(int);
< extern __attribute__((__nothrow__)) int isprint(int);
< extern __attribute__((__nothrow__)) int ispunct(int);
< extern __attribute__((__nothrow__)) int isspace(int);
< extern __attribute__((__nothrow__)) int isupper(int);
< extern __attribute__((__nothrow__)) int isxdigit(int);
< extern __attribute__((__nothrow__)) int toupper(int __c);
< extern __attribute__((__nothrow__)) int isblank(int);
< extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1, 2))) strncpy)(char *__restrict __dest,
<                                                                                        char const *__restrict __src,
<                                                                                        size_t __n);
< extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1, 2))) strcoll)(char const *__s1,
<                                                                                     char const *__s2) __attribute__((__pure__));
< extern __attribute__((__nothrow__)) char *setlocale(int __category, char const *__locale);
< extern __attribute__((__nothrow__)) int wctob(wint_t __c);
< extern __attribute__((__nothrow__)) size_t wcrtomb(char *__restrict __s, wchar_t __wc,
<                                                    mbstate_t *__restrict __ps);
< extern __attribute__((__nothrow__)) int iswalpha(wint_t __wc);
< extern __attribute__((__nothrow__)) wctype_t wctype(char const *__property);
< extern __attribute__((__nothrow__)) int iswctype(wint_t __wc, wctype_t __desc);
< extern __attribute__((__nothrow__)) wint_t towupper(wint_t __wc);
< static unsigned char to_uchar___0(char ch) {
13318,13393d11651
<   {
<                                
<   }
< }
< static void dfamust(struct dfa *d);
< static void regexp(void);
< static void dfambcache(struct dfa *d) {
<   int i;
<   char c;
<   unsigned char uc;
<   mbstate_t s;
<   wchar_t wc;
<   size_t tmp___0;
<   void *__cil_tmp9;
< 
<   {
<              
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i <= 127)) {
<                            
<         }
<         {
<                       
<                                 
<                         
<                                
<                                                                                                                      
<                                                                             
<         }
<         if (tmp___0 <= 1UL) {
<                                             
<         } else {
<                                              
<         }
<             
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<            
<   }
< }
< static size_t mbs_to_wchar(wint_t *pwc, char const *s, size_t n, struct dfa *d) {
<   unsigned char uc;
<   wint_t wc;
<   wchar_t wch;
<   size_t nbytes;
<   size_t tmp;
< 
<   {
<                                  
<                               
<     if (wc == 4294967295U) {
<       {
<                                                                                              
<                                                                    
<                      
<       }
<       if (0UL < nbytes) {
<         if (nbytes < 0xfffffffffffffffeUL) {
<                              
<                           
<         }
<       }
<       {
< 
<       }
<     }
<               
<                        
<   }
< }
< static _Bool tstbit(unsigned int b, charclass_word *const c) {
13395,13399d11652
<   {
<                                                        
<   }
< }
< static void setbit(unsigned int b, charclass_word *c) {
13401,13406d11653
<   {
<                                     
<            
<   }
< }
< static void clrbit(unsigned int b, charclass_word *c) {
13408,13413d11654
<   {
<                                        
<            
<   }
< }
< static void copyset(charclass_word *const src, charclass_word *dst) {
13415,13423d11655
<   {
<     {
<                                                                                                           
<                                 
<     }
<            
<   }
< }
< static void zeroset(charclass_word *s) {
13425,13433d11656
<   {
<     {
<                                               
<     }
<            
<   }
< }
< static void notset(charclass_word *s) {
<   int i;
13435,13454d11657
<   {
<           
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i < 8)) {
<                            
<         }
<                                                         
<             
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<            
<   }
< }
< static _Bool equal(charclass_word *const s1, charclass_word *const s2) {
<   int tmp;
13456,13464d11658
<   {
<     {
<                                                                           
<     }
<                                
<   }
< }
< static void *maybe_realloc(void *ptr, size_t nitems, size_t *nalloc, size_t itemsize) {
<   void *tmp;
13466,13479d11659
<   {
<     if (nitems < *nalloc) {
<                    
<     }
<     {
<                        
<                                               
<     }
<                  
<   }
< }
< static size_t dfa_charclass_index(struct dfa *d, charclass_word *const s) {
<   size_t i;
<   _Bool tmp;
13481,13511d11660
<   {
<                   
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i < d->cindex)) {
<                            
<         }
<         {
<                                                                                  
<         }
<         if (tmp) {
<                      
<         }
<             
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break : {;
<                                                                                               
<                                                                            
<                   
<                                       
<   }
<                
<   }
< }
< static struct dfa *dfa___0;
< static size_t charclass_index(charclass_word *const s) {
<   size_t tmp;
13513,13528d11661
<   {
<     {
<                                             
<     }
<                  
<   }
< }
< static reg_syntax_t syntax_bits;
< static reg_syntax_t syntax_bits_set;
< static _Bool case_fold;
< static unsigned char eolbyte___0;
< static int sbit[256];
< static charclass letters;
< static charclass newline;
< static int char_context(unsigned char c) {
<   unsigned short const **tmp;
13530,13547d11662
<   {
<     if ((int)c == (int)eolbyte___0) {
<                  
<     }
<     {
<                             
<     }
<     if ((int const) * (*tmp + (int)c) & 8) {
<                  
<     } else {
<       if ((int)c == 95) {
<                    
<       }
<     }
<                
<   }
< }
< static int wchar_context(wint_t wc) {
13570,13572d11684
< }
< void dfasyntax(reg_syntax_t bits, int fold, unsigned char eol) {
<   unsigned int i;
13574,13616d11685
<   {
<                                       
<                        
<                                    
<                       
<            
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i < 256U)) {
<                            
<         }
<         {
<                                                    
<         }
<         if (sbit[i] == 2) {
<                       
<         }
<         if (sbit[i] == 4) {
<                       
<         }
<                           
<       case_2 : {;
<                            
<       }
<                           
<       case_4 : {;
<                            
<       }
<                           
<       switch_break:;
<             
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<            
<   }
< }
< static _Bool setbit_wc(wint_t wc, charclass_word *c) {
<   int b;
<   int tmp;
13618,13632d11686
<   {
<     {
<                       
<               
<     }
<     if (b == -1) {
< 
<     }
<     {
<                                  
<     }
<                       
<   }
< }
< static void setbit_case_fold_c(int b, charclass_word *c) {
13666,13704d11719
< }
< static int utf8 = -1;
< int using_utf8(void) {
<   wchar_t wc;
<   mbstate_t mbs;
<   size_t tmp;
<   int tmp___0;
<   void *__cil_tmp6;
< 
<   {
<     if (utf8 < 0) {
<       {
<                         
<                                
<                                                                                                       
<                                                                         
<       }
<       if (tmp == 2UL) {
<         if (wc == 256) {
<                       
<         } else {
< 
<         }
<       } else {
< 
<       }
<                      
<     }
<                   
<   }
< }
< static _Bool using_simple_locale(void);
< static int unibyte_c = -1;
< static _Bool using_simple_locale(void) {
<   char const *locale;
<   char const *tmp;
<   int tmp___0;
<   int tmp___1;
<   int tmp___2;
13706,13709d11720
<   {
<     if (dfa___0->multibyte) {
<                         
<     } else {
13737,13841d11747
<     }
<   }
< }
< static char const *lexptr;
< static size_t lexleft;
< static token lasttok;
< static _Bool laststart;
< static size_t parens;
< static int minrep;
< static int maxrep;
< static int cur_mb_len = 1;
< static wint_t wctok;
< static short const lonesome_lower[19] =
<     {(short const)181, (short const)305, (short const)383, (short const)453,
<      (short const)456, (short const)459, (short const)498, (short const)837,
<      (short const)962, (short const)976, (short const)977, (short const)981,
<      (short const)982, (short const)1008, (short const)1009, (short const)1010,
<      (short const)1013, (short const)7835, (short const)8126};
< static int case_folded_counterparts(wchar_t c, wchar_t *folded) {
<   int i;
<   int n;
<   wint_t uc;
<   wint_t tmp;
<   wint_t lc;
<   wint_t tmp___0;
<   int tmp___1;
<   int tmp___2;
<   wint_t tmp___3;
<   wint_t li;
<   int tmp___4;
<   wint_t tmp___5;
< 
<   {
<     {
<             
<                                 
<                
<                              
<                    
<     }
<     if (uc != (wint_t)c) {
<                   
<           
<                                         
<     }
<     if (lc != uc) {
<       if (lc != (wint_t)c) {
<         {
<                                  
<         }
<         if (tmp___3 == uc) {
<                       
<               
<                                             
<         }
<       }
<     }
<           
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!((unsigned long)i < sizeof(lonesome_lower) / sizeof(lonesome_lower[0]))) {
<                            
<         }
<                                        
<         if (li != lc) {
<           if (li != uc) {
<             if (li != (wint_t)c) {
<               {
<                                        
<               }
<               if (tmp___5 == uc) {
<                             
<                     
<                                                   
<               }
<             }
<           }
<         }
<             
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<                
<   }
< }
< static struct dfa_ctype const prednames[13] =
<     {{"alpha", &isalpha, (_Bool)0},
<      {"upper", &isupper, (_Bool)0},
<      {"lower", &islower, (_Bool)0},
<      {"digit", &isdigit, (_Bool)1},
<      {"xdigit", &isxdigit, (_Bool)0},
<      {"space", &isspace, (_Bool)0},
<      {"punct", &ispunct, (_Bool)0},
<      {"alnum", &isalnum, (_Bool)0},
<      {"print", &isprint, (_Bool)0},
<      {"graph", &isgraph, (_Bool)0},
<      {"cntrl", &iscntrl, (_Bool)0},
<      {"blank", &isblank, (_Bool)0},
<      {(char const *)((void *)0), (predicate *)((void *)0), (_Bool)0}};
< static struct dfa_ctype const *__attribute__((__pure__)) find_pred(char const *str) {
<   unsigned int i;
<   int tmp;
13843,14018d11748
<   {
<            
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!prednames[i].name) {
< 
<         }
<         {
<                                                              
<         }
<         if (tmp == 0) {
<                            
<         }
<             
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<                                                                                        
<   }
< }
< static charclass zeroclass;
< static token parse_bracket_exp(void) {
<   _Bool invert;
<   int c;
<   int c1;
<   int c2;
<   charclass ccl;
<   _Bool known_bracket_exp;
<   int colon_warning_state;
<   wint_t wc;
<   wint_t wc2;
<   wint_t wc1;
<   struct mb_char_classes *work_mbc;
<   size_t chars_al;
<   size_t ranges_al;
<   size_t ch_classes_al;
<   size_t equivs_al;
<   size_t coll_elems_al;
<   size_t tmp;
<   char *tmp___0;
<   char *tmp___1;
<   wint_t _wc;
<   size_t nbytes;
<   size_t tmp___2;
<   unsigned char tmp___3;
<   char *tmp___4;
<   char *tmp___5;
<   wint_t _wc___0;
<   size_t nbytes___0;
<   size_t tmp___6;
<   unsigned char tmp___7;
<   char *tmp___8;
<   char *tmp___9;
<   wint_t _wc___1;
<   size_t nbytes___1;
<   size_t tmp___10;
<   unsigned char tmp___11;
<   char str[33];
<   size_t len;
<   char *tmp___12;
<   char *tmp___13;
<   wint_t _wc___2;
<   size_t nbytes___2;
<   size_t tmp___14;
<   unsigned char tmp___15;
<   size_t tmp___16;
<   char *tmp___17;
<   char *tmp___18;
<   wint_t _wc___3;
<   size_t nbytes___3;
<   size_t tmp___19;
<   unsigned char tmp___20;
<   char const *class;
<   char const *tmp___23;
<   int tmp___24;
<   int tmp___25;
<   struct dfa_ctype const *pred;
<   struct dfa_ctype const *tmp___26;
<   char *tmp___27;
<   wctype_t wt;
<   wctype_t tmp___28;
<   size_t tmp___29;
<   int tmp___30;
<   char *tmp___31;
<   char *tmp___32;
<   wint_t _wc___4;
<   size_t nbytes___4;
<   size_t tmp___33;
<   unsigned char tmp___34;
<   char *tmp___35;
<   char *tmp___36;
<   wint_t _wc___5;
<   size_t nbytes___5;
<   size_t tmp___37;
<   unsigned char tmp___38;
<   char *tmp___39;
<   char *tmp___40;
<   wint_t _wc___6;
<   size_t nbytes___6;
<   size_t tmp___41;
<   unsigned char tmp___42;
<   char *tmp___43;
<   char *tmp___44;
<   wint_t _wc___7;
<   size_t nbytes___7;
<   size_t tmp___45;
<   unsigned char tmp___46;
<   char *tmp___47;
<   char *tmp___48;
<   wint_t _wc___8;
<   size_t nbytes___8;
<   size_t tmp___49;
<   unsigned char tmp___50;
<   wint_t tmp___51;
<   size_t tmp___52;
<   wint_t tmp___53;
<   size_t tmp___54;
<   int tmp___55;
<   int tmp___56;
<   int uc;
<   int tmp___57;
<   int uc2;
<   int tmp___58;
<   int uc1;
<   int tmp___59;
<   _Bool tmp___60;
<   char *tmp___61;
<   char *tmp___62;
<   wint_t _wc___9;
<   size_t nbytes___9;
<   size_t tmp___63;
<   unsigned char tmp___64;
<   int tmp___65;
<   wchar_t folded[22];
<   int i;
<   int n;
<   int tmp___66;
<   int tmp___67;
<   size_t tmp___68;
<   _Bool tmp___69;
<   char *tmp___70;
<   size_t tmp___72;
<   _Bool tmp___73;
<   size_t tmp___74;
<   void *__cil_tmp161;
<   void *__cil_tmp162;
<   void *__cil_tmp163;
<   char *__cil_tmp164;
<   char *__cil_tmp165;
<   char *__cil_tmp166;
<   char *__cil_tmp167;
<   char *__cil_tmp168;
<   char *__cil_tmp169;
<   char *__cil_tmp170;
<   char *__cil_tmp171;
<   char *__cil_tmp172;
<   char *__cil_tmp173;
<   char *__cil_tmp174;
<   char *__cil_tmp175;
<   char *__cil_tmp176;
<   char *__cil_tmp177;
<   char *__cil_tmp178;
<   char *__cil_tmp179;
<   char *__cil_tmp180;
<   char *__cil_tmp181;
<   char *__cil_tmp182;
<   char *__cil_tmp183;
<   char *__cil_tmp184;
<   char *__cil_tmp185;
<   char *__cil_tmp186;
<   char *__cil_tmp187;
<   char *__cil_tmp188;
<   char *__cil_tmp189;
14020,14039d11749
<   {
<                                  
<                     
<                               
<                               
<                               
<                               
<                          
<     if (dfa___0->multibyte) {
<       {
<                                                                                             
<                                                                                      
<                                                                                            
<                                                                                                 
<                                 
<                               
<                                           
<                                                        
<       }
<     } else {
14041,14047d11750
<     }
<     {
<                                             
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
14049,14050d11751
<         if (!lexleft) {
<           {
14052d11752
<           }
14062,14074d11761
<         } else {
<           {
<                                                                    
<                              
<                                      
<                      
<           }
<           if (nbytes == 1UL) {
<             {
<                                                     
<                                
<             }
<           } else {
14076,14088d11762
<           }
<                            
<                             
<         }
<                          
<       }
<     while_break___16: ;/* CIL Label */;
<     }
<   while_break:;;
<     if (c == 94) {
<       {
<         while (1) {
<         while_continue___0: ;/* CIL Label */;
14090,14091d11763
<           if (!lexleft) {
<             {
14093d11764
<             }
14103,14115d11773
<           } else {
<             {
<                                                                          
<                                    
<                                            
<                            
<             }
<             if (nbytes___0 == 1UL) {
<               {
<                                                       
<                                  
<               }
<             } else {
14117,14141d11774
<             }
<                                  
<                                   
<           }
<                                
<         }
<       while_break___17: ;/* CIL Label */;
<       }
<     while_break___0 : {;
<                         
<                                                 
<     }
<     } else {
<                         
<     }
<                                   
<     {
<       while (1) {
<       while_continue___1: ;/* CIL Label */;
<                  
<                                   
<         if (c == 91) {
<           {
<             while (1) {
<             while_continue___2: ;/* CIL Label */;
14143,14144d11775
<               if (!lexleft) {
<                 {
14146d11776
<                 }
14156,14168d11785
<               } else {
<                 {
<                                                                               
<                                         
<                                                
<                                 
<                 }
<                 if (nbytes___1 == 1UL) {
<                   {
<                                                            
<                                        
<                   }
<                 } else {
14170,14182d11786
<                 }
<                                      
<                                       
<               }
<                                    
<             }
<           while_break___19: ;/* CIL Label */;
<           }
<         while_break___2:;;
<           if (c1 == 58) {
<             if (syntax_bits & ((1UL << 1) << 1)) {
<                           
<             } else {
14184,14187d11787
<             }
<           } else {
<           _L___1:;
<             if (c1 == 46) {
14189,14195d11788
<             } else {
<               if (c1 == 61) {
<               _L___0:;
<                                 
<                 {
<                   while (1) {
<                   while_continue___3: ;/* CIL Label */;
14197,14199d11789
<                     {
<                       while (1) {
<                       while_continue___4: ;/* CIL Label */;
14201,14202d11790
<                         if (!lexleft) {
<                           {
14204d11791
<                           }
14214,14226d11800
<                         } else {
<                           {
<                                                                                         
<                                                   
<                                                          
<                                          
<                           }
<                           if (nbytes___2 == 1UL) {
<                             {
<                                                                      
<                                                 
<                             }
<                           } else {
14228,14240d11801
<                           }
<                                                
<                                                 
<                         }
<                                              
<                       }
<                     while_break___21: ;/* CIL Label */;
<                     }
<                   while_break___4:;;
<                     if (c == c1) {
<                       if ((int const) * lexptr == 93) {
<                                              
<                       } else {
14242,14245d11802
<                       }
<                     } else {
<                     _L:;
<                       if (lexleft == 0UL) {
14247,14253d11803
<                       }
<                     }
<                     if (len < 32UL) {
<                                      
<                             
<                                               
<                     } else {
14255,14263d11804
<                     }
<                   }
<                 while_break___20: ;/* CIL Label */;
<                 }
<               while_break___3:;
<                                         
<                 {
<                   while (1) {
<                   while_continue___5: ;/* CIL Label */;
14265,14266d11805
<                     if (!lexleft) {
<                       {
14268d11806
<                       }
14278,14290d11815
<                     } else {
<                       {
<                                                                                     
<                                               
<                                                      
<                                      
<                       }
<                       if (nbytes___3 == 1UL) {
<                         {
<                                                                  
<                                             
<                         }
<                       } else {
14292,14306d11816
<                       }
<                                            
<                                             
<                     }
<                                          
<                   }
<                 while_break___22: ;/* CIL Label */;
<                 }
<               while_break___5:;;
<                 if (c1 == 58) {
<                   if (case_fold) {
<                     {
<                                                                       
<                     }
<                     if (tmp___24 == 0) {
14308,14312d11817
<                     } else {
<                       {
<                                                                         
<                       }
<                       if (tmp___25 == 0) {
14314,14327d11818
<                       } else {
<                                                        
<                       }
<                     }
<                   } else {
<                                                    
<                   }
<                   {
<                                      
<                                                                           
<                                     
<                   }
<                   if (!pred) {
<                     {
14330,14349d11820
<                     }
<                   }
<                   if (dfa___0->multibyte) {
<                     if (!pred->single_byte_only) {
<                       {
<                                                  
<                                       
<                                                                                                       
<                                                                                                
<                                                                                                                           
<                                                          
<                                                   
<                                                                 
<                       }
<                     }
<                   }
<                          
<                   {
<                     while (1) {
<                     while_continue___6: ;/* CIL Label */;
14351,14367d11821
<                       if (!(c2 < 256)) {
<                                              
<                       }
<                       {
<                                                        
<                       }
<                       if (tmp___30) {
<                         {
<                                                         
<                         }
<                       }
<                            
<                     }
<                   while_break___23: ;/* CIL Label */;
<                   }
<                 while_break___6:;;
<                 } else {
14369,14373d11822
<                 }
<                                          
<                 {
<                   while (1) {
<                   while_continue___7: ;/* CIL Label */;
14375,14376d11823
<                     if (!lexleft) {
<                       {
14378d11824
<                       }
14388,14400d11833
<                     } else {
<                       {
<                                                                                     
<                                               
<                                                      
<                                       
<                       }
<                       if (nbytes___4 == 1UL) {
<                         {
<                                                                  
<                                              
<                         }
<                       } else {
14402,14416d11834
<                       }
<                                            
<                                             
<                     }
<                                          
<                   }
<                 while_break___24: ;/* CIL Label */;
<                 }
<               while_break___7:;;
<                             
<               }
<             }
<           }
<         }
<         if (c == 92) {
14459,14463d11876
<         }
<         if (c1 == 256) {
<           {
<             while (1) {
<             while_continue___9: ;/* CIL Label */;
14465,14466d11877
<               if (!lexleft) {
<                 {
14468d11878
<                 }
14478,14490d11887
<               } else {
<                 {
<                                                                               
<                                         
<                                                
<                                 
<                 }
<                 if (nbytes___6 == 1UL) {
<                   {
<                                                            
<                                        
<                   }
<                 } else {
14492,14505d11888
<                 }
<                                      
<                                       
<               }
<                                    
<             }
<           while_break___26: ;/* CIL Label */;
<           }
<         while_break___9:;;
<         }
<         if (c1 == 45) {
<           {
<             while (1) {
<             while_continue___10: ;/* CIL Label */;
14507,14508d11889
<               if (!lexleft) {
<                 {
14510d11890
<                 }
14520,14532d11899
<               } else {
<                 {
<                                                                               
<                                         
<                                                
<                                 
<                 }
<                 if (nbytes___7 == 1UL) {
<                   {
<                                                            
<                                        
<                   }
<                 } else {
14534,14543d11900
<                 }
<                                      
<                                       
<               }
<                                     
<             }
<           while_break___27: ;/* CIL Label */;
<           }
<         while_break___10:;;
<           if (c2 == 91) {
14548,14550d11904
<           }
<           if (c2 != 93) {
<             if (c2 == 92) {
14578a11933,11940
> }
> static _Bool bm_delta2_search(char const **tpp, char const *ep, char const *sp,
>                               int len, char const *trans___0, char gc1,
>                               char gc2, unsigned char const *d1, kwset_t kwset___1) {
> 
> 
> 
> 
14593,14604d11954
<             }
<             if (dfa___0->multibyte) {
<               if (wc != 4294967295U) {
<                 if (wc2 != 4294967295U) {
<                   {
<                                                                                                                
<                                                                                                               
<                                                                                                  
<                                                                                                                    
<                   }
<                   if (case_fold) {
<                     {
14607,14614d11956
<                     }
<                   } else {
<                                                                               
<                   }
<                                                
<                                         
<                   if (case_fold) {
<                     {
14617,14622d11958
<                     }
<                   } else {
<                                                                       
<                   }
<                   if (case_fold) {
<                     {
14624d11959
<                     }
14645,14649d11979
<                   }
<                 }
<               }
<             } else {
<               {
14651d11980
<               }
14701a12031,12038
> }
> static char const *memchr_kwset(char const *s, size_t n, kwset_t kwset___1) {
> 
> 
> 
> 
> 
> 
14704,14708d12040
<             }
<                                      
<             {
<               while (1) {
<               while_continue___14: ;/* CIL Label */;
14710,14711d12041
<                 if (!lexleft) {
<                   {
14713d12042
<                   }
14723,14735d12051
<                 } else {
<                   {
<                                                                                 
<                                           
<                                                  
<                                   
<                   }
<                   if (nbytes___9 == 1UL) {
<                     {
<                                                              
<                                          
<                     }
<                   } else {
14737,14747d12052
<                   }
<                                        
<                                         
<                 }
<                                       
<               }
<             while_break___31: ;/* CIL Label */;
<             }
<           while_break___14:;;
<                         
<           }
14750,14751d12054
<         }
<         if (c == 58) {
14753,14757d12055
<         } else {
<                        
<         }
<                                         
<         if (!dfa___0->multibyte) {
14768,14769d12065
<         }
<         if (wc == 4294967295U) {
14771,14785d12066
<         } else {
<           if (case_fold) {
<             {
<                                                                            
<                                       
<             }
<           } else {
<                          
<           }
<                        
<                                   
<                 
<           {
<             while (1) {
<             while_continue___15: ;/* CIL Label */;
14787,14794d12067
<               if (!(i < n)) {
<                                       
<               }
<               {
<                                                              
<               }
<               if (!tmp___69) {
<                 {
14800,14819d12072
<                 }
<               }
<                   
<             }
<           while_break___32: ;/* CIL Label */;
<           }
<         while_break___15:;;
<         }
<       __Cont:;
<                  
<                
<         if (!(c != 93)) {
<                                
<         }
<       }
<     while_break___18: ;/* CIL Label */;
<     }
<   while_break___1:;;
<     if (colon_warning_state == 7) {
<       {
14822,14841d12074
<       }
<     }
<     if (!known_bracket_exp) {
<                           
<     }
<     if (dfa___0->multibyte) {
<       {
<                                   
<                                                                                                            
<       }
<       if (tmp___73) {
<                                        
<       } else {
<         {
<                                                                            
<                                                
<         }
<       }
<                           
<     }
14858d12090
<     {
14860d12091
<     }
14862d12092
<   }
14864,14901c12094,12096
< static token lex(void) {
<   int c;
<   int c2;
<   _Bool backslash;
<   charclass ccl;
<   int i;
<   wint_t _wc;
<   size_t nbytes;
<   size_t tmp;
<   unsigned char tmp___0;
<   char *tmp___1;
<   int tmp___2;
<   int tmp___3;
<   int tmp___4;
<   int tmp___5;
<   int tmp___6;
<   int tmp___7;
<   char const *p;
<   char const *lim;
<   char *tmp___8;
<   char const *tmp___9;
<   char const *tmp___10;
<   char *tmp___11;
<   size_t tmp___12;
<   unsigned short const **tmp___13;
<   size_t tmp___14;
<   char const *lexptr_saved;
<   size_t lexleft_saved;
<   unsigned short const **tmp___15;
<   size_t tmp___16;
<   size_t tmp___17;
<   unsigned short const **tmp___18;
<   void *__cil_tmp38;
<   char *__cil_tmp39;
<   char *__cil_tmp40;
<   char *__cil_tmp41;
<   char *__cil_tmp42;
<   char *__cil_tmp43;
---
> static size_t __attribute__((__pure__)) bmexec_trans(kwset_t kwset___1,
>                                                      char const *text,
>                                                      size_t size) {
14903,14908d12097
<   {
<                          
<           
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
14910d12098
<         if (!(i < 2)) {
14912,14915d12099
<         }
<         {
<           while (1) {
<           while_continue___0: ;/* CIL Label */;
14917,14973d12100
<             if (!lexleft) {
<                                   
<                                
<             } else {
<               {
<                                                                    
<                              
<                                          
<                             
<               }
<               if (nbytes == 1UL) {
<                 {
<                                                         
<                                    
<                 }
<               } else {
<                        
<               }
<                                
<                                 
<             }
<                                  
<           }
<         while_break___7: ;/* CIL Label */;
<         }
<       while_break___0:;;
<         if (c == 92) {
<                        
<         }
<         if (c == 94) {
<                        
<         }
<         if (c == 36) {
<                        
<         }
<         if (c == 49) {
<                        
<         }
<         if (c == 50) {
<                        
<         }
<         if (c == 51) {
<                        
<         }
<         if (c == 52) {
<                        
<         }
<         if (c == 53) {
<                        
<         }
<         if (c == 54) {
<                        
<         }
<         if (c == 55) {
<                        
<         }
<         if (c == 56) {
14975,14976d12101
<         }
<         if (c == 57) {
14978,14979d12102
<         }
<         if (c == 96) {
14981,14982d12103
<         }
<         if (c == 39) {
14984,14985d12104
<         }
<         if (c == 60) {
14987,15027d12105
<         }
<         if (c == 62) {
<                        
<         }
<         if (c == 98) {
<                        
<         }
<         if (c == 66) {
<                        
<         }
<         if (c == 63) {
<                        
<         }
<         if (c == 42) {
<                        
<         }
<         if (c == 43) {
<                        
<         }
<         if (c == 123) {
<                         
<         }
<         if (c == 124) {
<                         
<         }
<         if (c == 10) {
<                        
<         }
<         if (c == 40) {
<                        
<         }
<         if (c == 41) {
<                        
<         }
<         if (c == 46) {
<                        
<         }
<         if (c == 115) {
<                         
<         }
<         if (c == 83) {
15029,15033d12106
<         }
<         if (c == 119) {
<                         
<         }
<         if (c == 87) {
15035,15041d12107
<         }
<         if (c == 91) {
<                        
<         }
<                          
<       case_92:;
<         if (backslash) {
15043,15045d12108
<         }
<         if (lexleft == 0UL) {
<           {
15048,15053d12110
<           }
<         }
<                              
<                           
<       case_94:;
<         if (backslash) {
15055,15067d12111
<         }
<         if (syntax_bits & (((1UL << 1) << 1) << 1)) {
<                                
<                            
<         } else {
<           if (lasttok == -1L) {
<                                  
<                              
<           } else {
<             if (lasttok == 270L) {
<                                    
<                                
<             } else {
15072,15074d12115
<             }
<           }
<         }
15076,15077d12116
<       case_36:;
<         if (backslash) {
15079,15088d12117
<         }
<         if (syntax_bits & (((1UL << 1) << 1) << 1)) {
<                                
<                            
<         } else {
<           if (lexleft == 0UL) {
<                                  
<                              
<           } else {
<             if (syntax_bits & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
15099,15104d12127
<             } else {
<               if (lexleft > 1UL) {
<                 if ((int const) * (lexptr + 0) == 92) {
<                   if ((int const) * (lexptr + 1) == 41) {
<                                 
<                   } else {
15106,15107d12128
<                   }
<                 } else {
15109,15110d12129
<                 }
<               } else {
15112,15118d12130
<               }
<                                 
<             }
<             if (tmp___4) {
<                                    
<                                
<             } else {
15159,15161d12170
<             }
<           }
<         }
15163,15172d12171
<       case_49:;
<         if (backslash) {
<           if (!(syntax_bits & ((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
<                                  
<                                  
<                              
<           }
<         }
<                          
<       case_96:;
15180d12178
<       case_39:;
15188d12185
<       case_60:;
15196,15202d12192
<       case_62:;
<         if (backslash) {
<           if (!(syntax_bits & (((((((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
<                                  
<                              
<           }
<         }
15204,15205d12193
<       case_98:;
<         if (backslash) {
15210,15213d12197
<         }
<                          
<       case_66:;
<         if (backslash) {
15218,15221d12201
<         }
<                          
<       case_63:;
<         if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
15223,15224d12202
<         }
<         if ((int)backslash != ((syntax_bits & (1UL << 1)) != 0UL)) {
15226,15227d12203
<         }
<         if (!(syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
15231,15235d12206
<         }
<                              
<                          
<       case_42:;
<         if (backslash) {
15237,15239d12207
<         }
<         if (!(syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
<           if (laststart) {
15241,15246d12208
<           }
<         }
<                              
<                          
<       case_43:;
<         if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
15248,15249d12209
<         }
<         if ((int)backslash != ((syntax_bits & (1UL << 1)) != 0UL)) {
15251,15253d12210
<         }
<         if (!(syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
<           if (laststart) {
15255,15260d12211
<           }
<         }
<                              
<                          
<       case_123:;
<         if (!(syntax_bits & (((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
15262,15263d12212
<         }
<         if ((int)backslash != ((syntax_bits & ((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
15265,15266d12213
<         }
<         if (!(syntax_bits & ((((1UL << 1) << 1) << 1) << 1))) {
15270,15277d12216
<         }
<                    
<                           
<                     
<                         
<         {
<           while (1) {
<           while_continue___1: ;/* CIL Label */;
15279,15283d12217
<             if ((unsigned long)p != (unsigned long)lim) {
<               if (!((unsigned int)*p - 48U <= 9U)) {
<                                      
<               }
<             } else {
15285,15289d12218
<             }
<             if (minrep < 0) {
<                                                    
<             } else {
<               if (32768 < (minrep * 10 + (int)*p) - 48) {
15291,15304d12219
<               } else {
<                                                       
<               }
<             }
<                 
<           }
<         while_break___8: ;/* CIL Label */;
<         }
<       while_break___1:;;
<         if ((unsigned long)p != (unsigned long)lim) {
<           if ((int const) * p != 44) {
<                             
<           } else {
<             if (minrep < 0) {
15306,15315d12220
<             }
<             {
<               while (1) {
<               while_continue___2: ;/* CIL Label */;
<                     
<                 if ((unsigned long)p != (unsigned long)lim) {
<                   if (!((unsigned int)*p - 48U <= 9U)) {
<                                          
<                   }
<                 } else {
15317,15321d12221
<                 }
<                 if (maxrep < 0) {
<                                                        
<                 } else {
<                   if (32768 < (maxrep * 10 + (int)*p) - 48) {
15323,15336d12222
<                   } else {
<                                                           
<                   }
<                 }
<               }
<             while_break___9: ;/* CIL Label */;
<             }
<           while_break___2:;;
<           }
<         }
<         if (!backslash) {
<                       
<         } else {
<           if ((unsigned long)p != (unsigned long)lim) {
15339,15347d12224
<             if ((int const) * tmp___9 == 92) {
<             _L___3:;
<               if ((unsigned long)p != (unsigned long)lim) {
<                              
<                     
<                 if ((int const) * tmp___10 == 125) {
<                   if (0 <= minrep) {
<                     if (!(maxrep < 0)) {
<                       if (!(minrep <= maxrep)) {
15349,15351d12225
<                       }
<                     }
<                   } else {
15353,15354d12226
<                   }
<                 } else {
15356,15357d12227
<                 }
<               } else {
15359,15360d12228
<               }
<             } else {
15362,15364d12229
<             }
<           } else {
<           _L___4:;
15368d12232
<             {
15371,15375d12234
<             }
<           }
<         }
<         if (32767 < maxrep) {
<           {
15378,15386d12236
<           }
<         }
<                    
<                                     
<                              
<                              
<                          
<       case_124:;
<         if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
15388,15389d12237
<         }
<         if ((int)backslash != ((syntax_bits & (((((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
15391,15396d12238
<         }
<                              
<                              
<                          
<       case_10:;
<         if (syntax_bits & ((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
15398,15399d12239
<         } else {
<           if (backslash) {
15401,15402d12240
<           } else {
<             if (!(syntax_bits & (((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
15404,15422d12241
<             }
<           }
<         }
<                              
<                              
<                          
<       case_40:;
<         if ((int)backslash != ((syntax_bits & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
<                            
<         }
<                  
<                              
<                              
<                          
<       case_41:;
<         if ((int)backslash != ((syntax_bits & (((((((((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) == 0UL)) {
<                            
<         }
<         if (parens == 0UL) {
15426,15440d12244
<         }
<                  
<                              
<                              
<                          
<       case_46:;
<         if (backslash) {
<                            
<         }
<         if (dfa___0->multibyte) {
<                                
<                                
<                            
<         }
<         {
15443d12246
<         }
15454d12256
<         {
15458c12260,12261
<         }
---
> }
> static size_t bmexec(kwset_t kwset___1, char const *text, size_t size) {
15460,15463d12262
<       case_115:;
<         if (!backslash) {
<                            
<         } else {
15467d12265
<         }
15481a12280,12285
> }
> static size_t(__attribute__((__nonnull__(4))) cwexec)(kwset_t kwset___1, char const *text,
>                                                       size_t len, struct kwsmatch *kwsmatch) {
> 
> 
> 
15505d12308
<         {
15523,15525d12325
<         while_break___11: ;/* CIL Label */;
<         }
<       while_break___4:;
15528,15531d12327
<       case_119:;
<         if (!backslash) {
<                            
<         } else {
15535,15536d12330
<         }
<         {
15539,15540d12332
<         }
<         {
15563,15565d12354
<         while_break___12: ;/* CIL Label */;
<         }
<       while_break___5:;;
15571d12359
<         {
15575d12362
<         }
15577,15578d12363
<       case_91:;
<         if (backslash) {
15580,15591d12364
<         }
<         {
<                                
<                                         
<         }
<                          
<       normal_char:;
<                              
<         if (dfa___0->multibyte) {
<                                
<                            
<         }
15608,15613d12380
<       switch_break:;
<             
<       }
<     while_break___6: ;/* CIL Label */;
<     }
<   while_break : {;
15615d12381
<   }
15617,15622d12382
<   }
< }
< static token tok;
< static size_t depth;
< static void addtok_mb(token t, int mbprop) {
<   size_t tmp;
15624,15706d12383
<   {
<     if (dfa___0->talloc == dfa___0->tindex) {
<       {
<                                                                                         
<                                                                           
<       }
<       if (dfa___0->multibyte) {
<         {
<                                                                                      
<                                                                                                           
<         }
<       }
<     }
<     if (dfa___0->multibyte) {
<                                                             
<     }
<                           
<                         
<                                  
<     if (t == 264L) {
<                     
<     }
<     if (t == 265L) {
<                     
<     }
<     if (t == 266L) {
<                     
<     }
<     if (t == 268L) {
<                     
<     }
<     if (t == 269L) {
<                     
<     }
<     if (t == 257L) {
<                     
<     }
<     if (t == 256L) {
<                     
<     }
<                         
<   case_264:;
<                       
<   case_268:;
<             
<                       
<   case_257:;
<                              
<   switch_default:;
<                          
<   case_256:;
<             
<                       
<   switch_break:;;
<     if (depth > dfa___0->depth) {
<                              
<     }
<            
<   }
< }
< static void addtok_wc(wint_t wc);
< static void addtok(token t) {
<   _Bool need_or;
<   struct mb_char_classes *work_mbc;
<   size_t i;
< 
<   {
<     if (dfa___0->multibyte) {
<       if (t == 273L) {
<                            
<                                                                 
<         if (!work_mbc->invert) {
<                         
<           {
<             while (1) {
<             while_continue: ;/* CIL Label */;
< 
<               if (!(i < work_mbc->nchars)) {
<                                  
<               }
<               {
< 
<               }
15714,16087d12390
<             }
<           while_break___0: ;/* CIL Label */;
<           }
<         while_break:;
<                                        
<         }
<         if (work_mbc->invert) {
< 
<         } else {
<           if (work_mbc->nch_classes != 0UL) {
<                     
<           } else {
<             if (work_mbc->nranges != 0UL) {
<                       
<             } else {
<               if (work_mbc->nequivs != 0UL) {
< 
<               } else {
<                 if (work_mbc->ncoll_elems != 0UL) {
<                 _L : {;
<                                                                                        
<                 }
<                   if (need_or) {
<                     {
< 
<                     }
<                   }
<                 } else {
<                   if (work_mbc->cset != -1L) {
<                     {
<                                                     
<                     }
<                     if (need_or) {
<                       {
< 
<                       }
<                     }
<                   }
<                 }
<               }
<             }
<           }
<         }
<       } else {
<         {
<                           
<         }
<       }
<     } else {
<       {
< 
<       }
<     }
<            
<   }
< }
< static void addtok_wc(wint_t wc) {
<   unsigned char buf[16];
<   mbstate_t s;
<   int i;
<   size_t stored_bytes;
<   size_t tmp;
<   int tmp___0;
<   int tmp___1;
<   void *__cil_tmp11;
<   void *__cil_tmp12;
< 
<   {
<     {
<                     
<                            
<                                                                                                                  
<                          
<     }
<     if (stored_bytes != 0xffffffffffffffffUL) {
<                                      
<     } else {
< 
< 
<     }
<     if (cur_mb_len == 1) {
<                   
<     } else {
<                   
<     }
<     {
<                                         
<             
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i < cur_mb_len)) {
<                            
<         }
<         if (i == cur_mb_len - 1) {
<                       
<         } else {
<                       
<         }
<         {
<                                             
<                              
<               
<         }
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<            
<   }
< }
< static void add_utf8_anychar(void);
< static charclass const utf8_classes[5] = {{(charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0,
<                                            ((1U << 31) << 1) - 1U, ((1U << 31) << 1) - 1U, (charclass_word)0, (charclass_word)0},
<                                           {((1U << 31) << 1) - 1U, ((1U << 31) << 1) - 1U, ((1U << 31) << 1) - 1U, ((1U << 31) << 1) - 1U,
<                                            (charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0},
<                                           {(charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0,
<                                            (charclass_word)0, (charclass_word)0, 4294967292U & (((1U << 31) << 1) - 1U), (charclass_word)0},
<                                           {(charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0,
<                                            (charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)65535},
<                                           {(charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0,
<                                            (charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)16711680}};
< static void add_utf8_anychar(void) {
<   unsigned int n;
<   unsigned int i;
<   charclass c;
<   size_t tmp;
<   void *__cil_tmp6;
< 
<   {
<                                                                        
<     if (dfa___0->utf8_anychar_classes[0] == 0L) {
<              
<       {
<         while (1) {
<         while_continue: ;/* CIL Label */;
< 
<           if (!(i < n)) {
<                              
<           }
<           {
<                                         
<           }
<           if (i == 1U) {
<             if (!(syntax_bits & ((((((1UL << 1) << 1) << 1) << 1) << 1) << 1))) {
<               {
<                                                      
<               }
<             }
<             if (syntax_bits & (((((((1UL << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
<               {
< 
<               }
<             }
<           }
<           {
<                                                                       
<                                                                     
<                 
<           }
<         }
<       while_break___2: ;/* CIL Label */;
<       }
<     while_break:;;
<     }
<            
<     {
<       while (1) {
<       while_continue___0: ;/* CIL Label */;
< 
<         if (!(i < n)) {
<                                
<         }
<         {
<                                                    
<               
<         }
<       }
<     while_break___3: ;/* CIL Label */;
<     }
<   while_break___0:;;
<     {
<       while (1) {
<       while_continue___1: ;/* CIL Label */;
<             
<         if (!(i > 1U)) {
<                                
<         }
<         {
<                                                    
<                              
<                              
<         }
<       }
<     while_break___4: ;/* CIL Label */;
<     }
<   while_break___1:;;
<            
<   }
< }
< static void atom(void) {
<   wchar_t folded[21];
<   int i;
<   int n;
<   int tmp;
<   char *tmp___0;
<   int tmp___1;
<   void *__cil_tmp9;
<   char *__cil_tmp10;
< 
<   {
<     if (tok == 274L) {
<       if (wctok == 4294967295U) {
<         {
< 
<         }
<       } else {
<         {
<                            
<         }
<         if (case_fold) {
<           {
<                                                                    
<                     
<                   
<           }
<           {
<             while (1) {
<             while_continue: ;/* CIL Label */;
< 
<               if (!(i < n)) {
<                                  
<               }
<               {
<                                              
<                                    
<                     
<               }
<             }
<           while_break___0: ;/* CIL Label */;
<           }
<         while_break:;;
<         }
<       }
<       {
<                     
<       }
<     } else {
<       if (tok == 272L) {
<         {
<                                  
<         }
<         if (tmp___1) {
<           {
<                                
<                         
<           }
<         } else {
< 
<         }
<       } else {
<       _L___0:;
<         if (tok >= 0L) {
<           if (tok < 256L) {
<             {
< 
< 
<             }
<           } else {
<                     
<           }
<         } else {
<         _L:;
<           if (tok >= 275L) {
<             {
< 
< 
<             }
<           } else {
<             if (tok == 257L) {
<               {
<                             
<                             
<               }
<             } else {
<               if (tok == 258L) {
<                 {
<                               
<                               
<                 }
<               } else {
<                 if (tok == 259L) {
<                   {
<                                 
<                                 
<                   }
<                 } else {
<                   if (tok == 260L) {
<                     {
< 
< 
<                     }
<                   } else {
<                     if (tok == 272L) {
<                       {
< 
< 
<                       }
<                     } else {
<                       if (tok == 273L) {
<                         {
<                                       
<                                       
<                         }
<                       } else {
<                         if (tok == 261L) {
<                           {
<                                         
<                                         
<                           }
<                         } else {
<                           if (tok == 262L) {
<                             {
< 
< 
<                             }
<                           } else {
<                             if (tok == 263L) {
<                               {
< 
< 
<                               }
<                             } else {
<                               if (tok == 270L) {
<                                 {
<                                               
<                                            
<                                 }
<                                 if (tok != 271L) {
<                                   {
< 
< 
<                                   }
<                                 }
<                                 {
<                                               
<                                 }
<                               } else {
<                                 {
<                                                      
<                                 }
<                               }
<                             }
<                           }
<                         }
<                       }
<                     }
<                   }
<                 }
<               }
<             }
<           }
<         }
<       }
<     }
<            
<   }
< }
< static size_t __attribute__((__pure__)) nsubtoks(size_t tindex) {
<   size_t ntoks1;
<   size_t __attribute__((__pure__)) tmp;
<   size_t __attribute__((__pure__)) tmp___0;
16089,16090d12391
<   {
<     if (*(dfa___0->tokens + (tindex - 1UL)) == 264L) {
16092,16093d12392
<     }
<     if (*(dfa___0->tokens + (tindex - 1UL)) == 265L) {
16095,16096d12393
<     }
<     if (*(dfa___0->tokens + (tindex - 1UL)) == 266L) {
16098,16099d12394
<     }
<     if (*(dfa___0->tokens + (tindex - 1UL)) == 268L) {
16101,16102d12395
<     }
<     if (*(dfa___0->tokens + (tindex - 1UL)) == 269L) {
16104,16108d12396
<     }
<                         
<   switch_default:;
<                                                  
<   case_264 : {;
16110d12397
<   }
16112d12398
<   case_268 : {;
16115d12400
<   }
16118,16122d12402
<                                                         
<   }
< }
< static void copytoks(size_t tindex, size_t ntokens) {
<   size_t i;
16124,16129d12403
<   {
<     if (dfa___0->multibyte) {
<                     
<       {
<         while (1) {
<         while_continue: ;/* CIL Label */;
16131,16142d12404
<           if (!(i < ntokens)) {
<                              
<           }
<           {
<                                                                                                     
<                 
<           }
<         }
<       while_break___1: ;/* CIL Label */;
<       }
<     while_break:;;
<     } else {
16144d12405
<       {
16156,16268d12416
<       while_break___2: ;/* CIL Label */;
<       }
<     while_break___0:;;
<     }
<            
<   }
< }
< static void closure(void) {
<   int i;
<   size_t tindex;
<   size_t ntokens;
<   size_t __attribute__((__pure__)) tmp;
< 
<   {
<     {
<              
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(tok == 264L)) {
<           if (!(tok == 265L)) {
<             if (!(tok == 266L)) {
<               if (!(tok == 267L)) {
<                                  
<               }
<             }
<           }
<         }
<         if (tok == 267L) {
<           if (minrep) {
<                         
<           } else {
<             if (maxrep) {
<             _L___0 : {;
<                                                           
<                                                  
<             }
<               if (maxrep < 0) {
<                 {
< 
<                 }
<               }
<               if (minrep == 0) {
<                 {
< 
<                 }
<               }
<                     
<               {
<                 while (1) {
<                 while_continue___0: ;/* CIL Label */;
< 
<                   if (!(i < minrep)) {
<                                          
<                   }
<                   {
<                                               
<                                        
<                         
<                   }
<                 }
<               while_break___3: ;/* CIL Label */;
<               }
<             while_break___0:;;
<               {
<                 while (1) {
<                 while_continue___1: ;/* CIL Label */;
< 
<                   if (!(i < maxrep)) {
<                                          
<                   }
<                   {
<                                               
<                                        
<                                        
<                         
<                   }
<                 }
<               while_break___4: ;/* CIL Label */;
<               }
<             while_break___1 : {;
<                           
<             }
<             } else {
< 
<             }
<           }
<         } else {
<         _L:;
<           if (tok == 267L) {
<             {
< 
< 
< 
< 
<             }
<           } else {
<             {
<                           
<                           
<             }
<           }
<         }
<       }
<     while_break___2: ;/* CIL Label */;
<     }
<   while_break:;;
<            
<   }
< }
< static void branch(void) {
16270,16300d12417
<   {
<     {
<                 
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (tok != 271L) {
<           if (tok != 269L) {
<             if (!(tok >= 0L)) {
<                                
<             }
<           } else {
<                              
<           }
<         } else {
<                            
<         }
<         {
<                     
<                              
<         }
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<            
<   }
< }
< static void regexp(void) {
16302,16374d12418
<   {
<     {
<                
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(tok == 269L)) {
<                            
<         }
<         {
<                       
<                    
<                              
<         }
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<            
<   }
< }
< void dfaparse(char const *s, size_t len, struct dfa *d) {
<   char *tmp;
<   char *tmp___0;
<   char *__cil_tmp8;
<   char *__cil_tmp9;
< 
<   {
<                 
<                
<                   
<                         
<                          
<                        
<     if (dfa___0->multibyte) {
<       {
<                        
<                                                      
<       }
<     }
<     if (!syntax_bits_set) {
<       {
< 
< 
<       }
<     }
<     {
<                   
<                        
<                
<     }
<     if (tok != -1L) {
<       {
< 
< 
<       }
<     }
<     {
<                                                           
<                          
<     }
<     if (d->nregexps) {
<       {
< 
<       }
<     }
<                     
<            
<   }
< }
< static void copy(position_set const *src, position_set *dst) {
16376,16392d12419
<   {
<     if (dst->alloc < (size_t)src->nelem) {
<       {
<                                  
<                                         
<                                                                                            
<       }
<     }
<     {
<                                                                                                                         
<                                                                          
<                                       
<     }
<            
<   }
< }
< static void alloc_position_set(position_set *s, size_t size) {
16394,16560d12420
<   {
<     {
<                                                                  
<                       
<                            
<     }
<            
<   }
< }
< static void insert(position p, position_set *s) {
<   size_t count;
<   size_t lo;
<   size_t hi;
<   size_t i;
<   size_t mid;
< 
<   {
<                      
<                    
<                
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(lo < hi)) {
<                            
<         }
<                              
<         if ((s->elems + mid)->index > p.index) {
<                          
<         } else {
<                    
<         }
<       }
<     while_break___1: ;/* CIL Label */;
<     }
<   while_break:;;
<     if (lo < count) {
<       if (p.index == (s->elems + lo)->index) {
<                                                     
<                
<       }
<     }
<     {
<                                                                                                     
<                 
<     }
<     {
<       while (1) {
<       while_continue___0: ;/* CIL Label */;
< 
<         if (!(i > lo)) {
<                                
<         }
<                                                   
<             
<       }
<     while_break___2: ;/* CIL Label */;
<     }
<   while_break___0:;
<                          
<                  
<            
<   }
< }
< static void merge(position_set const *s1, position_set const *s2, position_set *m) {
<   size_t i;
<   size_t j;
<   size_t tmp;
<   size_t tmp___0;
<   size_t tmp___1;
<   size_t tmp___2;
<   size_t tmp___3;
<   size_t tmp___4;
<   size_t tmp___5;
<   size_t tmp___6;
<   size_t tmp___7;
<   size_t tmp___8;
<   size_t tmp___9;
< 
<   {
<                   
<                   
<     if (m->alloc < (size_t)(s1->nelem + s2->nelem)) {
<       {
<                                
<                                                                                         
<                                                                              
<       }
<     }
<                          
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (i < (size_t)s1->nelem) {
<           if (!(j < (size_t)s2->nelem)) {
<                              
<           }
<         } else {
<                            
<         }
<         if ((s1->elems + i)->index > (s2->elems + j)->index) {
<                          
<                        
<                       
<               
<                                                      
<         } else {
<           if ((s1->elems + i)->index < (s2->elems + j)->index) {
<                                
<                          
<                         
<                 
<                                                            
<           } else {
<                         
<                 
<                                                             
<                                
<                          
<                         
<                 
<                                                                                   
<           }
<         }
<       }
<     while_break___2: ;/* CIL Label */;
<     }
<   while_break:;;
<     {
<       while (1) {
<       while_continue___0: ;/* CIL Label */;
< 
<         if (!(i < (size_t)s1->nelem)) {
<                                
<         }
<                            
<                      
<                     
<             
<                                                        
<       }
<     while_break___3: ;/* CIL Label */;
<     }
<   while_break___0:;;
<     {
<       while (1) {
<       while_continue___1: ;/* CIL Label */;
< 
<         if (!(j < (size_t)s2->nelem)) {
<                                
<         }
<                            
<                      
<                     
<             
<                                                        
<       }
<     while_break___4: ;/* CIL Label */;
<     }
<   while_break___1:;;
<            
<   }
< }
< static void delete (position p, position_set *s) {
<   size_t i;
16562,16755d12421
<   {
<                   
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i < s->nelem)) {
< 
<         }
<         if (p.index == (s->elems + i)->index) {
<                            
<         }
<             
<       }
<     while_break___1: ;/* CIL Label */;
<     }
<   while_break:;;
<     if (i < s->nelem) {
<                    
<       {
<         while (1) {
<         while_continue___0: ;/* CIL Label */;
< 
<           if (!(i < s->nelem)) {
<                                  
<           }
<                                                     
<               
<         }
<       while_break___2: ;/* CIL Label */;
<       }
<     while_break___0:;;
<     }
<            
<   }
< }
< static state_num state_index(struct dfa *d, position_set const *s, int context) {
<   size_t hash;
<   int constraint;
<   state_num i;
<   state_num j;
< 
<   {
<                      
<                      
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!((size_t const)i < s->nelem)) {
<                            
<         }
<                                                                            
<             
<       }
<     while_break___3: ;/* CIL Label */;
<     }
<   while_break:;
<                      
<     {
<       while (1) {
<       while_continue___0: ;/* CIL Label */;
< 
<         if (!(i < d->sindex)) {
<                                
<         }
<         if (hash != (d->states + i)->hash) {
<                       
<         } else {
<           if (s->nelem != (size_t const)(d->states + i)->elems.nelem) {
<                         
<           } else {
<             if (context != (int)(d->states + i)->context) {
<                           
<             }
<           }
<         }
<                          
<         {
<           while (1) {
<           while_continue___1: ;/* CIL Label */;
< 
<             if (!((size_t const)j < s->nelem)) {
<                                    
<             }
<             if ((s->elems + j)->constraint != ((d->states + i)->elems.elems + j)->constraint) {
< 
<             } else {
<               if ((s->elems + j)->index != ((d->states + i)->elems.elems + j)->index) {
<                                      
<               }
<             }
<                 
<           }
<         while_break___5: ;/* CIL Label */;
<         }
<       while_break___1:;;
<         if ((size_t const)j == s->nelem) {
<                      
<         }
<       __Cont:;
<             
<       }
<     while_break___4: ;/* CIL Label */;
<     }
<   while_break___0 : {;
<                                                                                             
<                                                                  
<                                  
<                                                                   
<                                      
<                                                       
<                                             
<                                            
<                                                     
<                                           
<                                             
<                                                           
<                      
<   }
<     {
<       while (1) {
<       while_continue___2: ;/* CIL Label */;
< 
<         if (!((size_t const)j < s->nelem)) {
<                                
<         }
<         if (*(d->tokens + (s->elems + j)->index) < 0L) {
<                                                        
<           if ((((constraint & 15) | ((constraint >> 4) & 15)) | ((constraint >> 8) & 15)) & context) {
<                                                                                                           
<           }
<           if (!(d->states + i)->first_end) {
<                                                                               
<           }
<         } else {
<           if (*(d->tokens + (s->elems + j)->index) == 257L) {
<                                                                
<                                                     
<           }
<         }
<             
<       }
<     while_break___6: ;/* CIL Label */;
<     }
<   while_break___2:;
<                   
<                
<   }
< }
< static void epsclosure(position_set *s, struct dfa const *d, char *visited) {
<   size_t i;
<   size_t j;
<   position p;
<   position old;
<   _Bool initialized;
< 
<   {
<                            
<                   
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i < s->nelem)) {
<                            
<         }
<         if (*(d->tokens + (s->elems + i)->index) >= 256L) {
<           if (*(d->tokens + (s->elems + i)->index) != 257L) {
<             if (*(d->tokens + (s->elems + i)->index) != 272L) {
<               if (*(d->tokens + (s->elems + i)->index) != 273L) {
<                 if (*(d->tokens + (s->elems + i)->index) < 275L) {
<                   if (!initialized) {
<                     {
<                                                                                                        
<                                              
<                     }
<                   }
<                   {
<                                           
<                                                   
<                                                 
<                   }
<                   if (*(visited + old.index)) {
< 
< 
<                   }
<                                                    
<                   if (*(d->tokens + old.index) == 258L) {
<                                   
<                   }
<                   if (*(d->tokens + old.index) == 259L) {
<                                   
<                   }
16769,16859d12434
<                 case_258:;
<                                         
<                                     
<                 case_259:;
<                                         
<                                     
<                 case_260:;
< 
< 
<                 case_261:;
< 
< 
<                 case_262:;
< 
< 
<                 case_263:;
< 
< 
<                 switch_default:;
< 
<                 switch_break:;
<                                 
<                   {
<                     while (1) {
<                     while_continue___0: ;/* CIL Label */;
< 
<                       if (!(j < (d->follows + old.index)->nelem)) {
<                                              
<                       }
<                       {
<                                                                                
<                                      
<                             
<                       }
<                     }
<                   while_break___2: ;/* CIL Label */;
<                   }
<                 while_break___0:;
<                                  
<                 }
<               }
<             }
<           }
<         }
<       __Cont:;
<             
<       }
<     while_break___1: ;/* CIL Label */;
<     }
<   while_break:;;
<            
<   }
< }
< static int charclass_context(charclass_word *c) {
<   int context;
<   unsigned int j;
<   _Bool tmp;
< 
<   {
<     {
<                   
<                                                                                  
<     }
<     if (tmp) {
<                    
<     }
<            
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(j < 8U)) {
<                            
<         }
<         if (*(c + j) & letters[j]) {
<                        
<         }
<         if (*(c + j) & ~(letters[j] | newline[j])) {
<                        
<         }
<             
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<                      
<   }
< }
< static int __attribute__((__pure__)) state_separate_contexts(position_set const *s) {
<   int separate_contexts;
<   size_t j;
16861,17247d12435
<   {
<                           
<                   
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(j < (size_t)s->nelem)) {
<                            
<         }
<         if ((((s->elems + j)->constraint >> 2) & 273U) != ((s->elems + j)->constraint & 273U)) {
<                                  
<         }
<         if ((((s->elems + j)->constraint >> 1) & 273U) != ((s->elems + j)->constraint & 273U)) {
< 
<         }
<             
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<                                                               
<   }
< }
< void dfaanalyze(struct dfa *d, int searchflag) {
<   position *posalloc;
<   position *tmp;
<   position *firstpos;
<   position *lastpos;
<   struct __anonstruct_stkalloc_43 *stkalloc;
<   struct __anonstruct_stkalloc_43 *tmp___0;
<   struct __anonstruct_stkalloc_43 *stk;
<   position_set tmp___1;
<   position_set merged;
<   int separate_contexts;
<   size_t i;
<   size_t j;
<   position *pos;
<   char *visited;
<   char *tmp___2;
<   size_t tmp___3;
<   size_t tmp___4;
<   size_t tmp___5;
<   size_t tmp___6;
<   unsigned int tmp___7;
<   int tmp___8;
< 
<   {
<     {
<                                                                       
<                      
<                                        
<                                       
<                                                                                          
<                          
<                      
<                                                               
<                         
<                                                
<                                               
<                                                                              
<                     
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i < d->tindex)) {
<                            
<         }
<         if (*(d->tokens + i) == 256L) {
<                         
<         }
<         if (*(d->tokens + i) == 265L) {
<                         
<         }
<         if (*(d->tokens + i) == 266L) {
<                         
<         }
<         if (*(d->tokens + i) == 264L) {
<                         
<         }
<         if (*(d->tokens + i) == 268L) {
<                         
<         }
<         if (*(d->tokens + i) == 269L) {
<                         
<         }
<                             
<       case_256:;
<                                  
<                             
<                                 
<                                  
<               
<                           
<       case_265:;
<                                               
<                                  
<                       
<                       
<         {
<           while (1) {
<           while_continue___0: ;/* CIL Label */;
< 
<             if (!(j < (stk + -1)->nlastpos)) {
<                                    
<             }
<             {
<                                                                                                             
<                              
<                                                                                    
<                   
<             }
<           }
<         while_break___6: ;/* CIL Label */;
<         }
<       while_break___0:;;
<       case_264:;
<         if (*(d->tokens + i) != 266L) {
<                                           
<         }
<                           
<       case_268:;
<                                               
<                                  
<                                              
<                       
<         {
<           while (1) {
<           while_continue___1: ;/* CIL Label */;
< 
<             if (!(j < (stk + -2)->nlastpos)) {
<                                    
<             }
<             {
<                                                                                                             
<                              
<                                                                                    
<                   
<             }
<           }
<         while_break___7: ;/* CIL Label */;
<         }
<       while_break___1:;;
<         if ((stk + -2)->nullable) {
<                                                          
<         } else {
<                                             
<         }
<         if ((stk + -1)->nullable) {
<                                                        
<         } else {
<                                                
<                                    
<           {
<             while (1) {
<             while_continue___2: ;/* CIL Label */;
<                           
<                   
<               if (!(tmp___4 > 0UL)) {
<                                      
<               }
<                                           
<             }
<           while_break___8: ;/* CIL Label */;
<           }
<         while_break___2:;
<                                           
<                                                       
<         }
<                                                                                               
<               
<                           
<       case_269:;
<                                                        
<                                                      
<                                                                                               
<               
<                           
<       switch_default : {;
<                                                           
<                             
<                                 
<                                  
<               
<                    
<                   
<                     
<                                  
<                                   
<                         
<                                       
<                                        
<                                                       
<       }
<                           
<       switch_break:;
<             
<       }
<     while_break___5: ;/* CIL Label */;
<     }
<   while_break:;
<                   
<     {
<       while (1) {
<       while_continue___3: ;/* CIL Label */;
< 
<         if (!(i < d->tindex)) {
<                                
<         }
<         if (*(d->tokens + i) < 256L) {
<           {
<                                                                   
<                                                                 
<                                                                   
<           }
<         } else {
<           if (*(d->tokens + i) == 257L) {
<             {
<                                                                     
<                                                                   
<                                                                     
<             }
<           } else {
<             if (*(d->tokens + i) == 272L) {
<               {
< 
< 
< 
<               }
<             } else {
<               if (*(d->tokens + i) == 273L) {
<                 {
<                                                                         
<                                                                       
<                                                                         
<                 }
<               } else {
<                 if (*(d->tokens + i) >= 275L) {
<                   {
<                                                                           
<                                                                         
<                                                                           
<                   }
<                 }
<               }
<             }
<           }
<         }
<             
<       }
<     while_break___9: ;/* CIL Label */;
<     }
<   while_break___3:;
<                              
<                   
<     {
<       while (1) {
<       while_continue___4: ;/* CIL Label */;
< 
<         if (!(i < (stk + -1)->nfirstpos)) {
<                                
<         }
<         {
<                                            
<               
<         }
<       }
<     while_break___10: ;/* CIL Label */;
<     }
<   while_break___4 : {;
<                                                         
<                                                                                       
<   }
<     if (separate_contexts & 4) {
<                   
<     } else {
<                                       
<     }
<     {
<                                                                
<                              
<                              
<                                  
<                             
<     }
<            
<   }
< }
< void dfastate(ptrdiff_t s, struct dfa *d, ptrdiff_t *trans___0) {
<   leaf_set grps[256];
<   charclass labels[256];
<   size_t ngrps;
<   position pos;
<   charclass matches;
<   charclass_word matchesf;
<   charclass intersect;
<   charclass_word intersectf;
<   charclass leftovers;
<   charclass_word leftoversf;
<   position_set follows;
<   position_set tmp;
<   int possible_contexts;
<   int separate_contexts;
<   state_num state;
<   state_num state_newline;
<   state_num state_letter;
<   _Bool next_isnt_1st_byte;
<   size_t i;
<   size_t j;
<   size_t k;
<   _Bool tmp___0;
<   charclass_word tmp___1;
<   charclass_word match;
<   charclass_word label___0;
<   charclass_word tmp___2;
<   charclass_word tmp___3;
<   size_t tmp___4;
<   unsigned short const **tmp___6;
<   int c;
<   unsigned short const **tmp___7;
<   void *__cil_tmp47;
<   int __cil_tmp48;
<   void *__cil_tmp49;
<   int __cil_tmp50;
<   void *__cil_tmp51;
<   void *__cil_tmp52;
<   void *__cil_tmp53;
<   void *__cil_tmp54;
< 
<   {
<     {
<                         
<                                     
<                        
<                     
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i < (d->states + s)->elems.nelem)) {
<                            
<         }
<                                                   
<         if (*(d->tokens + pos.index) >= 0L) {
<           if (*(d->tokens + pos.index) < 256L) {
<             {
<                                                                       
<             }
<           } else {
<                         
<           }
<         } else {
<         _L___0:;
<           if (*(d->tokens + pos.index) >= 275L) {
<             {
<                                                                                                              
<                                
<             }
<           } else {
<             if (*(d->tokens + pos.index) == 273L) {
<                       
<             } else {
<               if (*(d->tokens + pos.index) == 272L) {
<               _L:;
<                 if (*(d->tokens + pos.index) == 273L) {
<                                                          
<                 }
<                 if ((d->states + s)->mbps.nelem == 0UL) {
<                   {
<                                                                           
<                   }
<                 }
<                 {
<                                                       
<                 }
<               }
<             }
<                         
<           }
<         }
<         if (pos.constraint != 1911U) {
<           if (!(((pos.constraint >> 8) & 15U) & (unsigned int)(d->states + s)->context)) {
< 
<             {
17257,17263d12444
<             while_break___17: ;/* CIL Label */;
<             }
<           while_break___0:;;
<           }
<           if (!(((pos.constraint >> 4) & 15U) & (unsigned int)(d->states + s)->context)) {
< 
<             {
17273,17279d12453
<             while_break___18: ;/* CIL Label */;
<             }
<           while_break___1:;;
<           }
<           if (!((pos.constraint & 15U) & (unsigned int)(d->states + s)->context)) {
< 
<             {
17289,17467d12462
<             while_break___19: ;/* CIL Label */;
<             }
<           while_break___2:;;
<           }
<                         
<           {
<             while (1) {
<             while_continue___3: ;/* CIL Label */;
< 
<               if (j < 8UL) {
<                 if (!(!matches[j])) {
<                                        
<                 }
<               } else {
< 
<               }
<                               
<             __Cont___0:;
<                   
<             }
<           while_break___20: ;/* CIL Label */;
<           }
<         while_break___3:;;
<           if (j == 8UL) {
< 
<           }
<         }
<                       
<         {
<           while (1) {
<           while_continue___4: ;/* CIL Label */;
< 
<             if (!(j < ngrps)) {
<                                    
<             }
<             if (*(d->tokens + pos.index) >= 0L) {
<               if (*(d->tokens + pos.index) < 256L) {
<                 {
<                                                                                                                        
<                 }
<                 if (!tmp___0) {
<                                   
<                 }
<               }
<             }
<                                            
<                           
<             {
<               while (1) {
<               while_continue___5: ;/* CIL Label */;
< 
<                 if (!(k < 8UL)) {
<                                        
<                 }
<                                                     
<                                        
<                                       
<                     
<               }
<             while_break___22: ;/* CIL Label */;
<             }
<           while_break___5:;;
<             if (!intersectf) {
<                               
<             }
<                                          
<                                   
<                           
<             {
<               while (1) {
<               while_continue___6: ;/* CIL Label */;
< 
<                 if (!(k < 8UL)) {
<                                        
<                 }
<                                    
<                                          
<                                              
<                                        
<                                       
<                                              
<                                      
<                                     
<                     
<               }
<             while_break___23: ;/* CIL Label */;
<             }
<           while_break___6:;;
<             if (leftoversf) {
<               {
<                                                                                    
<                                                                                
<                                                                                                  
<                                                                                                                                             
<                                                                      
<                                                   
<                         
<               }
<             }
<                                     
<                               
<                                                    
<             if (!matchesf) {
<                                    
<             }
<           __Cont___1:;
<                 
<           }
<         while_break___21: ;/* CIL Label */;
<         }
<       while_break___4:;;
<         if (j == ngrps) {
<           {
<                                                                              
<                              
<                                                                                              
<                                           
<                                                  
<                     
<           }
<         }
<       __Cont:;
<             
<       }
<     while_break___16: ;/* CIL Label */;
<     }
<   while_break : {;
<                                              
<                                          
<   }
<     if (d->searchflag) {
<       {
<                                                                         
<                                                                                            
<                                                                                         
<       }
<       if (separate_contexts & 4) {
<         {
<                                                                               
<         }
<       } else {
<                               
<       }
<       if (separate_contexts & 2) {
<         {
< 
<         }
<       } else {
<                              
<       }
<                     
<       {
<         while (1) {
<         while_continue___7: ;/* CIL Label */;
< 
<           if (!(i < 256UL)) {
<                                  
<           }
<           {
<                                       
<           }
<           if ((int const) * (*tmp___6 + (int)i) & 8) {
<                                             
<           } else {
<             if (i == 95UL) {
<                                               
<             } else {
<                                        
<             }
<           }
<               
<         }
<       while_break___24: ;/* CIL Label */;
<       }
<     while_break___7:;
<                                                       
<     } else {
< 
<       {
17477,17704d12471
<       while_break___25: ;/* CIL Label */;
<       }
<     while_break___8:;;
<     }
<                   
<     {
<       while (1) {
<       while_continue___9: ;/* CIL Label */;
< 
<         if (!(i < ngrps)) {
<                                
<         }
<                                   
<                       
<         {
<           while (1) {
<           while_continue___10: ;/* CIL Label */;
< 
<             if (!(j < grps[i].nelem)) {
<                                     
<             }
<                           
<             {
<               while (1) {
<               while_continue___11: ;/* CIL Label */;
< 
<                 if (!(k < (d->follows + *(grps[i].elems + j))->nelem)) {
<                                         
<                 }
<                 {
<                                                                                       
<                       
<                 }
<               }
<             while_break___28: ;/* CIL Label */;
<             }
<           while_break___11:;
<                 
<           }
<         while_break___27: ;/* CIL Label */;
<         }
<       while_break___10:;;
<         if (d->multibyte) {
<                                         
<                         
<           {
<             while (1) {
<             while_continue___12: ;/* CIL Label */;
< 
<               if (!(j < follows.nelem)) {
<                                       
<               }
<               if (!(*(d->multibyte_prop + (follows.elems + j)->index) & 1)) {
< 
< 
<               }
<                   
<             }
<           while_break___29: ;/* CIL Label */;
<           }
<         while_break___12:;;
<         }
<         if (d->searchflag) {
<           if (!d->multibyte) {
<             {
<                                                                                                       
<                           
<                                                            
<             }
<           } else {
<             if (!next_isnt_1st_byte) {
<               {
<                                                                                                         
<                             
<                                                              
<               }
<             }
<           }
<         }
<         {
<                                                            
<                                                                                              
<         }
<         if ((separate_contexts & possible_contexts) != possible_contexts) {
<           {
<                                                                                             
<           }
<         } else {
< 
<         }
<         if ((separate_contexts & possible_contexts) & 4) {
<           {
< 
<           }
<         } else {
<                                 
<         }
<         if ((separate_contexts & possible_contexts) & 2) {
<           {
< 
<           }
<         } else {
<                                
<         }
<                       
<         {
<           while (1) {
<           while_continue___13: ;/* CIL Label */;
< 
<             if (!(j < 8UL)) {
<                                     
<             }
<                           
<             {
<               while (1) {
<               while_continue___14: ;/* CIL Label */;
< 
<                 if (!(k < 32UL)) {
<                                         
<                 }
<                 if ((labels[i][j] >> k) & 1U) {
<                                           
<                   if (c == (int)eolbyte___0) {
<                                                      
<                   } else {
<                     {
<                                                 
<                     }
<                     if ((int const) * (*tmp___7 + c) & 8) {
<                                                       
<                     } else {
<                       if (c == 95) {
<                                                         
<                       } else {
<                         if (c < 256) {
<                                                    
<                         }
<                       }
<                     }
<                   }
<                 }
<                     
<               }
<             while_break___31: ;/* CIL Label */;
<             }
<           while_break___14:;
<                 
<           }
<         while_break___30: ;/* CIL Label */;
<         }
<       while_break___13:;
<             
<       }
<     while_break___26: ;/* CIL Label */;
<     }
<   while_break___9:;
<                   
<     {
<       while (1) {
<       while_continue___15: ;/* CIL Label */;
< 
<         if (!(i < ngrps)) {
<                                 
<         }
<         {
<                                       
<               
<         }
<       }
<     while_break___32: ;/* CIL Label */;
<     }
<   while_break___15 : {;
<                                 
<                             
<   }
<            
<   }
< }
< static void realloc_trans_if_necessary(struct dfa *d, state_num new_state) {
<   state_num oldalloc;
<   state_num **realtrans;
<   state_num **tmp;
<   size_t newalloc;
<   size_t newalloc1;
< 
<   {
<                           
<     if (oldalloc <= new_state) {
<       if (d->trans) {
<                            
<       } else {
<                                         
<       }
<       {
<                         
<                                              
<                                                                                                 
<                                                     
<                                  
<                                    
<                                          
<                                                                                             
<                                                                                            
<                                                                                                     
<       }
<       {
<         while (1) {
<         while_continue: ;/* CIL Label */;
< 
<           if (!((size_t)oldalloc < newalloc)) {
<                              
<           }
<                                                             
<                                                             
<                      
<         }
<       while_break___0: ;/* CIL Label */;
<       }
<     while_break:;;
<     }
<            
<   }
< }
< static void build_state(state_num s, struct dfa *d) {
<   state_num *trans___0;
<   state_num i;
<   state_num maxstate;
<   state_num *tmp;
17706,17707d12472
<   {
<     if (d->trcount >= 1024) {
17709d12473
<       {
17725,17727d12488
<       while_break___1: ;/* CIL Label */;
<       }
<     while_break:;
17729,17749d12489
<     }
<                    
<                           
<     if ((((int)(d->states + s)->constraint >> 8) & 15) & (int)(d->states + s)->context) {
<                              
<     }
<     if ((((int)(d->states + s)->constraint >> 4) & 15) & (int)(d->states + s)->context) {
<                              
<     }
<     if (((int)(d->states + s)->constraint & 15) & (int)(d->states + s)->context) {
<                              
<     }
<     {
<                                                                    
<                                 
<                                
<                        
<     }
<     {
<       while (1) {
<       while_continue___0: ;/* CIL Label */;
17751,17775d12490
<         if (!(i < 256L)) {
<                                
<         }
<         if (maxstate < *(trans___0 + i)) {
<                                       
<         }
<             
<       }
<     while_break___2: ;/* CIL Label */;
<     }
<   while_break___0 : {;
<                                             
<                                                          
<                                                     
<   }
<     if ((d->states + s)->constraint) {
<                                   
<     } else {
<                                   
<     }
<            
<   }
< }
< static void build_state_zero(struct dfa *d) {
<   int initial_tab_size;
17777,17793d12491
<   {
<     {
<                            
<                                 
<                      
<                                            
<                                            
<                                       
<                                              
<                                                                  
<                                    
<     }
<            
<   }
< }
< static status_transit_state transit_state_singlebyte(struct dfa *d, state_num s,
<                                                      unsigned char const *p, state_num *next_state) {
17837,17838c12535,12537
< static int match_anychar(struct dfa *d, state_num s, position pos, wint_t wc,
<                          size_t mbclen) {
---
> size_t(__attribute__((__nonnull__(4))) kwsexec)(kwset_t kwset___1, char const *text,
>                                                 size_t size, struct kwsmatch *kwsmatch) {
> 
17860a12560,12584
> }
> extern reg_syntax_t re_set_syntax(reg_syntax_t __syntax);
> extern char const *re_compile_pattern(char const *__pattern, size_t __length,
>                                       struct re_pattern_buffer *__buffer);
> extern regoff_t re_search(struct re_pattern_buffer *__buffer, char const *__string,
>                           __re_idx_t __length, __re_idx_t __start, regoff_t __range,
>                           struct re_registers *__regs);
> extern regoff_t re_match(struct re_pattern_buffer *__buffer, char const *__string,
>                          __re_idx_t __length, __re_idx_t __start, struct re_registers *__regs);
> struct dfa *dfaalloc(void);
> struct dfamust *__attribute__((__pure__)) dfamusts(struct dfa const *d);
> void dfasyntax(reg_syntax_t bits, int fold, unsigned char eol);
> void dfacomp(char const *s, size_t len, struct dfa *d, int searchflag);
> char *dfaexec(struct dfa *d, char const *begin, char *end, int allow_nl, size_t *count,
>               int *backref);
> struct dfa *dfasuperset(struct dfa const *d) __attribute__((__pure__));
> _Bool dfaisfast(struct dfa const *d) __attribute__((__pure__));
> void dfawarn(char const *mesg);
> __attribute__((__noreturn__)) void dfaerror(char const *mesg);
> void GEAcompile(char const *pattern, size_t size, reg_syntax_t syntax_bits___0);
> size_t EGexecute(char const *buf, size_t size, size_t *match_size, char const *start_ptr);
> static _Bool wordchar___0(wint_t wc) {
> 
> 
> 
17875a12600,12609
> }
> static kwset_t kwset___0;
> static struct dfa *dfa;
> static struct patterns patterns0;
> static struct patterns *patterns;
> static size_t pcount;
> static size_t kwset_exact_matches;
> static _Bool begline;
> __attribute__((__noreturn__)) void dfaerror(char const *mesg);
> void dfaerror(char const *mesg) {
17884,17885c12618,12619
< static int match_mb_charset(struct dfa *d, state_num s, position pos, char const *p,
<                             wint_t wc, size_t match_len) {
---
> static enum __anonenum_mode_60 mode;
> void dfawarn(char const *mesg) {
17906a12641,12642
> }
> static void kwsmusts(void) {
17989a12726,12757
> }
> static char const line_beg_no_bk[3] = {(char const)'^', (char const)'(', (char const)'\000'};
> static char const line_end_no_bk[3] = {(char const)')', (char const)'$', (char const)'\000'};
> static char const word_beg_no_bk[19] =
>     {(char const)'(', (char const)'^', (char const)'|', (char const)'[',
>      (char const)'^', (char const)'[', (char const)':', (char const)'a',
>      (char const)'l', (char const)'n', (char const)'u', (char const)'m',
>      (char const)':', (char const)']', (char const)'_', (char const)']',
>      (char const)')', (char const)'(', (char const)'\000'};
> static char const word_end_no_bk[19] =
>     {(char const)')', (char const)'(', (char const)'[', (char const)'^',
>      (char const)'[', (char const)':', (char const)'a', (char const)'l',
>      (char const)'n', (char const)'u', (char const)'m', (char const)':',
>      (char const)']', (char const)'_', (char const)']', (char const)'|',
>      (char const)'$', (char const)')', (char const)'\000'};
> static char const line_beg_bk[4] = {(char const)'^', (char const)'\\', (char const)'(', (char const)'\000'};
> static char const line_end_bk[4] = {(char const)'\\', (char const)')', (char const)'$', (char const)'\000'};
> static char const word_beg_bk[23] =
>     {(char const)'\\', (char const)'(', (char const)'^', (char const)'\\',
>      (char const)'|', (char const)'[', (char const)'^', (char const)'[',
>      (char const)':', (char const)'a', (char const)'l', (char const)'n',
>      (char const)'u', (char const)'m', (char const)':', (char const)']',
>      (char const)'_', (char const)']', (char const)'\\', (char const)')',
>      (char const)'\\', (char const)'(', (char const)'\000'};
> static char const word_end_bk[23] =
>     {(char const)'\\', (char const)')', (char const)'\\', (char const)'(',
>      (char const)'[', (char const)'^', (char const)'[', (char const)':',
>      (char const)'a', (char const)'l', (char const)'n', (char const)'u',
>      (char const)'m', (char const)':', (char const)']', (char const)'_',
>      (char const)']', (char const)'\\', (char const)'|', (char const)'$',
>      (char const)'\\', (char const)')', (char const)'\000'};
> void GEAcompile(char const *pattern, size_t size, reg_syntax_t syntax_bits___0) {
18067,18069d12834
< }
< static int *check_matching_with_multibyte_ops(struct dfa *d, state_num s, char const *p,
<                                               wint_t wc, size_t mbclen) {
18110,18114d12874
< }
< static status_transit_state transit_state_consume_1char(struct dfa *d, state_num s,
<                                                         unsigned char const **pp,
<                                                         wint_t wc, size_t mbclen,
<                                                         int *match_lens) {
18127a12888,12897
> }
> size_t EGexecute(char const *buf, size_t size, size_t *match_size, char const *start_ptr) {
> 
> 
> 
> 
> 
> 
> 
> 
18189,18191d12958
< }
< static state_num transit_state(struct dfa *d, state_num s, unsigned char const **pp,
<                                unsigned char const *end) {
18306,18499d13072
< }
< char *dfaexec(struct dfa *d, char const *begin, char *end, int allow_nl, size_t *count,
<               int *backref) {
<   state_num s;
<   state_num s1;
<   unsigned char const *p;
<   unsigned char const *mbp;
<   state_num **trans___0;
<   state_num *t;
<   unsigned char eol;
<   unsigned char saved_end;
<   size_t nlcount;
<   wint_t wc;
<   size_t tmp;
<   unsigned char const *tmp___0;
<   unsigned char const *tmp___1;
<   state_num tmp___2;
<   unsigned char const *tmp___3;
<   unsigned char const *tmp___4;
< 
<   {
<                       
<                         
<     if (!d->tralloc) {
<       {
<                             
<       }
<     }
<                       
<            
<                                        
<             
<                          
<                                         
<                      
<     if (d->multibyte) {
<       {
<                                                      
<       }
<       if (!d->mb_match_lens) {
<         {
<                                                                                       
<                                                          
<         }
<       }
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (d->multibyte) {
<           {
<             while (1) {
<             while_continue___1: ;/* CIL Label */;
<             while_continue___0:;
<                                    
<               if (!((unsigned long)t != (unsigned long)((void *)0))) {
<                                      
<               }
<                      
<               if (s == 0L) {
<                 {
<                   while (1) {
<                   while_continue___2: ;/* CIL Label */;
< 
<                     if (!((unsigned long)mbp < (unsigned long)p)) {
<                                            
<                     }
<                     {
<                                                                                                              
<                                             
<                                  
<                     }
<                   }
<                 while_break___4: ;/* CIL Label */;
<                 }
<               while_break___1:;
<                         
<                 if ((unsigned long)((char *)p) > (unsigned long)end) {
< 
< 
<                 }
<               }
<               if ((d->states + s)->mbps.nelem == 0UL) {
<                             
<                     
<                                                  
<                                         
<               }
<               if ((d->states + s)->has_mbcset) {
<                 if (backref) {
<                                
<                             
<                 }
<               }
<               {
< 
< 
< 
<               }
<             }
<           while_break___3: ;/* CIL Label */;
<           }
<         while_break___0:;;
<         } else {
<           {
<             while (1) {
<             while_continue___3: ;/* CIL Label */;
<                                    
<               if (!((unsigned long)t != (unsigned long)((void *)0))) {
<                                      
<               }
<                           
<                   
<                                                 
<                                     
<               if ((unsigned long)t == (unsigned long)((void *)0)) {
<                             
<                        
<                              
<                                      
<               }
<                           
<                   
<                                                
<             }
<           while_break___5: ;/* CIL Label */;
<           }
<         while_break___2:;;
<         }
<         if ((unsigned long)((char *)p) > (unsigned long)end) {
<                                                  
<                     
<         }
<         if (s >= 0L) {
<           if (*(d->fails + s)) {
<             if (*(d->success + s) & sbit[*p]) {
<               if (backref) {
<                                                              
<               }
<                         
<             }
<                    
<             if (d->multibyte) {
<               {
< 
< 
< 
<               }
<             } else {
<                           
<                   
<                                                              
<             }
<                         
<           }
<         }
<         if ((int const) * (p + -1) == (int const)eol) {
<           if ((unsigned long)((char *)p) != (unsigned long)begin) {
<                       
<                     
<           }
<         }
<         if (s >= 0L) {
<           if (!*(d->trans + s)) {
<             {
<                                 
<             }
<           }
<                                
<                       
<         }
<         if ((int const) * (p + -1) == (int const)eol) {
<           if (allow_nl) {
<                                     
<                         
<           }
<         }
<                          
<       __Cont:;;
<       }
<     while_break: ;/* CIL Label */;
<     }
< 
<   done:;
<     if (count) {
<                         
<     }
<                            
<                        
<   }
< }
< struct dfa *dfasuperset(struct dfa const *d) __attribute__((__pure__));
< struct dfa *dfasuperset(struct dfa const *d) {
18501,18506d13073
<   {
<                                        
<   }
< }
< _Bool dfaisfast(struct dfa const *d) __attribute__((__pure__));
< _Bool dfaisfast(struct dfa const *d) {
18508,18585d13074
<   {
<                             
<   }
< }
< static void free_mbdata(struct dfa *d) {
<   size_t i;
<   size_t j;
<   struct mb_char_classes *p;
< 
<   {
<     {
<                                       
<                     
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i < d->nmbcsets)) {
<                            
<         }
<         {
<                              
<                                  
<                                       
<                                   
<                         
<         }
<         {
<           while (1) {
<           while_continue___0: ;/* CIL Label */;
< 
<             if (!(j < p->nequivs)) {
<                                    
<             }
<             {
< 
< 
<             }
<           }
<         while_break___3: ;/* CIL Label */;
<         }
<       while_break___0 : {;
<                                 
<                       
<       }
<         {
<           while (1) {
<           while_continue___1: ;/* CIL Label */;
< 
<             if (!(j < p->ncoll_elems)) {
<                                    
<             }
<             {
< 
< 
<             }
<           }
<         while_break___4: ;/* CIL Label */;
<         }
<       while_break___1 : {;
<                                     
<             
<       }
<       }
<     while_break___2: ;/* CIL Label */;
<     }
<   while_break : {;
<                              
<                                       
<                                    
<                                           
<   }
<            
<   }
< }
< void dfainit(struct dfa *d) {
<   size_t tmp;
18587,18810d13075
<   {
<     {
<                                        
<                                      
<                                         
<                                        
<     }
<            
<   }
< }
< static void dfaoptimize(struct dfa *d) {
<   size_t i;
<   _Bool have_backref;
<   int tmp;
< 
<   {
<     {
<                               
<                          
<     }
<     if (!tmp) {
< 
<     }
<                   
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i < d->tindex)) {
<                            
<         }
<         if (*(d->tokens + i) == 272L) {
< 
<         }
<         if (*(d->tokens + i) == 257L) {
<                         
<         }
<         if (*(d->tokens + i) == 273L) {
<                         
<         }
<                             
<       case_272 : {;
< 
<       }
<       case_257:;
<                                 
<                           
<       case_273:;
<                
<       switch_default:;
<                           
<       switch_break:;
<             
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<     if (!have_backref) {
<       if (d->superset) {
<         {
<                                
<                                     
<                                                   
<         }
<       }
<     }
<     {
<                      
<                               
<     }
<            
<   }
< }
< static void dfassbuild(struct dfa *d) {
<   size_t i;
<   size_t j;
<   charclass ccl;
<   _Bool have_achar;
<   _Bool have_nchar;
<   struct dfa *sup;
<   struct dfa *tmp;
<   size_t tmp___0;
<   size_t tmp___1;
<   size_t tmp___2;
<   size_t tmp___3;
<   size_t tmp___4;
<   void *__cil_tmp17;
< 
<   {
<     {
<                             
<                             
<                        
<                 
<                 
<                                 
<                                                
<                                                            
<                                                 
<                                              
<                                  
<                                                  
<                                   
<                                              
<                                              
<                                         
<                                                
<                                                  
<                                                                                          
<                                                                                                                                   
<                                                       
<                                                                                
<                                     
<                     
<             
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i < d->tindex)) {
<                            
<         }
<         if (*(d->tokens + i) == 272L) {
< 
<         }
<         if (*(d->tokens + i) == 273L) {
<                         
<         }
<         if (*(d->tokens + i) == 257L) {
<                         
<         }
<         if (*(d->tokens + i) == 260L) {
< 
<         }
<         if (*(d->tokens + i) == 261L) {
<                         
<         }
<         if (*(d->tokens + i) == 262L) {
< 
<         }
<         if (*(d->tokens + i) == 263L) {
< 
<         }
<                             
<       case_272 : {;
<                      
<                     
<                     
<             
<                                                                                  
<                                                             
<                     
<             
<                                               
<       }
<         if (*(d->tokens + (i + 1UL)) == 264L) {
<               
<         } else {
<           if (*(d->tokens + (i + 1UL)) == 265L) {
<                 
<           } else {
<             if (*(d->tokens + (i + 1UL)) == 266L) {
<                   
<             }
<           }
<         }
<                               
<                           
<       case_260:;
<         if (d->multibyte) {
<                       
<               
<                                                 
<                                         
<                             
<         }
<       switch_default:;
<                     
<             
<                                                     
<         if (0L <= *(d->tokens + i)) {
<           if (*(d->tokens + i) < 256L) {
<                                   
<           } else {
<                     
<           }
<         } else {
<         _L:;
<           if (*(d->tokens + i) >= 275L) {
<                                   
<           }
<         }
<                           
<       switch_break:;
<             
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;
<                     
<     if (have_nchar) {
<       if (have_achar) {
<                           
<       } else {
<         if (d->multibyte) {
<                             
<         } else {
<           {
< 
< 
<           }
<         }
<       }
<     } else {
<       {
<                      
<                           
<       }
<     }
<            
<   }
< }
< void dfacomp(char const *s, size_t len, struct dfa *d, int searchflag) {
18812,18834d13076
<   {
<     {
<                  
<                     
<                           
<                  
<                     
<                      
<                                 
<     }
<     if (d->superset) {
<       {
<                            
<                                             
<       }
<     }
<            
<   }
< }
< void dfafree(struct dfa *d) {
<   size_t i;
<   struct dfamust *dm;
<   struct dfamust *ndm;
18836,18842d13077
<   {
<     {
<                                    
<                               
<     }
<     if (d->multibyte) {
<       {
18844,18849d13078
<       }
<     }
<                   
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
18851,18854d13079
<         if (!(i < (size_t)d->sindex)) {
<                            
<         }
<         {
18858,18865d13082
<         }
<       }
<     while_break___3: ;/* CIL Label */;
<     }
<   while_break : {;
<                             
<   }
<     if (d->follows) {
18867d13083
<       {
18879,18881d13094
<       while_break___4: ;/* CIL Label */;
<       }
<     while_break___0 : {;
18883,18885d13095
<     }
<     }
<     if (d->trans) {
18887d13096
<       {
18900,18902d13108
<       while_break___5: ;/* CIL Label */;
<       }
<     while_break___1 : {;
18907,18912d13112
<     }
<     }
<                   
<     {
<       while (1) {
<       while_continue___2: ;/* CIL Label */;
18914,18917d13113
<         if (!dm) {
<                                
<         }
<         {
18922,18928d13117
<         }
<       }
<     while_break___6: ;/* CIL Label */;
<     }
<   while_break___2:;;
<     if (d->superset) {
<       {
18930,18990d13118
<       }
<     }
<            
<   }
< }
< static char *icatalloc(char *old, char const *new) {
<   char *result;
<   size_t oldsize;
<   size_t newsize;
<   size_t tmp;
< 
<   {
<     {
<                         
<                     
<     }
<     if (newsize == 0UL) {
<                    
<     }
<     {
<                                           
<                                                                         
<                                                                                                                          
<                             
<     }
<                     
<   }
< }
< static char *__attribute__((__pure__)) istrstr(char const *lookin, char const *lookfor) {
<   char const *cp;
<   size_t len;
<   int tmp;
< 
<   {
<     {
<                             
<                   
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!((int const) * cp != 0)) {
<                            
<         }
<         {
<                                           
<         }
<         if (tmp == 0) {
<                                                                         
<         }
<              
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<                                                                            
<   }
< }
< static void freelist(char **cpp) {
<   char **tmp;
18992,19160d13119
<   {
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!*cpp) {
<                            
<         }
<         {
<                     
<                 
<                              
<         }
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<            
<   }
< }
< static char **enlist(char **cpp, char *new, size_t len) {
<   size_t i;
<   size_t j;
<   void *tmp;
<   char *__attribute__((__pure__)) tmp___0;
<   char *__attribute__((__pure__)) tmp___1;
< 
<   {
<     {
<                                
<                                                                                                               
<                                 
<                                   
<                     
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!((unsigned long)*(cpp + i) != (unsigned long)((void *)0))) {
<                            
<         }
<         {
<                                                                          
<         }
<         if ((unsigned long)tmp___0 != (unsigned long)((void *)0)) {
<           {
<                               
<           }
<                        
<         }
<             
<       }
<     while_break___1: ;/* CIL Label */;
<     }
<   while_break:;
<                   
<     {
<       while (1) {
<       while_continue___0: ;/* CIL Label */;
< 
<         if (!((unsigned long)*(cpp + j) != (unsigned long)((void *)0))) {
<                                
<         }
<         {
<                                                                          
<         }
<         if ((unsigned long)tmp___1 == (unsigned long)((void *)0)) {
<               
<         } else {
<           {
<                                      
<                 
<           }
<           if (i == j) {
<                                  
<           }
<                                   
<                                            
<         }
<       }
<     while_break___2: ;/* CIL Label */;
<     }
<   while_break___0 : {;
<                                                                  
<                      
<                                              
<   }
<                  
<   }
< }
< static char **comsubs(char *left, char const *right) {
<   char **cpp;
<   char **tmp;
<   char *lcp;
<   size_t len;
<   char *rcp;
<   char *tmp___0;
<   size_t i;
< 
<   {
<     {
<                                            
<                 
<                  
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!((int)*lcp != 0)) {
<                            
<         }
<         {
<                           
<                                              
<                         
<         }
<         {
<           while (1) {
<           while_continue___0: ;/* CIL Label */;
< 
<             if (!((unsigned long)rcp != (unsigned long)((void *)0))) {
<                                    
<             }
<                           
<             {
<               while (1) {
<               while_continue___1: ;/* CIL Label */;
< 
<                 if ((int)*(lcp + i) != 0) {
<                   if (!((int)*(lcp + i) == (int)*(rcp + i))) {
<                                          
<                   }
<                 } else {
<                                        
<                 }
<                             
<               __Cont:;
<                     
<               }
<             while_break___4: ;/* CIL Label */;
<             }
<           while_break___1:;;
<             if (i > len) {
<                       
<             }
<             {
<                                                                
<             }
<           }
<         while_break___3: ;/* CIL Label */;
<         }
<       while_break___0:;;
<         if (len != 0UL) {
<           {
<                                         
<           }
<         }
<               
<       }
<     while_break___2: ;/* CIL Label */;
<     }
<   while_break:;;
<                  
<   }
< }
< static char **addlists(char **old, char **new) {
<   size_t tmp;
19162,19233d13120
<   {
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!*new) {
<                            
<         }
<         {
<                                            
<                                        
<                  
<         }
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<                  
<   }
< }
< static char **inboth(char **left, char **right) {
<   char **both;
<   char **tmp;
<   size_t lnum;
<   size_t rnum;
<   char **temp;
<   char **tmp___0;
< 
<   {
<     {
<                                             
<                  
<                        
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!((unsigned long)*(left + lnum) != (unsigned long)((void *)0))) {
<                            
<         }
<                          
<         {
<           while (1) {
<           while_continue___0: ;/* CIL Label */;
< 
<             if (!((unsigned long)*(right + rnum) != (unsigned long)((void *)0))) {
<                                    
<             }
<             {
<                                                                                
<                              
<                                           
<                              
<                                  
<                      
<             }
<           }
<         while_break___2: ;/* CIL Label */;
<         }
<       while_break___0:;
<                
<       }
<     while_break___1: ;/* CIL Label */;
<     }
<   while_break:;;
<                   
<   }
< }
< static must *allocmust(must *mp) {
<   must *new_mp;
<   must *tmp;
19235,19252d13121
<   {
<     {
<                                              
<                    
<                                                            
<                                                 
<                                                  
<                                               
<                                  
<                                  
<                         
<     }
<                     
<   }
< }
< static void resetmust(must *mp) {
<   char tmp;
<   char tmp___0;
19254,19269d13122
<   {
<     {
<                        
<                                           
<                              
<                               
<                     
<                              
<                             
<                              
<                              
<     }
<            
<   }
< }
< static void freemust(must *mp) {
19271,19728d13123
<   {
<     {
<                        
<                            
<                              
<                               
<                            
<                        
<     }
<            
<   }
< }
< static void dfamust(struct dfa *d) {
<   must *mp;
<   char const *result;
<   size_t ri;
<   size_t i;
<   _Bool exact;
<   _Bool begline___0;
<   _Bool endline;
<   struct dfamust *dm;
<   token t;
<   char **new;
<   must *rmp;
<   must *lmp;
<   size_t j;
<   size_t ln;
<   size_t rn;
<   size_t n;
<   int tmp;
<   size_t tmp___0;
<   size_t tmp___1;
<   int tmp___2;
<   must *rmp___0;
<   must *lmp___0;
<   size_t lrlen;
<   size_t tmp___3;
<   size_t rllen;
<   size_t tmp___4;
<   char *tp;
<   char *tmp___5;
<   charclass *ccl;
<   int j___0;
<   _Bool tmp___6;
<   _Bool tmp___7;
<   int tmp___8;
<   int tmp___9;
<   char tmp___10;
<   char tmp___11;
<   int tmp___12;
<   char tmp___13;
<   char tmp___14;
<   must *prev;
<   char *__cil_tmp45;
< 
<   {
<                              
<                 
<                      
<                            
<                        
<                    
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(ri < d->tindex)) {
< 
<         }
<                               
<         if (t == 258L) {
<                         
<         }
<         if (t == 259L) {
<                         
<         }
<         if (t == 270L) {
< 
<         }
<         if (t == 271L) {
< 
<         }
<         if (t == 256L) {
<                         
<         }
<         if (t == 260L) {
< 
<         }
<         if (t == 261L) {
<                         
<         }
<         if (t == 262L) {
< 
<         }
<         if (t == 263L) {
< 
<         }
<         if (t == 257L) {
<                         
<         }
<         if (t == 272L) {
< 
<         }
<         if (t == 273L) {
<                         
<         }
<         if (t == 265L) {
<                         
<         }
<         if (t == 264L) {
<                         
<         }
<         if (t == 269L) {
<                         
<         }
<         if (t == 266L) {
<                         
<         }
<         if (t == -1L) {
<                           
<         }
<         if (t == 268L) {
<                         
<         }
<         if (t == 0L) {
< 
<         }
<                             
<       case_258 : {;
<                            
<                                
<       }
<                           
<       case_259 : {;
<                            
<                                
<       }
<                           
<       case_270 : {;
< 
< 
<       }
<       case_256 : {;
<                            
<       }
<                           
<       case_265 : {;
<                       
<       }
<                           
<       case_269 : {;
<                  
<                       
<                  
<                                                                    
<       }
<         if (!(tmp == 0)) {
<                                         
<         }
<                                                                       
<                                                                       
<                       
<         {
<           while (1) {
<           while_continue___0: ;/* CIL Label */;
< 
<             if ((int)*(lmp->left + i) != 0) {
<               if (!((int)*(lmp->left + i) == (int)*(rmp->left + i))) {
<                                      
<               }
<             } else {
<                                    
<             }
<                 
<           }
<         while_break___8: ;/* CIL Label */;
<         }
<       while_break___0 : {;
<                                         
<                                               
<                                               
<                
<       }
<         if (n > rn) {
<                  
<         }
<                       
<         {
<           while (1) {
<           while_continue___1: ;/* CIL Label */;
< 
<             if (!(i < n)) {
<                                    
<             }
<             if ((int)*(lmp->right + ((ln - i) - 1UL)) != (int)*(rmp->right + ((rn - i) - 1UL))) {
<                                    
<             }
<                 
<           }
<         while_break___9: ;/* CIL Label */;
<         }
<       while_break___1:;
<                       
<         {
<           while (1) {
<           while_continue___2: ;/* CIL Label */;
< 
<             if (!(j < i)) {
<                                    
<             }
<                                                                
<                 
<           }
<         while_break___10: ;/* CIL Label */;
<         }
<       while_break___2 : {;
<                                          
<                                        
<                           
<                               
<                       
<                       
<       }
<                           
<       case_266:;
<                                      
<                           
<       case_neg_1:;
<         if (!(!mp->prev)) {
<           {
< 
< 
<           }
<         }
<                       
<         {
<           while (1) {
<           while_continue___3: ;/* CIL Label */;
< 
<             if (!((unsigned long)*(mp->in + i) != (unsigned long)((void *)0))) {
<                                    
<             }
<             {
<                                                             
<                                        
<             }
<             if (tmp___0 > tmp___1) {
<                                                    
<             }
<                 
<           }
<         while_break___11: ;/* CIL Label */;
<         }
<       while_break___3 : {;
<                                                        
<       }
<         if (tmp___2 == 0) {
<                            
<                                     
<                                 
<         }
<                   
<       case_268 : {;
<                      
<                       
<                      
<                                                          
<       }
<         if ((int)*(lmp___0->right + 0) != 0) {
<           if ((int)*(rmp___0->left + 0) != 0) {
<             {
<                                                              
<                               
<                                                             
<                               
<                                                        
<                            
<                                                                                                                             
<                             
<                                                                                                                                      
<                             
<                                                                    
<                                
<             }
<           }
<         }
<         if ((int)*(lmp___0->is + 0) != 0) {
<           {
<                                                                                   
<           }
<         }
<         if ((int)*(rmp___0->is + 0) == 0) {
<                                                
<         }
<         {
<                                                                                    
<         }
<         if ((int)*(lmp___0->is + 0) != 0) {
<                   
<         } else {
<           if (lmp___0->begline) {
<           _L:;
<             if ((int)*(rmp___0->is + 0) != 0) {
<               {
<                                                                                 
<                                                     
<               }
<             } else {
<               if (rmp___0->endline) {
<                 {
<                                                                                   
<                                                       
<                 }
<               } else {
<                                                   
<                                             
<                                             
<               }
<             }
<           } else {
<                                               
<                                         
<                                         
<           }
<         }
<         {
<                             
<         }
<                           
<       case_0:;
< 
<       switch_default : {;
<                            
<       }
<         if (275L <= t) {
<                                             
<                     
<           {
<             while (1) {
<             while_continue___4: ;/* CIL Label */;
< 
<               if (!(j___0 < 256)) {
< 
<               }
<               {
<                                                                                              
<               }
<               if (tmp___6) {
<                                      
<               }
<                       
<             }
<           while_break___12: ;/* CIL Label */;
<           }
<         while_break___4:;;
<           if (!(j___0 < 256)) {
< 
<           }
<                            
<           {
<             while (1) {
<             while_continue___5: ;/* CIL Label */;
<                       
<               if (!(j___0 < 256)) {
<                                      
<               }
<               {
<                                                                                              
<               }
<               if (tmp___7) {
<                 if (case_fold) {
<                   if (!d->multibyte) {
<                     {
< 
< 
<                     }
< 
< 
< 
<                   } else {
<                                          
<                   }
<                 } else {
<                                        
<                 }
<               }
<             }
<           while_break___13: ;/* CIL Label */;
<           }
<         while_break___5:;;
<           if (j___0 < 256) {
<                               
<           }
<         }
<         if (case_fold) {
<           if (!d->multibyte) {
<             {
< 
< 
<             }
<           } else {
<                                
<           }
<         } else {
<                              
<         }
<         {
<                                       
<                               
<                                      
<                                    
<                                   
<                                       
<                               
<                                      
<                                    
<                                                      
<         }
<                           
<       switch_break:;
<              
<       }
<     while_break___7: ;/* CIL Label */;
<     }
<   while_break:;;
<   done:;
<     if (*result) {
<       {
<                                                     
<                           
<                                   
<                               
<                                    
<                             
<                       
<       }
<     }
<     {
<       while (1) {
<       while_continue___6: ;/* CIL Label */;
< 
<         if (!mp) {
<                                
<         }
<         {
<                           
<                        
<                     
<         }
<       }
<     while_break___14: ;/* CIL Label */;
<     }
<   while_break___6:;;
<            
<   }
< }
< struct dfa *dfaalloc(void) {
<   struct dfa *tmp;
19730,19737d13124
<   {
<     {
<                                                       
<     }
<                  
<   }
< }
< struct dfamust *__attribute__((__pure__)) dfamusts(struct dfa const *d) {
19739,19750d13125
<   {
<                                                                                             
<   }
< }
< extern __attribute__((__nothrow__)) size_t mbrlen(char const *__restrict __s,
<                                                   size_t __n, mbstate_t *__restrict __ps);
< void build_mbclen_cache(void);
< static size_t mbclen_cache[256];
< static char trans[256];
< void kwsinit(kwset_t *kwset___1) {
<   int i;
<   size_t tmp;
19752,19754d13126
<   {
<     if (match_icase) {
<       {
19756d13127
<       }
19781,19787d13151
<     } else {
<       {
<                                                          
<       }
<     }
<     if (!*kwset___1) {
<       {
19789,19797d13152
<       }
<     }
<            
<   }
< }
< static char *out;
< static mb_len_map_t *len_map;
< static size_t outalloc;
< char *mbtoupper(char const *beg, size_t *n, mb_len_map_t **len_map_p) {
19930,20104c13285,13319
< void build_mbclen_cache(void) {
<   int i;
<   char c;
<   unsigned char uc;
<   mbstate_t mbs;
<   void *__cil_tmp6;
< 
<   {
<              
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!(i <= 127)) {
<                            
<         }
<         {
<                       
<                                 
<                           
<                                  
<                                                                                          
<                                                                                       
<               
<         }
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<            
<   }
< }
< ptrdiff_t mb_goback(char const **mb_start, char const *cur, char const *end) {
<   char const *p;
<   char const *p0;
<   mbstate_t cur_state;
<   size_t mbclen;
<   unsigned char tmp;
<   long tmp___0;
<   void *__cil_tmp11;
< 
<   {
<     {
<                     
<              
<                                                          
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!((unsigned long)p < (unsigned long)cur)) {
<                            
<         }
<         {
<                                    
<                                      
<         }
<         if (mbclen == 0xfffffffffffffffeUL) {
<           {
< 
<           }
<         }
<         if (0UL < mbclen) {
<           if (!(mbclen < 0xfffffffffffffffeUL)) {
<             {
< 
< 
<             }
<           }
<         } else {
<           {
< 
< 
<           }
<         }
<                
<                     
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;
<                   
<     if ((unsigned long)p == (unsigned long)cur) {
<                    
<     } else {
< 
<     }
<                      
<   }
< }
< wint_t mb_prev_wc(char const *buf, char const *cur, char const *end) {
<   char const *p;
<   ptrdiff_t tmp;
<   wint_t tmp___0;
< 
<   {
<     if ((unsigned long)cur == (unsigned long)buf) {
<                            
<     }
<     {
<               
<             
<                                     
<                  
<                                      
<     }
<                      
<   }
< }
< wint_t mb_next_wc(char const *cur, char const *end) {
<   wchar_t wc;
<   mbstate_t mbs;
<   unsigned int tmp___0;
<   size_t tmp___1;
<   void *__cil_tmp8;
< 
<   {
<                     
<                            
<     if (end - cur != 0L) {
<       {
<                                                                                                   
<                                                                                       
<       }
<       if (tmp___1 < 0xfffffffffffffffeUL) {
<                                    
<       } else {
< 
<       }
<     } else {
<                             
<     }
<                      
<   }
< }
< extern int fflush_unlocked(FILE *__stream);
< extern int fputc_unlocked(int __c, FILE *__stream);
< extern size_t fread_unlocked(void *__restrict __ptr, size_t __size, size_t __n,
<                              FILE *__restrict __stream);
< extern size_t fwrite_unlocked(void const *__restrict __ptr, size_t __size, size_t __n,
<                               FILE *__restrict __stream);
< extern __attribute__((__nothrow__)) __off_t lseek(int __fd, __off_t __offset, int __whence);
< extern __attribute__((__nothrow__)) int isatty(int __fd);
< extern char *optarg;
< extern int optind;
< extern __attribute__((__nothrow__)) int getpagesize(void) __attribute__((__const__));
< extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1))) atexit)(void (*__func)(void));
< extern __attribute__((__nothrow__, __noreturn__)) void exit(int __status);
< extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1, 2))) strcasecmp)(char const *__s1,
<                                                                                        char const *__s2) __attribute__((__pure__));
< extern __attribute__((__nothrow__)) char *textdomain(char const *__domainname);
< extern __attribute__((__nothrow__)) char *bindtextdomain(char const *__domainname,
<                                                          char const *__dirname);
< extern int getopt_long(int ___argc, char *const *___argv, char const *__shortopts,
<                        struct option const *__longopts, int *__longind);
< static struct stat out_stat;
< static int show_help;
< static int show_version;
< static int suppress_errors;
< static int color_option;
< static int only_matching;
< static int align_tabs;
< static char const *group_separator = "--";
< static char const *selected_match_color = "01;31";
< static char const *context_match_color = "01;31";
< static char const *filename_color = "35";
< static char const *line_num_color = "32";
< static char const *byte_num_color = "32";
< static char const *sep_color = "36";
< static char const *selected_line_color = "";
< static char const *context_line_color = "";
< static char const *sgr_start = "\033[%sm\033[K";
< static char const *sgr_end = "\033[m\033[K";
< static void pr_sgr_start(char const *s) {
---
> void dfafree(struct dfa *d);
> void dfainit(struct dfa *d);
> void dfaparse(char const *s, size_t len, struct dfa *d);
> void dfaanalyze(struct dfa *d, int searchflag);
> void dfastate(ptrdiff_t s, struct dfa *d, ptrdiff_t *trans___0);
> extern __attribute__((__nothrow__)) int isalnum(int);
> extern __attribute__((__nothrow__)) int isalpha(int);
> extern __attribute__((__nothrow__)) int iscntrl(int);
> extern __attribute__((__nothrow__)) int isdigit(int);
> extern __attribute__((__nothrow__)) int islower(int);
> extern __attribute__((__nothrow__)) int isgraph(int);
> extern __attribute__((__nothrow__)) int isprint(int);
> extern __attribute__((__nothrow__)) int ispunct(int);
> extern __attribute__((__nothrow__)) int isspace(int);
> extern __attribute__((__nothrow__)) int isupper(int);
> extern __attribute__((__nothrow__)) int isxdigit(int);
> extern __attribute__((__nothrow__)) int toupper(int __c);
> extern __attribute__((__nothrow__)) int isblank(int);
> extern __attribute__((__nothrow__)) char *(__attribute__((__nonnull__(1, 2))) strncpy)(char *__restrict __dest,
>                                                                                        char const *__restrict __src,
>                                                                                        size_t __n);
> extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1, 2))) strcoll)(char const *__s1,
>                                                                                     char const *__s2) __attribute__((__pure__));
> extern __attribute__((__nothrow__)) char *setlocale(int __category, char const *__locale);
> extern __attribute__((__nothrow__)) int wctob(wint_t __c);
> extern __attribute__((__nothrow__)) size_t wcrtomb(char *__restrict __s, wchar_t __wc,
>                                                    mbstate_t *__restrict __ps);
> extern __attribute__((__nothrow__)) int iswalpha(wint_t __wc);
> extern __attribute__((__nothrow__)) wctype_t wctype(char const *__property);
> extern __attribute__((__nothrow__)) int iswctype(wint_t __wc, wctype_t __desc);
> extern __attribute__((__nothrow__)) wint_t towupper(wint_t __wc);
> static unsigned char to_uchar___0(char ch) {
> 
> 
> 
20106,20113d13320
<   {
<     if (*s) {
<       {
<                                            
<       }
<     }
<            
<   }
20115c13322,13360
< static void pr_sgr_end(char const *s) {
---
> static void dfamust(struct dfa *d);
> static void regexp(void);
> static void dfambcache(struct dfa *d) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
20117,20124d13361
<   {
<     if (*s) {
<       {
<                                     
<       }
<     }
<            
<   }
20126c13363,13390
< static void pr_sgr_start_if(char const *s) {
---
> static size_t mbs_to_wchar(wint_t *pwc, char const *s, size_t n, struct dfa *d) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
20128,20135d13391
<   {
<     if (color_option) {
<       {
<                         
<       }
<     }
<            
<   }
20137c13393,13396
< static void pr_sgr_end_if(char const *s) {
---
> static _Bool tstbit(unsigned int b, charclass_word *const c) {
> 
> 
> 
20139,20146d13397
<   {
<     if (color_option) {
<       {
<                       
<       }
<     }
<            
<   }
20148c13399
< static void color_cap_mt_fct(void) {
---
> static void setbit(unsigned int b, charclass_word *c) {
20155c13406
< static void color_cap_rv_fct(void) {
---
> static void clrbit(unsigned int b, charclass_word *c) {
20162c13413
< static void color_cap_ne_fct(void) {
---
> static void copyset(charclass_word *const src, charclass_word *dst) {
20172,20270c13423,13424
< static struct color_cap const color_dict[12] =
<     {{"mt", &selected_match_color, &color_cap_mt_fct},
<      {"ms", &selected_match_color, (void (*)(void))((void *)0)},
<      {"mc", &context_match_color, (void (*)(void))((void *)0)},
<      {"fn", &filename_color, (void (*)(void))((void *)0)},
<      {"ln", &line_num_color, (void (*)(void))((void *)0)},
<      {"bn", &byte_num_color, (void (*)(void))((void *)0)},
<      {"se", &sep_color, (void (*)(void))((void *)0)},
<      {"sl", &selected_line_color, (void (*)(void))((void *)0)},
<      {"cx", &context_line_color, (void (*)(void))((void *)0)},
<      {"rv", (char const **)((void *)0), &color_cap_rv_fct},
<      {"ne", (char const **)((void *)0), &color_cap_ne_fct},
<      {(char const *)((void *)0), (char const **)((void *)0), (void (*)(void))((void *)0)}};
< static struct exclude *excluded_patterns;
< static struct exclude *excluded_directory_patterns;
< static char const short_options[58] =
<     {(char const)'0', (char const)'1', (char const)'2', (char const)'3',
<      (char const)'4', (char const)'5', (char const)'6', (char const)'7',
<      (char const)'8', (char const)'9', (char const)'A', (char const)':',
<      (char const)'B', (char const)':', (char const)'C', (char const)':',
<      (char const)'D', (char const)':', (char const)'E', (char const)'F',
<      (char const)'G', (char const)'H', (char const)'I', (char const)'P',
<      (char const)'T', (char const)'U', (char const)'V', (char const)'X',
<      (char const)':', (char const)'a', (char const)'b', (char const)'c',
<      (char const)'d', (char const)':', (char const)'e', (char const)':',
<      (char const)'f', (char const)':', (char const)'h', (char const)'i',
<      (char const)'L', (char const)'l', (char const)'m', (char const)':',
<      (char const)'n', (char const)'o', (char const)'q', (char const)'R',
<      (char const)'r', (char const)'s', (char const)'u', (char const)'v',
<      (char const)'w', (char const)'x', (char const)'y', (char const)'Z',
<      (char const)'z', (char const)'\000'};
< static struct option const long_options[50] =
<     {{"basic-regexp", 0, (int *)((void *)0), 'G'},
<      {"extended-regexp", 0, (int *)((void *)0), 'E'},
<      {"fixed-regexp", 0, (int *)((void *)0), 'F'},
<      {"fixed-strings", 0, (int *)((void *)0), 'F'},
<      {"perl-regexp", 0, (int *)((void *)0), 'P'},
<      {"after-context", 1, (int *)((void *)0), 'A'},
<      {"before-context", 1, (int *)((void *)0), 'B'},
<      {"binary-files", 1, (int *)((void *)0), 128},
<      {"byte-offset", 0, (int *)((void *)0), 'b'},
<      {"context", 1, (int *)((void *)0), 'C'},
<      {"color", 2, (int *)((void *)0), 129},
<      {"colour", 2, (int *)((void *)0), 129},
<      {"count", 0, (int *)((void *)0), 'c'},
<      {"devices", 1, (int *)((void *)0), 'D'},
<      {"directories", 1, (int *)((void *)0), 'd'},
<      {"exclude", 1, (int *)((void *)0), 131},
<      {"exclude-from", 1, (int *)((void *)0), 132},
<      {"exclude-dir", 1, (int *)((void *)0), 135},
<      {"file", 1, (int *)((void *)0), 'f'},
<      {"files-with-matches", 0, (int *)((void *)0), 'l'},
<      {"files-without-match", 0, (int *)((void *)0), 'L'},
<      {"group-separator", 1, (int *)((void *)0), 136},
<      {"help", 0, &show_help, 1},
<      {"include", 1, (int *)((void *)0), 130},
<      {"ignore-case", 0, (int *)((void *)0), 'i'},
<      {"initial-tab", 0, (int *)((void *)0), 'T'},
<      {"label", 1, (int *)((void *)0), 134},
<      {"line-buffered", 0, (int *)((void *)0), 133},
<      {"line-number", 0, (int *)((void *)0), 'n'},
<      {"line-regexp", 0, (int *)((void *)0), 'x'},
<      {"max-count", 1, (int *)((void *)0), 'm'},
<      {"no-filename", 0, (int *)((void *)0), 'h'},
<      {"no-group-separator", 0, (int *)((void *)0), 136},
<      {"no-messages", 0, (int *)((void *)0), 's'},
<      {"null", 0, (int *)((void *)0), 'Z'},
<      {"null-data", 0, (int *)((void *)0), 'z'},
<      {"only-matching", 0, (int *)((void *)0), 'o'},
<      {"quiet", 0, (int *)((void *)0), 'q'},
<      {"recursive", 0, (int *)((void *)0), 'r'},
<      {"dereference-recursive", 0, (int *)((void *)0), 'R'},
<      {"regexp", 1, (int *)((void *)0), 'e'},
<      {"invert-match", 0, (int *)((void *)0), 'v'},
<      {"silent", 0, (int *)((void *)0), 'q'},
<      {"text", 0, (int *)((void *)0), 'a'},
<      {"binary", 0, (int *)((void *)0), 'U'},
<      {"unix-byte-offsets", 0, (int *)((void *)0), 'u'},
<      {"version", 0, (int *)((void *)0), 'V'},
<      {"with-filename", 0, (int *)((void *)0), 'H'},
<      {"word-regexp", 0, (int *)((void *)0), 'w'},
<      {(char const *)0, 0, (int *)0, 0}};
< static char const *matcher;
< static char const *filename;
< static size_t filename_prefix_len;
< static int errseen;
< static int write_error_seen;
< static char const *const directories_args[4] = {(char const * /* const  */) "read", (char const * /* const  */) "recurse", (char const * /* const  */) "skip", (char const * /* const  */)((char const *)((void *)0))};
< static enum directories_type const directories_types[3] = {(enum directories_type const)2, (enum directories_type const)3, (enum directories_type const)4};
< static enum directories_type directories = (enum directories_type)2;
< static int fts_options = 793;
< static enum __anonenum_devices_71 devices = (enum __anonenum_devices_71)0;
< static int grepfile(int dirdesc, char const *name, int follow, int command_line);
< static int grepdesc(int desc, int command_line);
< static void dos_binary(void);
< static void dos_unix_byte_offsets(void);
< static int undossify_input(char *buf, size_t buflen);
< static int is_device_mode(mode_t m) {
<   int tmp;
---
> static void zeroset(charclass_word *s) {
> 
20272,20273d13425
<   {
<     if ((m & 61440U) == 8192U) {
20275,20276d13426
<     } else {
<       if ((m & 61440U) == 24576U) {
20278,20294d13427
<       } else {
<         if ((m & 61440U) == 49152U) {
< 
<         } else {
<           if ((m & 61440U) == 4096U) {
< 
<           } else {
<                     
<           }
<         }
<       }
<     }
<                  
<   }
< }
< static int usable_st_size(struct stat const *st) {
<   int tmp;
20296,20311d13428
<   {
<     if ((st->st_mode & 61440U) == 32768U) {
<               
<     } else {
<       if (st->st_mode - st->st_mode) {
< 
<       } else {
<                 
<       }
<     }
<                  
<   }
< }
< static void (*compile)(char const *, size_t);
< static size_t (*execute)(char const *, size_t, size_t *, char const *);
< static void suppressible_error(char const *mesg, int errnum) {
20313,20323d13429
<   {
<     if (!suppress_errors) {
<       {
<                                      
<       }
<     }
<                 
<            
<   }
< }
< static void clean_up_stdout(void) {
20325,20332d13430
<   {
<     if (!write_error_seen) {
<       {
<                        
<       }
<     }
<            
<   }
20334,20365c13432,13448
< static int file_is_binary(char const *buf, size_t bufsize, int fd, struct stat const *st) {
<   void *tmp;
<   void *tmp___0;
<   off_t cur;
<   off_t hole_start;
<   off_t tmp___1;
<   int *tmp___2;
<   __off_t tmp___3;
<   int tmp___4;
< 
<   {
<     if (!eolbyte) {
<       {
< 
<       }
< 
<     }
<     {
<                                                            
<     }
<     if (tmp___0) {
<                  
<     }
<     {
<                                    
<     }
<     if (tmp___4) {
<                            
<       if (fd == 0) {
<         {
< 
<         }
---
> static void notset(charclass_word *s) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
20369,20390d13451
<       }
<       {
<                                     
<                              
<       }
<       if (0L <= hole_start) {
<         {
<                                       
<         }
<         if (tmp___3 < 0L) {
<           {
< 
< 
<           }
<         }
<         if (hole_start < (off_t)st->st_size) {
< 
<         }
<       }
<     }
<                
<   }
20392,20396c13453,13454
< static void context_length_arg(char const *str, intmax_t *out___0) {
<   strtol_error tmp;
<   char *tmp___0;
<   char *__cil_tmp7;
<   char *__cil_tmp8;
---
> static _Bool equal(charclass_word *const s1, charclass_word *const s2) {
> 
20398,20404d13455
<   {
<     {
<                                                          
<     }
<     if ((unsigned int)tmp == 0U) {
<                   
<     }
20409,20413d13459
<   case_0:;
<     if (0L <= *out___0) {
<                         
<     }
<   switch_default : {;
20416,20419d13461
<   }
<   switch_break:;;
<            
<   }
20421,20473c13463,13475
< static int skipped_file(char const *name, int command_line, int is_dir) {
<   _Bool tmp;
<   int tmp___0;
<   _Bool tmp___1;
<   int tmp___2;
<   int tmp___3;
< 
<   {
<     if (is_dir) {
<       if ((unsigned int)directories == 4U) {
< 
<       } else {
<         if (command_line) {
<           if (filename_prefix_len != 0UL) {
< 
<           } else {
<                     
<           }
<         } else {
<         _L:;
<           if (excluded_directory_patterns) {
<             {
<                                                                                            
<                                              
<             }
<             if (tmp) {
<                           
<             } else {
<                           
<             }
<           } else {
<                         
<           }
<         }
<       }
<                         
<     } else {
<       if (excluded_patterns) {
<         {
<                                                                                         
<         }
<         if (tmp___1) {
<                       
<         } else {
<                       
<         }
<       } else {
<                     
<       }
<                         
<     }
<                      
<   }
---
> static void *maybe_realloc(void *ptr, size_t nitems, size_t *nalloc, size_t itemsize) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
20475,20529c13477,13499
< static char *buffer;
< static size_t bufalloc;
< static int bufdesc;
< static char *bufbeg;
< static char *buflim;
< static size_t pagesize;
< static off_t bufoffset;
< static off_t after_last_match;
< static int reset(int fd, struct stat const *st) {
<   size_t tmp;
<   int *tmp___0;
<   char *tmp___1;
<   char *__cil_tmp9;
< 
<   {
<     if (!pagesize) {
<       {
<                                          
<       }
<       if (pagesize == 0UL) {
<         {
< 
<         }
<       } else {
<         if (2UL * pagesize + 1UL <= pagesize) {
<           {
< 
<           }
<         }
<       }
<       if (32768UL % pagesize == 0UL) {
<                             
<       } else {
< 
<       }
<       {
<                                           
<                                            
<       }
<     }
<     if ((size_t)(buffer + 1) % pagesize == 0UL) {
< 
<     } else {
<                                                                            
<     }
<                     
<                                    
<                  
<     if ((st->st_mode & 61440U) == 32768U) {
<       if (fd != 0) {
<                              
<       } else {
<         {
< 
<         }
---
> static size_t dfa_charclass_index(struct dfa *d, charclass_word *const s) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
20538,20541d13507
<       }
<     }
<                
<   }
20543,20649c13509,13518
< static int fillbuf(size_t save, struct stat const *st) {
<   ssize_t fillsize;
<   int cc;
<   char *readbuf;
<   size_t readsize;
<   size_t saved_offset;
<   size_t minsize;
<   size_t newsize;
<   size_t newalloc;
<   char *newbuf;
<   off_t to_be_read;
<   off_t maxsize_off;
<   int tmp;
<   void *tmp___0;
< 
<   {
<            
<                                                       
<     if (pagesize <= (size_t)((buffer + bufalloc) - buflim)) {
<                        
<                              
<     } else {
<                                 
<                                             
<       {
<         while (1) {
<         while_continue: ;/* CIL Label */;
< 
<           if (!(newsize < minsize)) {
<                              
<           }
<           if (newsize * 2UL < newsize) {
<             {
< 
<             }
<           } else {
<             if ((newsize * 2UL + pagesize) + 1UL < newsize * 2UL) {
<               {
< 
<               }
<             }
<           }
<                          
<         }
<       while_break___0: ;/* CIL Label */;
<       }
<     while_break : {;
<                                
<     }
<       if (tmp) {
<                                                                      
<                                                          
<         if (0L <= to_be_read) {
<           if (to_be_read <= maxsize_off) {
<             if ((size_t)maxsize_off == (size_t)maxsize_off) {
<               if (minsize <= (size_t)maxsize_off) {
<                 if ((size_t)maxsize_off < newsize) {
<                                                 
<                 }
<               }
<             }
<           }
<         }
<       }
<                                             
<       if (bufalloc < newalloc) {
<         {
<                               
<                                       
<                                    
<         }
<       } else {
<                         
<       }
<       if ((size_t)((newbuf + 1) + save) % pagesize == 0UL) {
< 
<       } else {
<                                                                                                 
<       }
<       {
<                                 
<                                                                              
<                                        
<       }
<       if ((unsigned long)newbuf != (unsigned long)buffer) {
<         {
<                                
<                           
<         }
<       }
<     }
<     {
<                                                          
<                                       
<                                                                         
<     }
<     if (fillsize < 0L) {
<              
<                              
<     }
<     {
<                             
<                                                                      
<                                   
<     }
<                 
<   }
---
> static struct dfa *dfa___0;
> static size_t charclass_index(charclass_word *const s) {
> 
> 
> 
> 
> 
> 
> 
> 
20651,20683c13520,13541
< static enum __anonenum_binary_files_72 binary_files;
< static int filename_mask;
< static int out_quiet;
< static _Bool out_invert;
< static int out_file;
< static int out_line;
< static int out_byte;
< static intmax_t out_before;
< static intmax_t out_after;
< static int count_matches;
< static int list_files;
< static int no_filenames;
< static intmax_t max_count;
< static int line_buffered;
< static char *label = (char *)((void *)0);
< static uintmax_t totalcc;
< static char const *lastnl;
< static char const *lastout;
< static uintmax_t totalnl;
< static intmax_t outleft;
< static intmax_t pending;
< static int done_on_match;
< static int exit_on_match;
< static int dos_report_unix_offset = 0;
< static File_type dos_file_type = (File_type)0;
< static File_type dos_use_file_type = (File_type)0;
< static off_t dos_stripped_crs = (off_t)0;
< static struct dos_map *dos_pos_map;
< static int dos_pos_map_size = 0;
< static int dos_pos_map_used = 0;
< static int inp_map_idx = 0;
< static int out_map_idx = 1;
< static void dos_binary(void) {
---
> static reg_syntax_t syntax_bits;
> static reg_syntax_t syntax_bits_set;
> static _Bool case_fold;
> static unsigned char eolbyte___0;
> static int sbit[256];
> static charclass letters;
> static charclass newline;
> static int char_context(unsigned char c) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
20689c13547,13565
< static void dos_unix_byte_offsets(void) {
---
> static int wchar_context(wint_t wc) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
20695,20702c13571
< static int undossify_input(char *buf, size_t buflen) {
<   int chars_left;
<   char *destp;
<   char *tmp;
<   char *tmp___0;
<   int tmp___1;
<   char *tmp___2;
<   size_t tmp___3;
---
> void dfasyntax(reg_syntax_t bits, int fold, unsigned char eol) {
20704,20706d13572
<   {
<                          
<                    
20746a13613,13614
> }
> static _Bool setbit_wc(wint_t wc, charclass_word *c) {
20762a13631,13632
> }
> static void setbit_case_fold_c(int b, charclass_word *c) {
20796d13665
<   }
20798c13667,13671
< static off_t dossified_pos(off_t byteno) {
---
> static int utf8 = -1;
> int using_utf8(void) {
> 
> 
> 
20822a13696,13702
> }
> static _Bool using_simple_locale(void);
> static int unibyte_c = -1;
> static _Bool using_simple_locale(void) {
> 
> 
> 
20854,20863d13733
< }
< static uintmax_t add_count(uintmax_t a, uintmax_t b) {
<   uintmax_t sum;
<   char *tmp;
<   char *__cil_tmp6;
< 
<   {
<                 
<     if (sum < a) {
<       {
20866,20873d13735
<       }
<     }
<                  
<   }
< }
< static void nlscan(char const *lim) {
<   size_t newlines;
<   char const *beg;
20875,20903d13736
<   {
<                          
<                  
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!((unsigned long)beg < (unsigned long)lim)) {
<                            
<         }
<         {
<                                                                                            
<         }
<         if (!beg) {
< 
<         }
<                    
<               
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break : {;
<                                            
<                  
<   }
<            
<   }
< }
< static void print_filename(void) {
20905,20914d13737
<   {
<     {
<                                       
<                                                                                                   
<                                     
<     }
<            
<   }
< }
< static void print_sep(char sep) {
20916,20923d13738
<   {
<     {
<                                  
<                                        
<                                
<     }
<            
<   }
20925,20947c13740,13759
< static void print_offset(uintmax_t pos, int min_width, char const *color) {
<   char buf[sizeof(pos) * 8UL];
<   char *p;
<   void *__cil_tmp7;
< 
<   {
<                           
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
<             
<                                        
<                     
<                     
<         if (!(pos != 0UL)) {
<                            
<         }
<       }
<     while_break___1: ;/* CIL Label */;
<     }
<   while_break:;;
<     if (align_tabs) {
<       {
---
> static char const *lexptr;
> static size_t lexleft;
> static token lasttok;
> static _Bool laststart;
> static size_t parens;
> static int minrep;
> static int maxrep;
> static int cur_mb_len = 1;
> static wint_t wctok;
> static short const lonesome_lower[19] =
>     {(short const)181, (short const)305, (short const)383, (short const)453,
>      (short const)456, (short const)459, (short const)498, (short const)837,
>      (short const)962, (short const)976, (short const)977, (short const)981,
>      (short const)982, (short const)1008, (short const)1009, (short const)1010,
>      (short const)1013, (short const)7835, (short const)8126};
> static int case_folded_counterparts(wchar_t c, wchar_t *folded) {
> 
> 
> 
> 
20957,21012d13768
<       while_break___2: ;/* CIL Label */;
<       }
<     while_break___0:;;
<     }
<     {
<                              
<                                                                                    
<                                                                                             
<                            
<     }
<            
<   }
< }
< static void print_line_head(char const *beg, char const *lim, int sep) {
<   int pending_sep;
<   uintmax_t pos;
<   uintmax_t tmp;
< 
<   {
<                     
<     if (out_file) {
<       {
<                          
<       }
<       if (filename_mask) {
<                         
<       } else {
<         {
< 
<         }
<       }
<     }
<     if (out_line) {
<       if ((unsigned long)lastnl < (unsigned long)lim) {
<         {
<                       
<                                                      
<                        
<         }
<       }
<       if (pending_sep) {
<         {
<                                
<         }
<       }
<       {
<                                                  
<                         
<       }
<     }
<     if (out_byte) {
<       {
< 
< 
< 
<       }
21018,21121d13773
<       {
< 
< 
<       }
<     }
<     if (pending_sep) {
<       if (align_tabs) {
<         {
< 
<         }
<       }
<       {
<                              
<       }
<     }
<            
<   }
< }
< static char const *print_line_middle(char const *beg, char const *lim, char const *line_color,
<                                      char const *match_color) {
<   size_t match_size;
<   size_t match_offset;
<   char const *cur;
<   char const *mid;
<   char const *b;
<   int tmp;
< 
<   {
<               
<                                     
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if ((unsigned long)cur < (unsigned long)lim) {
<           {
<                                                                                                 
<           }
<           if (!(match_offset != 0xffffffffffffffffUL)) {
<                              
<           }
<         } else {
< 
<         }
<                                
<         if ((unsigned long)b == (unsigned long)lim) {
< 
<         }
<         if (match_size == 0UL) {
< 
< 
< 
< 
<         } else {
<           if (only_matching) {
<             if (out_invert) {
< 
<             } else {
<                         
<             }
<             {
<                                            
<             }
<           } else {
<             {
<                                        
<             }
<             if (mid) {
< 
< 
<             }
<             {
<                                                                                                 
<                                                                                     
<             }
<           }
<           {
<                                          
<                                                                                             
<                                                                            
<                                        
<           }
<           if (only_matching) {
<             {
<                                                                                                        
<             }
<           }
<         }
<                              
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<     if (only_matching) {
<                 
<     } else {
<       if (mid) {
< 
<       }
<     }
<                  
<   }
< }
< static char const *print_line_tail(char const *beg, char const *lim, char const *line_color) {
21160,21178d13811
< }
< static void prline(char const *beg, char const *lim, int sep) {
<   int matching;
<   char const *line_color;
<   char const *match_color;
<   int tmp___0;
<   char *tmp___1;
<   int tmp___2;
<   char *__cil_tmp11;
< 
<   {
<     if (!only_matching) {
<       {
<                                        
<       }
<     }
<                                              
<     if (color_option) {
<       if (out_invert) {
21184,21299d13816
<       } else {
<                     
<       }
<       if ((sep == 58) ^ tmp___0) {
<                                          
<       } else {
< 
<       }
<       if (sep == 58) {
<                                            
<       } else {
< 
<       }
<     } else {
<                                               
<                                
<     }
<     if (only_matching) {
<       if (matching) {
<                     
<       } else {
< 
<       }
<     } else {
<     _L___1:;
<       if (color_option) {
<         if (*line_color) {
< 
<         } else {
<           if (*match_color) {
<           _L___0:;
<             if (matching) {
<               if (only_matching) {
<                 {
<                                                                              
<                 }
<               } else {
<                 if (*match_color) {
<                   {
<                                                                                
<                   }
<                 }
<               }
<             }
<             if (!only_matching) {
<               if (*line_color) {
<                 {
< 
<                 }
<               }
<             }
<           }
<         }
<       }
<     }
<     if (!only_matching) {
<       if ((unsigned long)lim > (unsigned long)beg) {
<         {
<                                                                                          
<                                                                                   
<         }
<       }
<     }
<     {
<                                         
<     }
<     if (tmp___2) {
<       {
< 
< 
< 
<       }
<     }
<                   
<     if (line_buffered) {
<       {
< 
<       }
<     }
<            
<   }
< }
< static void prpending(char const *lim) {
<   char const *nl;
<   char const *tmp;
<   size_t match_size;
<   size_t tmp___0;
< 
<   {
<     if (!lastout) {
<                                      
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (pending > 0L) {
<           if (!((unsigned long)lastout < (unsigned long)lim)) {
< 
<           }
<         } else {
<                            
<         }
<         {
<                                                                                                    
<                    
<                     
<         }
<         if (outleft) {
<           {
<                                          
<           }
<         } else {
<           {
< 
<           }
21307,21313d13823
<         }
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<            
<   }
21315,21456c13825,13864
< static _Bool used;
< static void prtext(char const *beg, char const *lim) {
<   char eol;
<   char const *p;
<   char const *bp;
<   char const *tmp;
<   intmax_t i;
<   char const *nl;
<   char const *tmp___0;
<   intmax_t n;
<   char const *nl___0;
<   char const *tmp___1;
< 
<   {
<                         
<     if (!out_quiet) {
<       if (pending > 0L) {
<         {
<                          
<         }
<       }
<     }
<             
<     if (!out_quiet) {
<       if (lastout) {
<                       
<       } else {
<                                    
<       }
<                
<                       
<       {
<         while (1) {
<         while_continue: ;/* CIL Label */;
< 
<           if (!(i < out_before)) {
<                              
<           }
<           if ((unsigned long)p > (unsigned long)bp) {
<             {
<               while (1) {
<               while_continue___0: ;/* CIL Label */;
<                     
<                 if (!((int const) * (p + -1) != (int const)eol)) {
<                                        
<                 }
<               }
<             while_break___4: ;/* CIL Label */;
<             }
<           while_break___0:;;
<           }
<               
<         }
<       while_break___3: ;/* CIL Label */;
<       }
<     while_break:;;
<       if (0L <= out_before) {
<                 
<       } else {
<         if (0L <= out_after) {
<         _L:;
<           if (used) {
<             if ((unsigned long)p != (unsigned long)lastout) {
<               if (group_separator) {
<                 {
<                                              
<                                                                                                                      
<                                            
<                                                
<                 }
<               }
<             }
<           }
<         }
<       }
<       {
<         while (1) {
<         while_continue___1: ;/* CIL Label */;
< 
<           if (!((unsigned long)p < (unsigned long)beg)) {
<                                  
<           }
<           {
<                                                                                          
<                          
<                  
<                                
<                    
<           }
<         }
<       while_break___5: ;/* CIL Label */;
<       }
<     while_break___1:;;
<     }
<     if (out_invert) {
<                       
<       {
<         while (1) {
<         while_continue___2: ;/* CIL Label */;
< 
<           if ((unsigned long)p < (unsigned long)lim) {
<             if (!(n < outleft)) {
< 
<             }
<           } else {
<                                  
<           }
<           {
<                                                                                          
<                              
<                      
<           }
<           if (!out_quiet) {
<             {
<                                      
<             }
<           }
<                      
<               
<         }
<       while_break___6: ;/* CIL Label */;
<       }
<     while_break___2:;;
<     } else {
<       if (!out_quiet) {
<         {
<                                 
<         }
<       }
<                       
<               
<     }
<                                                         
<     if (out_quiet) {
<                             
<     } else {
<                           
<     }
<                     
<                  
<            
<   }
---
> static struct dfa_ctype const prednames[13] =
>     {{"alpha", &isalpha, (_Bool)0},
>      {"upper", &isupper, (_Bool)0},
>      {"lower", &islower, (_Bool)0},
>      {"digit", &isdigit, (_Bool)1},
>      {"xdigit", &isxdigit, (_Bool)0},
>      {"space", &isspace, (_Bool)0},
>      {"punct", &ispunct, (_Bool)0},
>      {"alnum", &isalnum, (_Bool)0},
>      {"print", &isprint, (_Bool)0},
>      {"graph", &isgraph, (_Bool)0},
>      {"cntrl", &iscntrl, (_Bool)0},
>      {"blank", &isblank, (_Bool)0},
>      {(char const *)((void *)0), (predicate *)((void *)0), (_Bool)0}};
> static struct dfa_ctype const *__attribute__((__pure__)) find_pred(char const *str) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
21458,21465c13866,13867
< static size_t do_execute(char const *buf, size_t size, size_t *match_size, char const *start_ptr) {
<   size_t result;
<   char const *line_next;
<   size_t tmp;
<   size_t tmp___0;
<   char const *line_buf;
<   char const *line_end;
<   char const *tmp___1;
---
> static charclass zeroclass;
> static token parse_bracket_exp(void) {
21467,21468d13868
<   {
<     if ((unsigned long)execute == (unsigned long)(&Fexecute)) {
21470,21472d13869
<     } else {
<       if ((unsigned long)execute == (unsigned long)(&Pexecute)) {
<       _L : {;
21474,21476d13870
<       }
<         if (tmp___0 == 1UL) {
<           {
21478d13871
<           }
21480d13872
<         } else {
21487,21494d13878
<         }
<       } else {
<         {
<                                                              
<         }
<                      
<       }
<     }
21496d13879
<     {
21527,21529d13909
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
21531,21856d13910
<   }
< }
< static intmax_t grepbuf(char const *beg, char const *lim) {
<   intmax_t outleft0;
<   char const *p;
<   char const *endp;
<   size_t match_size;
<   size_t match_offset;
<   size_t tmp;
<   char const *b;
<   char const *prbeg;
<   char const *tmp___0;
<   char const *prend;
<   char const *tmp___1;
< 
<   {
<                        
<             
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
< 
<         if (!((unsigned long)p < (unsigned long)lim)) {
<                            
<         }
<         {
<                                                                                          
<                              
<         }
<         if (match_offset == 0xffffffffffffffffUL) {
<           if (!out_invert) {
<                              
<           }
<                                            
<                                  
<         }
<                              
<                               
<         if (!out_invert) {
<           if ((unsigned long)b == (unsigned long)lim) {
< 
<           }
<         }
<         if (!out_invert) {
<                       
<         } else {
<           if ((unsigned long)p < (unsigned long)b) {
<           _L___0:;
<             if (out_invert) {
<                           
<             } else {
<                           
<             }
<                             
<             if (out_invert) {
<                           
<             } else {
<                              
<             }
<             {
<                               
<                                    
<             }
<             if (!outleft) {
<                       
<             } else {
<               if (done_on_match) {
<               _L:;
<                 if (exit_on_match) {
<                   {
<                             
<                   }
<                 }
<                                  
<               }
<             }
<           }
<         }
<                  
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<                                 
<   }
< }
< static intmax_t grep(int fd, struct stat const *st) {
<   intmax_t nlines;
<   intmax_t i;
<   int not_text;
<   size_t residue;
<   size_t save;
<   char oldc;
<   char *beg;
<   char *lim;
<   char eol;
<   int tmp;
<   int *tmp___0;
<   int tmp___1;
<   int tmp___2;
<   int tmp___3;
<   intmax_t tmp___4;
<   int *tmp___5;
<   int tmp___6;
<   char *tmp___7;
<   intmax_t tmp___8;
<   char *tmp___9;
<   char *__cil_tmp25;
< 
<   {
<     {
<                           
<                           
<     }
<     if (!tmp) {
< 
<     }
<     {
<                              
<                                 
<                              
<                           
<                                   
<                             
<                            
<                           
<                        
<                                   
<     }
<     if (!tmp___1) {
<       {
<                                      
<                                                
<       }
<                            
<     }
<     if ((unsigned int)binary_files == 0U) {
<       if (!out_quiet) {
<                 
<       } else {
<                     
<       }
<     } else {
<     _L___0:;
<       if ((unsigned int)binary_files == 2U) {
<       _L : {;
<                                                                                      
<                                      
<       }
<         if (tmp___2) {
<                       
<         } else {
<                       
<         }
<       } else {
<                     
<       }
<     }
<                        
<     if (not_text) {
<       if ((unsigned int)binary_files == 2U) {
< 
<       }
<     }
<                               
<                           
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
<                                       
<         if (lastout) {
<                                          
<         }
<                             
<         if ((unsigned long)beg == (unsigned long)buflim) {
<                            
<         }
<         {
<                              
<                             
<                                                                                                   
<                 
<                              
<         }
<         if ((unsigned long)lim == (unsigned long)beg) {
<                               
<         }
<                        
<                                          
<         if ((unsigned long)beg < (unsigned long)lim) {
<           if (outleft) {
<             {
<                                                                       
<                                 
<             }
<           }
<           if (pending) {
<             {
<                                            
<             }
<           }
<           if (!outleft) {
<             if (!pending) {
< 
<             } else {
<                           
<             }
<           } else {
<           _L___1:;
<             if (nlines) {
<               if (done_on_match) {
<                                  
<               }
<             }
<           }
<         }
<                         
<                   
<         {
<           while (1) {
<           while_continue___0: ;/* CIL Label */;
< 
<             if (i < out_before) {
<               if ((unsigned long)beg > (unsigned long)bufbeg) {
<                 if (!((unsigned long)beg != (unsigned long)lastout)) {
< 
<                 }
<               } else {
< 
<               }
<             } else {
<                                    
<             }
<                 
<             {
<               while (1) {
<               while_continue___1: ;/* CIL Label */;
<                       
<                 if (!((int)*(beg + -1) != (int)eol)) {
<                                        
<                 }
<               }
<             while_break___4: ;/* CIL Label */;
<             }
<           while_break___1:;;
<           }
<         while_break___3: ;/* CIL Label */;
<         }
<       while_break___0:;;
<         if ((unsigned long)beg != (unsigned long)lastout) {
<                                     
<         }
<                                                
<         if (out_byte) {
<           {
< 
<           }
<         }
<         if (out_line) {
<           {
<                                       
<           }
<         }
<         {
<                                       
<         }
<         if (!tmp___6) {
<           {
< 
< 
<           }
< 
<         }
<       }
<     while_break___2: ;/* CIL Label */;
<     }
<   while_break:;;
<     if (residue) {
<                        
<                
<                      
<       if (outleft) {
<         {
<                                                                                              
<                             
<         }
<       }
<       if (pending) {
<         {
<                                           
<         }
<       }
<     }
<   finish_grep:;
<                               
<                           
<     if (not_text & ~out_quiet) {
<       if (nlines != 0L) {
<         {
<                                                         
<                                                                                     
<         }
<       }
<     }
<                     
<   }
< }
< static int grepdirent(FTS *fts, FTSENT *ent, int command_line) {
<   int follow;
<   int dirdesc;
<   struct stat *st;
<   int tmp;
<   int tmp___0;
<   int tmp___1;
<   char *tmp___2;
<   char *tmp___3;
<   struct stat st1;
<   int flag;
<   int tmp___4;
<   int *tmp___5;
<   int tmp___6;
<   int tmp___7;
<   int tmp___8;
<   void *__cil_tmp22;
<   char *__cil_tmp23;
<   char *__cil_tmp24;
21858,21872d13911
<   {
<                         
<                                          
<     if ((int)ent->fts_info == 6) {
<       if ((unsigned int)directories == 3U) {
<         if (command_line) {
<                                            
<         }
<       }
<                  
<     }
<     if ((int)ent->fts_info == 1) {
<               
<     } else {
<       if ((int)ent->fts_info == 2) {
21874,21875d13912
<       } else {
<         if ((int)ent->fts_info == 4) {
21877,21901d13913
<         } else {
<                   
<         }
<       }
<     }
<     {
<                                                                                
<     }
<     if (tmp___0) {
<       {
<                              
<       }
<                  
<     }
<                                                                    
<     if (fts->fts_options & 2) {
<                   
<     } else {
<       if (fts->fts_options & 1) {
<         if (command_line) {
<                       
<         } else {
<                       
<         }
<       } else {
21903,21909d13914
<       }
<     }
<                      
<     if ((int)ent->fts_info == 1) {
<                   
<     }
<     if ((int)ent->fts_info == 2) {
21911,21912d13915
<     }
<     if ((int)ent->fts_info == 4) {
21914,21915d13916
<     }
<     if ((int)ent->fts_info == 7) {
21917,21918d13917
<     }
<     if ((int)ent->fts_info == 10) {
21920,21921d13918
<     }
<     if ((int)ent->fts_info == 3) {
21923,21929d13919
<     }
<     if ((int)ent->fts_info == 11) {
<                   
<     }
<     if ((int)ent->fts_info == 8) {
<                   
<     }
21940,21945d13929
<   case_1:;
<     if ((unsigned int)directories == 3U) {
<                                     
<                  
<     }
<     {
21947d13930
<     }
21949d13931
<   case_2:;
21958d13939
<   case_4 : {;
21960d13940
<   }
21962,21963d13941
<   case_3:;
<     if ((unsigned int)devices == 2U) {
21965,21969d13942
<     } else {
<       if ((unsigned int)devices == 0U) {
<         if (!command_line) {
<         _L:;
<           if (!st->st_mode) {
21975d13947
<             {
21979d13950
<             }
21988,21992d13958
<           }
<           {
<                                                   
<           }
<           if (tmp___7) {
21994,22001d13959
<           }
<         }
<       }
<     }
<                       
<   case_8:;
<                       
<   case_12:;
22003d13960
<   switch_default : {;
22005,22050d13961
<   }
<   switch_break:;;
<     if ((fts->fts_options & 516) == 512) {
<                                 
<     } else {
<                      
<     }
<     {
<                                                                                         
<     }
<                      
<   }
< }
< static int grepfile(int dirdesc, char const *name, int follow, int command_line) {
<   int desc;
<   int tmp;
<   int tmp___0;
<   int *tmp___1;
<   int *tmp___2;
<   int *tmp___3;
<   int tmp___4;
< 
<   {
<     if (follow) {
<               
<     } else {
<                    
<     }
<     {
<                                                  
<                      
<     }
<     if (desc < 0) {
<       if (follow) {
<         {
<                                        
<                                                  
<         }
<       } else {
<         {
<                                        
<         }
<         if (*tmp___2 != 40) {
<           {
< 
<           }
22057,22189d13967
<         }
<       }
<                  
<     }
<     {
<                                              
<     }
<                      
<   }
< }
< static int grepdesc(int desc, int command_line) {
<   intmax_t count;
<   int status;
<   struct stat st;
<   int *tmp;
<   int tmp___0;
<   int tmp___1;
<   FTS *fts;
<   FTSENT *ent;
<   int opts;
<   int tmp___2;
<   char *fts_arg[2];
<   int *tmp___3;
<   int tmp___4;
<   int tmp___5;
<   int *tmp___6;
<   int *tmp___7;
<   int *tmp___8;
<   int tmp___9;
<   int tmp___10;
<   char const *tmp___11;
<   char *tmp___12;
<   int tmp___13;
<   off_t required_offset;
<   off_t tmp___14;
<   int *tmp___15;
<   __off_t tmp___16;
<   int *tmp___17;
<   int tmp___18;
<   void *__cil_tmp34;
<   void *__cil_tmp35;
<   char *__cil_tmp36;
< 
<   {
<     {
<                  
<                                  
<     }
<     if (tmp___0 != 0) {
<       {
< 
< 
<       }
< 
<     }
<     if (desc != 0) {
<       if (command_line) {
<         {
<                                                                                
<         }
<         if (tmp___1) {
< 
<         }
<       }
<     }
<     if (desc != 0) {
<       if ((unsigned int)directories == 3U) {
<         if ((st.st_mode & 61440U) == 16384U) {
<           if (command_line) {
<                         
<           } else {
< 
<           }
<           {
<                                           
<                                   
<           }
<           if (tmp___4 != 0) {
<             {
< 
< 
<             }
<           }
<           {
<                                           
<                                              
<                                                                                                                    
<           }
<           if (!fts) {
<             {
< 
<             }
<           }
<           {
<             while (1) {
<             while_continue: ;/* CIL Label */;
<               {
<                                     
<               }
<               if (!ent) {
<                                  
<               }
<               {
<                                                              
<                                   
<               }
<             }
<           while_break___0: ;/* CIL Label */;
<           }
<         while_break : {;
<                                        
<         }
<           if (*tmp___7) {
<             {
< 
< 
<             }
<           }
<           {
<                                      
<           }
<           if (tmp___9 != 0) {
<             {
< 
< 
<             }
<           }
<                           
<         }
<       }
<     }
<     if (desc != 0) {
<       if ((unsigned int)directories == 4U) {
22195,22218d13972
<       } else {
<       _L___0:;
<         if ((unsigned int)devices == 2U) {
< 
<         } else {
<           if ((unsigned int)devices == 0U) {
<             if (!command_line) {
<             _L : {;
<                                                     
<             }
<               if (tmp___10) {
< 
<               }
<             }
<           }
<         }
<       }
<     }
<     if (!out_quiet) {
<       if (list_files == 0) {
<         if (1L < max_count) {
<           if ((out_stat.st_mode & 61440U) == 32768U) {
<             if (out_stat.st_ino) {
<               if (st.st_ino == out_stat.st_ino) {
22230,22286d13983
<               }
<             }
<           }
<         }
<       }
<     }
<     {
<                               
<     }
<     if (!tmp___13) {
<       {
<                                  
<       }
<     }
<     {
<                                                      
<     }
<     if (count < 0L) {
< 
<     } else {
<       if (count_matches) {
<         if (out_file) {
<           {
<                              
<           }
<           if (filename_mask) {
<             {
<                                    
<             }
<           } else {
<             {
< 
<             }
<           }
<         }
<         {
<                                                                   
<         }
<       }
<                       
<       if (list_files == 1 - 2 * status) {
<         {
<                            
<                                                      
<         }
<       }
<       if (desc == 0) {
<         if (outleft) {
<                                
<         } else {
< 
<         }
<                                    
<         if (required_offset != bufoffset) {
<           {
< 
<           }
22295,22389d13991
<         }
<       }
<     }
<   closeout:;
<     if (desc != 0) {
<       {
<                                
<       }
<       if (tmp___18 != 0) {
<         {
< 
< 
<         }
<       }
<     }
<                     
<   }
< }
< static int grep_command_line_arg(char const *arg) {
<   char *tmp;
<   int tmp___0;
<   int tmp___1;
<   int tmp___2;
<   char *__cil_tmp7;
< 
<   {
<     {
<                                  
<     }
<     if (tmp___2 == 0) {
<       if (label) {
< 
<       } else {
<         {
<                                             
<                                        
<         }
<       }
<       {
<                                  
<       }
<                        
<     } else {
<       {
<                        
<                                             
<       }
<                        
<     }
<   }
< }
< __attribute__((__noreturn__)) void usage(int status);
< void usage(int status) {
<   char *tmp;
<   char *tmp___0;
<   char *tmp___1;
<   char *tmp___2;
<   char *tmp___3;
<   char *tmp___4;
<   char *tmp___5;
<   char *tmp___6;
<   char *tmp___7;
<   char *tmp___8;
<   char *tmp___9;
<   char *tmp___10;
<   char *tmp___11;
<   char *tmp___12;
<   char *tmp___13;
<   char *tmp___14;
<   char *tmp___15;
<   char *tmp___16;
<   char *tmp___17;
<   char *tmp___18;
<   char *tmp___19;
<   char *__cil_tmp44;
<   char *__cil_tmp45;
<   char *__cil_tmp46;
<   char *__cil_tmp47;
<   char *__cil_tmp48;
<   char *__cil_tmp49;
<   char *__cil_tmp50;
<   char *__cil_tmp51;
<   char *__cil_tmp52;
<   char *__cil_tmp53;
<   char *__cil_tmp54;
<   char *__cil_tmp55;
<   char *__cil_tmp56;
<   char *__cil_tmp57;
<   char *__cil_tmp58;
<   char *__cil_tmp59;
<   char *__cil_tmp60;
<   char *__cil_tmp61;
<   char *__cil_tmp62;
<   char *__cil_tmp63;
<   char *__cil_tmp64;
22391,22402d13992
<   {
<     if (status != 0) {
<       {
<                                                                    
<                                                                                                        
<                               
<                                                                        
<                                                                                                            
<                               
<       }
<     } else {
<       {
22441,22448d14030
<       }
<     }
<     {
<                    
<     }
<   }
< }
< static void Gcompile(char const *pattern, size_t size) {
22450,22457d14031
<   {
<     {
<                                                                                                                                                                                                                                                                                                                                                                                                                     
<     }
<            
<   }
< }
< static void Ecompile(char const *pattern, size_t size) {
22459,22466d14032
<   {
<     {

<     }
<            
<   }
< }
< static void Acompile(char const *pattern, size_t size) {
22474,22475d14039
< }
< static void GAcompile(char const *pattern, size_t size) {
22483,22484d14046
< }
< static void PAcompile(char const *pattern, size_t size) {
22492,22530d14053
< }
< static struct matcher const matchers[8] =
<     {{{(char const)'g', (char const)'r', (char const)'e', (char const)'p',
<        (char const)'\000'},
<       &Gcompile,
<       &EGexecute},
<      {{(char const)'e', (char const)'g', (char const)'r', (char const)'e',
<        (char const)'p', (char const)'\000'},
<       &Ecompile,
<       &EGexecute},
<      {{(char const)'f', (char const)'g', (char const)'r', (char const)'e',
<        (char const)'p', (char const)'\000'},
<       &Fcompile,
<       &Fexecute},
<      {{(char const)'a', (char const)'w', (char const)'k', (char const)'\000'},
<       &Acompile,
<       &EGexecute},
<      {{(char const)'g', (char const)'a', (char const)'w', (char const)'k',
<        (char const)'\000'},
<       &GAcompile,
<       &EGexecute},
<      {{(char const)'p', (char const)'o', (char const)'s', (char const)'i',
<        (char const)'x', (char const)'a', (char const)'w', (char const)'k',
<        (char const)'\000'},
<       &PAcompile,
<       &EGexecute},
<      {{(char const)'p', (char const)'e', (char const)'r', (char const)'l',
<        (char const)'\000'},
<       &Pcompile,
<       &Pexecute},
<      {{(char const)'\000'}, (void (*)(char const *, size_t))((void *)0), (size_t(*)(char const *, size_t, size_t *, char const *))((void *)0)}};
< static void setmatcher(char const *m) {
<   struct matcher const *p;
<   char *tmp;
<   int tmp___0;
<   int tmp___1;
<   char *tmp___2;
<   char *__cil_tmp9;
<   char *__cil_tmp10;
22532,22534d14054
<   {
<     if (matcher) {
<       {
22536d14055
<       }
22543,22547d14061
<     }
<                  
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
22549d14062
<         if (!p->compile) {
22551,22565d14063
<         }
<         {
<                                                        
<         }
<         if (tmp___1 == 0) {
<                                             
<                                                                
<                                                                                         
<                  
<         }
<             
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break : {;
22568d14065
<   }
22570,22572d14066
<   }
< }
< static size_t prepend_args(char const *options, char *buf, char **argv) {
22656,22671d14149
< }
< static int prepend_default_options(char const *options, int *pargc, char ***pargv) {
<   char *buf;
<   size_t tmp;
<   char *tmp___0;
<   size_t prepended;
<   size_t tmp___1;
<   int argc;
<   char *const *argv;
<   char **pp;
<   char **tmp___2;
<   char *const *tmp___3;
<   size_t tmp___4;
<   char **tmp___5;
<   char *tmp___6;
<   char *const *tmp___7;
22673,22676d14150
<   {
<     if (options) {
<       if (*options) {
<         {
22684d14157
<         }
22690d14162
<         {
22701,22702d14172
<         }
<         {
22717,22719d14186
<         while_break___0: ;/* CIL Label */;
<         }
<       while_break:;;
22721,22736d14187
<       }
<     }
<                
<   }
< }
< static int get_nondigit_option(int argc, char *const *argv, intmax_t *default_context);
< static int prev_digit_optind = -1;
< static int get_nondigit_option(int argc, char *const *argv, intmax_t *default_context) {
<   int this_digit_optind;
<   int was_digit;
<   char buf[((((sizeof(intmax_t) * 8UL - 1UL) * 146UL + 484UL) / 485UL + 1UL) + 1UL) + 4UL];
<   char *p;
<   int opt;
<   char *tmp;
<   void *__cil_tmp12;
<   char *__cil_tmp13;
22738,22755d14188
<   {
<             
<                   
<                                
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
<         {
<                                                                                               
<                                                 
<         }
<         if (48 <= opt) {
<           if (!(opt <= 57)) {
<                              
<           }
<         } else {
<                            
<         }
22778,22783d14210
<       }
<     while_break___0: ;/* CIL Label */;
<     }
<   while_break:;;
<     if ((unsigned long)p != (unsigned long)(buf)) {
<       {
22786,22801d14212
<       }
<     }
<                  
<   }
< }
< static void parse_grep_colors(void) {
<   char const *p;
<   char *q;
<   char *name;
<   char *val;
<   char c;
<   struct color_cap const *cap;
<   char *tmp;
<   int tmp___0;
<   char *tmp___1;
<   char *__cil_tmp12;
22803,22809d14213
<   {
<     {
<                                               
<     }
<     if ((unsigned long)p == (unsigned long)((void *)0)) {
<              
<     } else {
22813,22814d14216
<     }
<     {
22818,22819d14219
<     }
<     {
22901,22902d14300
<     while_break: ;/* CIL Label */;
<     }
22905,22907d14302
<   }
< }
< static _Bool contains_encoding_error(char const *pat, size_t patlen) {
22937,22939d14331
< }
< static void fgrep_to_grep_pattern(size_t len, char const *keys, size_t *new_len,
<                                   char **new_keys) {
23013,23096d14404
< }
< int main(int argc, char **argv) {
<   char *keys;
<   size_t keycc;
<   size_t oldcc;
<   size_t keyalloc;
<   int with_filenames;
<   size_t cc;
<   int opt;
<   int status;
<   int prepended;
<   int prev_optind;
<   int last_recursive;
<   int fread_errno;
<   intmax_t default_context;
<   FILE *fp;
<   char *tmp;
<   char *tmp___0;
<   int tmp___1;
<   int tmp___2;
<   ptrdiff_t tmp___3;
<   size_t tmp___4;
<   FILE *tmp___6;
<   int tmp___7;
<   int *tmp___8;
<   int *tmp___9;
<   int tmp___10;
<   size_t tmp___11;
<   strtol_error tmp___12;
<   char *tmp___13;
<   char *tmp___14;
<   int tmp___15;
<   int tmp___16;
<   int tmp___17;
<   int tmp___18;
<   int tmp___19;
<   int tmp___20;
<   int tmp___21;
<   int tmp___22;
<   int tmp___23;
<   int tmp___24;
<   int tmp___25;
<   int tmp___26;
<   int tmp___27;
<   int *tmp___28;
<   int tmp___29;
<   int tmp___30;
<   int tmp___31;
<   int tmp___32;
<   char *userval;
<   char *tmp___33;
<   char *tmp___34;
<   char const *tmp___35;
<   struct stat tmp_stat;
<   int tmp___36;
<   int tmp___37;
<   size_t new_keycc;
<   char *new_keys;
<   size_t tmp___38;
<   _Bool tmp___39;
<   size_t tmp___40;
<   int tmp___41;
<   int tmp___42;
<   int tmp___43;
<   void *__cil_tmp89;
<   char *__cil_tmp90;
<   char *__cil_tmp91;
<   char *__cil_tmp92;
<   char *__cil_tmp93;
<   char *__cil_tmp94;
<   char *__cil_tmp95;
<   char *__cil_tmp96;
<   char *__cil_tmp97;
<   char *__cil_tmp98;
<   char *__cil_tmp99;
<   char *__cil_tmp100;
<   char *__cil_tmp101;
<   char *__cil_tmp102;
<   char *__cil_tmp103;
<   char *__cil_tmp104;
<   char *__cil_tmp105;
<   char *__cil_tmp106;
<   char *__cil_tmp107;
<   char *__cil_tmp108;
23098,23143d14405
<   {
<     {
<                                      
<                                                   
<                                                
<                                  
<                         
<                          
<                                     
<                          
<                                        
<                                 
<                              
<                                      
<                         
<                        
<                                                         
<                          
<                                      
<                                
<                          
<                                    
<                                                                            
<                                                                     
<                                                                                              
<     }
<     {
<       while (1) {
<       while_continue: ;/* CIL Label */;
<         {
<                                
<                                                                                  
<         }
<         if (!(opt != -1)) {
<                            
<         }
<         if (opt == 65) {
<                        
<         }
<         if (opt == 66) {
<                        
<         }
<         if (opt == 67) {
<                        
<         }
<         if (opt == 68) {
23145,23149d14406
<         }
<         if (opt == 69) {
<                        
<         }
<         if (opt == 70) {
23151,23152d14407
<         }
<         if (opt == 80) {
23154,23155d14408
<         }
<         if (opt == 71) {
23157,23158d14409
<         }
<         if (opt == 88) {
23160,23164d14410
<         }
<         if (opt == 72) {
<                        
<         }
<         if (opt == 73) {
23166,23167d14411
<         }
<         if (opt == 84) {
23169,23170d14412
<         }
<         if (opt == 85) {
23172,23173d14413
<         }
<         if (opt == 117) {
23175,23176d14414
<         }
<         if (opt == 86) {
23178,23179d14415
<         }
<         if (opt == 97) {
23181,23182d14416
<         }
<         if (opt == 98) {
23184,23188d14417
<         }
<         if (opt == 99) {
<                        
<         }
<         if (opt == 100) {
23190,23203d14418
<         }
<         if (opt == 101) {
<                         
<         }
<         if (opt == 102) {
<                         
<         }
<         if (opt == 104) {
<                         
<         }
<         if (opt == 105) {
<                         
<         }
<         if (opt == 121) {
23205,23230d14419
<         }
<         if (opt == 76) {
<                        
<         }
<         if (opt == 108) {
<                         
<         }
<         if (opt == 109) {
<                         
<         }
<         if (opt == 110) {
<                         
<         }
<         if (opt == 111) {
<                         
<         }
<         if (opt == 113) {
<                         
<         }
<         if (opt == 82) {
<                        
<         }
<         if (opt == 114) {
<                         
<         }
<         if (opt == 115) {
23232,23242d14420
<         }
<         if (opt == 118) {
<                         
<         }
<         if (opt == 119) {
<                         
<         }
<         if (opt == 120) {
<                         
<         }
<         if (opt == 90) {
23244,23248d14421
<         }
<         if (opt == 122) {
<                         
<         }
<         if (opt == 128) {
23250,23254d14422
<         }
<         if (opt == 129) {
<                         
<         }
<         if (opt == 131) {
23256,23260d14423
<         }
<         if (opt == 130) {
<                         
<         }
<         if (opt == 132) {
23262,23266d14424
<         }
<         if (opt == 135) {
<                         
<         }
<         if (opt == 136) {
23268,23269d14425
<         }
<         if (opt == 133) {
23271,23272d14426
<         }
<         if (opt == 134) {
23274,23275d14427
<         }
<         if (opt == 0) {
23277,23291d14428
<         }
<                                 
<       case_65 : {;
<                                                              
<       }
<                           
<       case_66 : {;
<                                                               
<       }
<                           
<       case_67 : {;
<                                                                    
<       }
<                           
<       case_68 : {;
23293d14429
<       }
23310,23314d14445
<       case_69 : {;
<                             
<       }
<                           
<       case_70 : {;
23316d14446
<       }
23318d14447
<       case_80 : {;
23320d14448
<       }
23322d14449
<       case_71 : {;
23324d14450
<       }
23326d14451
<       case_88 : {;
23328d14452
<       }
23330,23334d14453
<       case_72:;
<                            
<                          
<                           
<       case_73:;
23337d14455
<       case_84:;
23340d14457
<       case_85 : {;
23342d14458
<       }
23344d14459
<       case_117 : {;
23346d14460
<       }
23348d14461
<       case_86:;
23351d14463
<       case_97:;
23354d14465
<       case_98:;
23357,23360d14467
<       case_99:;
<                           
<                           
<       case_100 : {;
23365d14471
<       }
23370,23383d14475
<       case_101 : {;
<                                           
<                                                                   
<                                                                                                                  
<                     
<                         
<                 
<                                        
<       }
<                           
<       case_102 : {;
<                                                     
<       }
<         if (tmp___7 == 0) {
23385,23392d14476
<         } else {
<           {
<                                                                                                                           
<                          
<           }
<         }
<         if (!fp) {
<           {
23395,23400d14478
<           }
<         }
<                              
<         {
<           while (1) {
<           while_continue___0: ;/* CIL Label */;
23402,23438d14479
<             if (!(keyalloc <= keycc + 1UL)) {
<                                    
<             }
<                             
<           }
<         while_break___4: ;/* CIL Label */;
<         }
<       while_break___0 : {;
<                                                         
<                       
<       }
<         {
<           while (1) {
<           while_continue___1: ;/* CIL Label */;
<             {
<                                                                                                 
<                                                                                            
<             }
<             if (!(cc != 0UL)) {
<                                    
<             }
<                         
<             if (keycc == keyalloc - 1UL) {
<               {
<                                                                                   
<               }
<             }
<           }
<         while_break___5: ;/* CIL Label */;
<         }
<       while_break___1 : {;
<                                      
<                                
<                                        
<       }
<         if (tmp___10) {
<           {
23440,23448d14480
<           }
<         }
<         if ((unsigned long)fp != (unsigned long)stdin) {
<           {
<                        
<           }
<         }
<         if (oldcc != keycc) {
<           if ((int)*(keys + (keycc - 1UL)) != 10) {
23452,23473d14483
<           }
<         }
<                           
<       case_104:;
<                            
<                          
<                           
<       case_105:;
<                         
<                           
<       case_76:;
<                         
<                           
<       case_108:;
<                        
<                           
<       case_109 : {;
<                                                                                     
<       }
<         if ((unsigned int)tmp___12 == 0U) {
<                       
<         }
23478,23480d14487
<       case_0:;
<                               
<       switch_default : {;
23483,23502d14489
<       }
<       switch_break___0:;;
<                           
<       case_110:;
<                      
<                           
<       case_111:;
<                           
<                           
<       case_113:;
<                           
<                                        
<                           
<       case_82:;
<                           
<       case_114:;
<                                                
<                                      
<                           
<       case_115:;
23505,23514d14491
<       case_118:;
<                               
<                           
<       case_119:;
<                         
<                           
<       case_120:;
<                         
<                           
<       case_90:;
23517,23520d14493
<       case_122:;
<                                         
<                           
<       case_128 : {;
23522d14494
<       }
23546,23552d14517
<       case_129:;
<         if (optarg) {
<           {
<                                                                   
<           }
<           if (tmp___24) {
<             {
23554d14518
<             }
23609,23624d14572
<           } else {
<                              
<           }
<         } else {
<                            
<         }
<                           
<       case_131:;
<         if (!excluded_patterns) {
<           {
<                                               
<           }
<         }
<         if (opt == 130) {
<                              
<         } else {
23626,23631d14573
<         }
<         {
<                                                                                      
<         }
<                           
<       case_132:;
23637d14578
<         {
23640d14580
<         }
23648,23658d14587
<       case_135:;
<         if (!excluded_directory_patterns) {
<           {
<                                                         
<           }
<         }
<         {
<                                                                                   
<         }
<                           
<       case_136:;
23661d14589
<       case_133:;
23664d14591
<       case_134:;
23667d14593
<       case_0___0:;
23669,23683d14594
<       switch_default___0 : {;
<                  
<       }
<                           
<       switch_break:;;
<       }
<     while_break___3: ;/* CIL Label */;
<     }
<   while_break:;;
<     if (color_option == 2) {
<       {
<                              
<       }
<       if (tmp___30) {
<         {
23685d14595
<         }
23691,23729d14600
<       } else {
<                      
<       }
<                               
<     }
<     {
<                       
<     }
<     if (exit_on_match) {
<                      
<     }
<     if (exit_on_match | list_files) {
<                         
<                         
<     }
<                                               
<     if (out_after < 0L) {
<                                   
<     }
<     if (out_before < 0L) {
<                                    
<     }
<     if (color_option) {
<       {
<                                         
<                            
<       }
<       if ((unsigned long)userval != (unsigned long)((void *)0)) {
<         if ((int)*userval != 0) {
<                                                       
<                                                      
<         }
<       }
<       {
<                             
<       }
<     }
<     if (show_version) {
<       {
23734,23737d14604
<       }
<     }
<     if (show_help) {
<       {
23739,23750d14605
<       }
<     }
<     {
<                                      
<     }
<     if (tmp___36 == 0) {
<       if ((tmp_stat.st_mode & 61440U) == 32768U) {
<                             
<       }
<     }
<     if (keys) {
<       if (keycc == 0UL) {
23754,23772d14608
<       } else {
<                 
<       }
<     } else {
<       if (optind < argc) {
<         {
<                                                          
<                             
<                    
<                                                                                 
<         }
<       } else {
<         {
<                    
<         }
<       }
<     }
<     if ((unsigned long)compile == (unsigned long)(&Fcompile)) {
<       {
23774d14609
<       }
23795,23811d14629
<     }
<     {
<                                           
<     }
<     if (tmp___40 > 1UL) {
<       {
<                              
<       }
<     }
<     {
<                                             
<                          
<     }
<     if (argc - optind > 1) {
<       if (!no_filenames) {
<                      
<       } else {
23813,23829d14630
<       }
<     } else {
<     _L___0:;
<       if (with_filenames) {
<                      
<       }
<     }
<     {
<                            
<     }
<     if (!tmp___41) {
<       {
<                               
<       }
<     }
<     if (max_count == 0L) {
<       {
23831,23856d14631
<       }
<     }
<     if (fts_options & 2) {
<       if ((unsigned int)devices == 0U) {
<                                                 
<       }
<     }
<     if (optind < argc) {
<                  
<       {
<         while (1) {
<         while_continue___2: ;/* CIL Label */;
<           {
<                                                                              
<                                
<                      
<           }
<           if (!(optind < argc)) {
<                                  
<           }
<         }
<       while_break___6: ;/* CIL Label */;
<       }
<     while_break___2:;;
<     } else {
<       if ((unsigned int)directories == 3U) {
23867,23882c14642,23882
<       } else {
<         {
<                                               
<         }
<       }
<     }
<     if (errseen) {
<                    
<     } else {
<                         
<     }
<     {
<                      
<     }
<   }
< }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static token lex(void) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static token tok;
> static size_t depth;
> static void addtok_mb(token t, int mbprop) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void addtok_wc(wint_t wc);
> static void addtok(token t) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void addtok_wc(wint_t wc) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void add_utf8_anychar(void);
> static charclass const utf8_classes[5] = {{(charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0,
>                                            ((1U << 31) << 1) - 1U, ((1U << 31) << 1) - 1U, (charclass_word)0, (charclass_word)0},
>                                           {((1U << 31) << 1) - 1U, ((1U << 31) << 1) - 1U, ((1U << 31) << 1) - 1U, ((1U << 31) << 1) - 1U,
>                                            (charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0},
>                                           {(charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0,
>                                            (charclass_word)0, (charclass_word)0, 4294967292U & (((1U << 31) << 1) - 1U), (charclass_word)0},
>                                           {(charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0,
>                                            (charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)65535},
>                                           {(charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)0,
>                                            (charclass_word)0, (charclass_word)0, (charclass_word)0, (charclass_word)16711680}};
> static void add_utf8_anychar(void) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void atom(void) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static size_t __attribute__((__pure__)) nsubtoks(size_t tindex) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void copytoks(size_t tindex, size_t ntokens) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void closure(void) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void branch(void) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void regexp(void) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> void dfaparse(char const *s, size_t len, struct dfa *d) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void copy(position_set const *src, position_set *dst) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void alloc_position_set(position_set *s, size_t size) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void insert(position p, position_set *s) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void merge(position_set const *s1, position_set const *s2, position_set *m) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void delete (position p, position_set *s) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static state_num state_index(struct dfa *d, position_set const *s, int context) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void epsclosure(position_set *s, struct dfa const *d, char *visited) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int charclass_context(charclass_word *c) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int __attribute__((__pure__)) state_separate_contexts(position_set const *s) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> void dfaanalyze(struct dfa *d, int searchflag) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> void dfastate(ptrdiff_t s, struct dfa *d, ptrdiff_t *trans___0) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void realloc_trans_if_necessary(struct dfa *d, state_num new_state) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void build_state(state_num s, struct dfa *d) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void build_state_zero(struct dfa *d) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static status_transit_state transit_state_singlebyte(struct dfa *d, state_num s,
>                                                      unsigned char const *p, state_num *next_state) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int match_anychar(struct dfa *d, state_num s, position pos, wint_t wc,
>                          size_t mbclen) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int match_mb_charset(struct dfa *d, state_num s, position pos, char const *p,
>                             wint_t wc, size_t match_len) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int *check_matching_with_multibyte_ops(struct dfa *d, state_num s, char const *p,
>                                               wint_t wc, size_t mbclen) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static status_transit_state transit_state_consume_1char(struct dfa *d, state_num s,
>                                                         unsigned char const **pp,
>                                                         wint_t wc, size_t mbclen,
>                                                         int *match_lens) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static state_num transit_state(struct dfa *d, state_num s, unsigned char const **pp,
>                                unsigned char const *end) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> char *dfaexec(struct dfa *d, char const *begin, char *end, int allow_nl, size_t *count,
>               int *backref) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> struct dfa *dfasuperset(struct dfa const *d) __attribute__((__pure__));
> struct dfa *dfasuperset(struct dfa const *d) {
> 
> 
> 
> 
> }
> _Bool dfaisfast(struct dfa const *d) __attribute__((__pure__));
> _Bool dfaisfast(struct dfa const *d) {
> 
> 
> 
> 
> }
> static void free_mbdata(struct dfa *d) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> void dfainit(struct dfa *d) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void dfaoptimize(struct dfa *d) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void dfassbuild(struct dfa *d) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> void dfacomp(char const *s, size_t len, struct dfa *d, int searchflag) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> void dfafree(struct dfa *d) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static char *icatalloc(char *old, char const *new) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static char *__attribute__((__pure__)) istrstr(char const *lookin, char const *lookfor) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void freelist(char **cpp) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static char **enlist(char **cpp, char *new, size_t len) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static char **comsubs(char *left, char const *right) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static char **addlists(char **old, char **new) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static char **inboth(char **left, char **right) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static must *allocmust(must *mp) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void resetmust(must *mp) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void freemust(must *mp) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void dfamust(struct dfa *d) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> struct dfa *dfaalloc(void) {
> 
> 
> 
> 
> 
> 
> 
> 
> }
> struct dfamust *__attribute__((__pure__)) dfamusts(struct dfa const *d) {
> 
> 
> 
> 
> }
> extern __attribute__((__nothrow__)) size_t mbrlen(char const *__restrict __s,
>                                                   size_t __n, mbstate_t *__restrict __ps);
> void build_mbclen_cache(void);
> static size_t mbclen_cache[256];
> static char trans[256];
> void kwsinit(kwset_t *kwset___1) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static char *out;
> static mb_len_map_t *len_map;
> static size_t outalloc;
> char *mbtoupper(char const *beg, size_t *n, mb_len_map_t **len_map_p) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> void build_mbclen_cache(void) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> ptrdiff_t mb_goback(char const **mb_start, char const *cur, char const *end) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> wint_t mb_prev_wc(char const *buf, char const *cur, char const *end) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> wint_t mb_next_wc(char const *cur, char const *end) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> extern int fflush_unlocked(FILE *__stream);
> extern int fputc_unlocked(int __c, FILE *__stream);
> extern size_t fread_unlocked(void *__restrict __ptr, size_t __size, size_t __n,
>                              FILE *__restrict __stream);
> extern size_t fwrite_unlocked(void const *__restrict __ptr, size_t __size, size_t __n,
>                               FILE *__restrict __stream);
> extern __attribute__((__nothrow__)) __off_t lseek(int __fd, __off_t __offset, int __whence);
> extern __attribute__((__nothrow__)) int isatty(int __fd);
> extern char *optarg;
> extern int optind;
> extern __attribute__((__nothrow__)) int getpagesize(void) __attribute__((__const__));
> extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1))) atexit)(void (*__func)(void));
> extern __attribute__((__nothrow__, __noreturn__)) void exit(int __status);
> extern __attribute__((__nothrow__)) int(__attribute__((__nonnull__(1, 2))) strcasecmp)(char const *__s1,
>                                                                                        char const *__s2) __attribute__((__pure__));
> extern __attribute__((__nothrow__)) char *textdomain(char const *__domainname);
> extern __attribute__((__nothrow__)) char *bindtextdomain(char const *__domainname,
>                                                          char const *__dirname);
> extern int getopt_long(int ___argc, char *const *___argv, char const *__shortopts,
>                        struct option const *__longopts, int *__longind);
> static struct stat out_stat;
> static int show_help;
> static int show_version;
> static int suppress_errors;
> static int color_option;
> static int only_matching;
> static int align_tabs;
> static char const *group_separator = "--";
> static char const *selected_match_color = "01;31";
> static char const *context_match_color = "01;31";
> static char const *filename_color = "35";
> static char const *line_num_color = "32";
> static char const *byte_num_color = "32";
> static char const *sep_color = "36";
> static char const *selected_line_color = "";
> static char const *context_line_color = "";
> static char const *sgr_start = "\033[%sm\033[K";
> static char const *sgr_end = "\033[m\033[K";
> static void pr_sgr_start(char const *s) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void pr_sgr_end(char const *s) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void pr_sgr_start_if(char const *s) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void pr_sgr_end_if(char const *s) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void color_cap_mt_fct(void) {
> 
> 
> 
> 
> 
> }
> static void color_cap_rv_fct(void) {
> 
> 
> 
> 
> 
> }
> static void color_cap_ne_fct(void) {
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static struct color_cap const color_dict[12] =
>     {{"mt", &selected_match_color, &color_cap_mt_fct},
>      {"ms", &selected_match_color, (void (*)(void))((void *)0)},
>      {"mc", &context_match_color, (void (*)(void))((void *)0)},
>      {"fn", &filename_color, (void (*)(void))((void *)0)},
>      {"ln", &line_num_color, (void (*)(void))((void *)0)},
>      {"bn", &byte_num_color, (void (*)(void))((void *)0)},
>      {"se", &sep_color, (void (*)(void))((void *)0)},
>      {"sl", &selected_line_color, (void (*)(void))((void *)0)},
>      {"cx", &context_line_color, (void (*)(void))((void *)0)},
>      {"rv", (char const **)((void *)0), &color_cap_rv_fct},
>      {"ne", (char const **)((void *)0), &color_cap_ne_fct},
>      {(char const *)((void *)0), (char const **)((void *)0), (void (*)(void))((void *)0)}};
> static struct exclude *excluded_patterns;
> static struct exclude *excluded_directory_patterns;
> static char const short_options[58] =
>     {(char const)'0', (char const)'1', (char const)'2', (char const)'3',
>      (char const)'4', (char const)'5', (char const)'6', (char const)'7',
>      (char const)'8', (char const)'9', (char const)'A', (char const)':',
>      (char const)'B', (char const)':', (char const)'C', (char const)':',
>      (char const)'D', (char const)':', (char const)'E', (char const)'F',
>      (char const)'G', (char const)'H', (char const)'I', (char const)'P',
>      (char const)'T', (char const)'U', (char const)'V', (char const)'X',
>      (char const)':', (char const)'a', (char const)'b', (char const)'c',
>      (char const)'d', (char const)':', (char const)'e', (char const)':',
>      (char const)'f', (char const)':', (char const)'h', (char const)'i',
>      (char const)'L', (char const)'l', (char const)'m', (char const)':',
>      (char const)'n', (char const)'o', (char const)'q', (char const)'R',
>      (char const)'r', (char const)'s', (char const)'u', (char const)'v',
>      (char const)'w', (char const)'x', (char const)'y', (char const)'Z',
>      (char const)'z', (char const)'\000'};
> static struct option const long_options[50] =
>     {{"basic-regexp", 0, (int *)((void *)0), 'G'},
>      {"extended-regexp", 0, (int *)((void *)0), 'E'},
>      {"fixed-regexp", 0, (int *)((void *)0), 'F'},
>      {"fixed-strings", 0, (int *)((void *)0), 'F'},
>      {"perl-regexp", 0, (int *)((void *)0), 'P'},
>      {"after-context", 1, (int *)((void *)0), 'A'},
>      {"before-context", 1, (int *)((void *)0), 'B'},
>      {"binary-files", 1, (int *)((void *)0), 128},
>      {"byte-offset", 0, (int *)((void *)0), 'b'},
>      {"context", 1, (int *)((void *)0), 'C'},
>      {"color", 2, (int *)((void *)0), 129},
>      {"colour", 2, (int *)((void *)0), 129},
>      {"count", 0, (int *)((void *)0), 'c'},
>      {"devices", 1, (int *)((void *)0), 'D'},
>      {"directories", 1, (int *)((void *)0), 'd'},
>      {"exclude", 1, (int *)((void *)0), 131},
>      {"exclude-from", 1, (int *)((void *)0), 132},
>      {"exclude-dir", 1, (int *)((void *)0), 135},
>      {"file", 1, (int *)((void *)0), 'f'},
>      {"files-with-matches", 0, (int *)((void *)0), 'l'},
>      {"files-without-match", 0, (int *)((void *)0), 'L'},
>      {"group-separator", 1, (int *)((void *)0), 136},
>      {"help", 0, &show_help, 1},
>      {"include", 1, (int *)((void *)0), 130},
>      {"ignore-case", 0, (int *)((void *)0), 'i'},
>      {"initial-tab", 0, (int *)((void *)0), 'T'},
>      {"label", 1, (int *)((void *)0), 134},
>      {"line-buffered", 0, (int *)((void *)0), 133},
>      {"line-number", 0, (int *)((void *)0), 'n'},
>      {"line-regexp", 0, (int *)((void *)0), 'x'},
>      {"max-count", 1, (int *)((void *)0), 'm'},
>      {"no-filename", 0, (int *)((void *)0), 'h'},
>      {"no-group-separator", 0, (int *)((void *)0), 136},
>      {"no-messages", 0, (int *)((void *)0), 's'},
>      {"null", 0, (int *)((void *)0), 'Z'},
>      {"null-data", 0, (int *)((void *)0), 'z'},
>      {"only-matching", 0, (int *)((void *)0), 'o'},
>      {"quiet", 0, (int *)((void *)0), 'q'},
>      {"recursive", 0, (int *)((void *)0), 'r'},
>      {"dereference-recursive", 0, (int *)((void *)0), 'R'},
>      {"regexp", 1, (int *)((void *)0), 'e'},
>      {"invert-match", 0, (int *)((void *)0), 'v'},
>      {"silent", 0, (int *)((void *)0), 'q'},
>      {"text", 0, (int *)((void *)0), 'a'},
>      {"binary", 0, (int *)((void *)0), 'U'},
>      {"unix-byte-offsets", 0, (int *)((void *)0), 'u'},
>      {"version", 0, (int *)((void *)0), 'V'},
>      {"with-filename", 0, (int *)((void *)0), 'H'},
>      {"word-regexp", 0, (int *)((void *)0), 'w'},
>      {(char const *)0, 0, (int *)0, 0}};
> static char const *matcher;
> static char const *filename;
> static size_t filename_prefix_len;
> static int errseen;
> static int write_error_seen;
> static char const *const directories_args[4] = {(char const * /* const  */) "read", (char const * /* const  */) "recurse", (char const * /* const  */) "skip", (char const * /* const  */)((char const *)((void *)0))};
> static enum directories_type const directories_types[3] = {(enum directories_type const)2, (enum directories_type const)3, (enum directories_type const)4};
> static enum directories_type directories = (enum directories_type)2;
> static int fts_options = 793;
> static enum __anonenum_devices_71 devices = (enum __anonenum_devices_71)0;
> static int grepfile(int dirdesc, char const *name, int follow, int command_line);
> static int grepdesc(int desc, int command_line);
> static void dos_binary(void);
> static void dos_unix_byte_offsets(void);
> static int undossify_input(char *buf, size_t buflen);
> static int is_device_mode(mode_t m) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int usable_st_size(struct stat const *st) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void (*compile)(char const *, size_t);
> static size_t (*execute)(char const *, size_t, size_t *, char const *);
> static void suppressible_error(char const *mesg, int errnum) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void clean_up_stdout(void) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int file_is_binary(char const *buf, size_t bufsize, int fd, struct stat const *st) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void context_length_arg(char const *str, intmax_t *out___0) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int skipped_file(char const *name, int command_line, int is_dir) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static char *buffer;
> static size_t bufalloc;
> static int bufdesc;
> static char *bufbeg;
> static char *buflim;
> static size_t pagesize;
> static off_t bufoffset;
> static off_t after_last_match;
> static int reset(int fd, struct stat const *st) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int fillbuf(size_t save, struct stat const *st) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static enum __anonenum_binary_files_72 binary_files;
> static int filename_mask;
> static int out_quiet;
> static _Bool out_invert;
> static int out_file;
> static int out_line;
> static int out_byte;
> static intmax_t out_before;
> static intmax_t out_after;
> static int count_matches;
> static int list_files;
> static int no_filenames;
> static intmax_t max_count;
> static int line_buffered;
> static char *label = (char *)((void *)0);
> static uintmax_t totalcc;
> static char const *lastnl;
> static char const *lastout;
> static uintmax_t totalnl;
> static intmax_t outleft;
> static intmax_t pending;
> static int done_on_match;
> static int exit_on_match;
> static int dos_report_unix_offset = 0;
> static File_type dos_file_type = (File_type)0;
> static File_type dos_use_file_type = (File_type)0;
> static off_t dos_stripped_crs = (off_t)0;
> static struct dos_map *dos_pos_map;
> static int dos_pos_map_size = 0;
> static int dos_pos_map_used = 0;
> static int inp_map_idx = 0;
> static int out_map_idx = 1;
> static void dos_binary(void) {
> 
> 
> 
> 
> }
> static void dos_unix_byte_offsets(void) {
> 
> 
> 
> 
> }
> static int undossify_input(char *buf, size_t buflen) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static off_t dossified_pos(off_t byteno) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static uintmax_t add_count(uintmax_t a, uintmax_t b) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void nlscan(char const *lim) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void print_filename(void) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void print_sep(char sep) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void print_offset(uintmax_t pos, int min_width, char const *color) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void print_line_head(char const *beg, char const *lim, int sep) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static char const *print_line_middle(char const *beg, char const *lim, char const *line_color,
>                                      char const *match_color) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static char const *print_line_tail(char const *beg, char const *lim, char const *line_color) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void prline(char const *beg, char const *lim, int sep) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void prpending(char const *lim) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static _Bool used;
> static void prtext(char const *beg, char const *lim) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static size_t do_execute(char const *buf, size_t size, size_t *match_size, char const *start_ptr) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static intmax_t grepbuf(char const *beg, char const *lim) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static intmax_t grep(int fd, struct stat const *st) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int grepdirent(FTS *fts, FTSENT *ent, int command_line) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int grepfile(int dirdesc, char const *name, int follow, int command_line) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int grepdesc(int desc, int command_line) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int grep_command_line_arg(char const *arg) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> __attribute__((__noreturn__)) void usage(int status);
> void usage(int status) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void Gcompile(char const *pattern, size_t size) {
> 
> 
> 
> 
> 
> 
> 
> }
> static void Ecompile(char const *pattern, size_t size) {
> 
> 
> 
> 
> 
> 
> 
> }
> static void Acompile(char const *pattern, size_t size) {
> 
> 
> 
> 
> 
> 
> 
> }
> static void GAcompile(char const *pattern, size_t size) {
> 
> 
> 
> 
> 
> 
> 
> }
> static void PAcompile(char const *pattern, size_t size) {
> 
> 
> 
> 
> 
> 
> 
> }
> static struct matcher const matchers[8] =
>     {{{(char const)'g', (char const)'r', (char const)'e', (char const)'p',
>        (char const)'\000'},
>       &Gcompile,
>       &EGexecute},
>      {{(char const)'e', (char const)'g', (char const)'r', (char const)'e',
>        (char const)'p', (char const)'\000'},
>       &Ecompile,
>       &EGexecute},
>      {{(char const)'f', (char const)'g', (char const)'r', (char const)'e',
>        (char const)'p', (char const)'\000'},
>       &Fcompile,
>       &Fexecute},
>      {{(char const)'a', (char const)'w', (char const)'k', (char const)'\000'},
>       &Acompile,
>       &EGexecute},
>      {{(char const)'g', (char const)'a', (char const)'w', (char const)'k',
>        (char const)'\000'},
>       &GAcompile,
>       &EGexecute},
>      {{(char const)'p', (char const)'o', (char const)'s', (char const)'i',
>        (char const)'x', (char const)'a', (char const)'w', (char const)'k',
>        (char const)'\000'},
>       &PAcompile,
>       &EGexecute},
>      {{(char const)'p', (char const)'e', (char const)'r', (char const)'l',
>        (char const)'\000'},
>       &Pcompile,
>       &Pexecute},
>      {{(char const)'\000'}, (void (*)(char const *, size_t))((void *)0), (size_t(*)(char const *, size_t, size_t *, char const *))((void *)0)}};
> static void setmatcher(char const *m) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static size_t prepend_args(char const *options, char *buf, char **argv) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int prepend_default_options(char const *options, int *pargc, char ***pargv) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static int get_nondigit_option(int argc, char *const *argv, intmax_t *default_context);
> static int prev_digit_optind = -1;
> static int get_nondigit_option(int argc, char *const *argv, intmax_t *default_context) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void parse_grep_colors(void) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static _Bool contains_encoding_error(char const *pat, size_t patlen) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> static void fgrep_to_grep_pattern(size_t len, char const *keys, size_t *new_len,
>                                   char **new_keys) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
> int main(int argc, char **argv) {
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> }
\ No newline at end of file
